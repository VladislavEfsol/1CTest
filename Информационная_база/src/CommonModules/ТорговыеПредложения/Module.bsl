////////////////////////////////////////////////////////////////////////////////
// Подсистема "Торговые предложения".
// ОбщийМодуль.ТорговыеПредложения.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытий

// Процедура, вызываемая из обработчика события формы ПриСозданииНаСервере.
// Для формы настройки выгрузки торгового предложения программно формирует элементы
// настройки торговых предложений (гиперссылки, статус).
//
// Параметры:
//  Форма - УправляемаяФорма - из обработчика события которой происходит вызов процедуры.
//  ЭлементИнтерфейса - ЭлементФормы - элемент формы.
//
Процедура ИнициализацияЭлементовФормы(Знач Форма, ЭлементИнтерфейса) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") Тогда
		Возврат;
	КонецЕсли;
	
	ТипТорговоеПредложение = Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип;
	Если ТипТорговоеПредложение.СодержитТип(ТипЗнч(Форма.Объект.Ссылка)) Тогда
		
		Если Не ПравоНастройкиТорговыхПредложений() Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьЭлементыУправленияФормыТорговыеПредложения(Форма, ЭлементИнтерфейса);
		ДекорацияФормы = Форма.Элементы.ТорговыеПредложенияСостояниеОбмена;
		
		ОбновитьДекорациюСостоянияПубликации(Форма.Объект.Ссылка, ДекорацияФормы, Форма.ТорговыеПредложенияПубликовать);
		Форма.Элементы.ТорговыеПредложенияОткрытьНастройкиПубликации.Видимость = Форма.ТорговыеПредложенияПубликовать;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновления элемента формы состояния обмена.
// Изменяет заголовок, цвет, гиперссылку для декорации формы.
//
// Параметры:
//  Ссылка - СправочникСсылка - ссылка на определяемый тип ТорговыеПредложения.
//  ДекорацияФормы - ДекорацияФормы - элемент формы Декорация.
//  РежимПубликации - Булево - признак публикации торгового предложения.
//
Процедура ОбновитьДекорациюСостоянияПубликации(Ссылка, ДекорацияФормы, РежимПубликации = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТорговоеПредложение", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияСинхронизацииТорговыеПредложения.ДатаСинхронизации     КАК ДатаСинхронизации,
	|	СостоянияСинхронизацииТорговыеПредложения.Состояние             КАК Состояние,
	|	СостоянияСинхронизацииТорговыеПредложения.ОписаниеОшибки        КАК ОписаниеОшибки,
	|	СостоянияСинхронизацииТорговыеПредложения.ДействиеСинхронизации КАК ДействиеСинхронизации
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
	|ГДЕ
	|	СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение = &ТорговоеПредложение";
	Выборка = Запрос.Выполнить().Выбрать();
	
	РежимПубликации = Ложь;
	Если Выборка.Следующий() Тогда
		РежимПубликации = Истина;
		Если Выборка.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.Синхронизировано Тогда
			ДекорацияФормы.Заголовок = СтрШаблон("%1 (%2)",
				НСтр("ru = 'Опубликовано'"),
				Формат(Выборка.ДатаСинхронизации, "ДЛФ=DT"));
			ДекорацияФормы.ЦветТекста  = ЦветаСтиля.РезультатУспехЦвет;
			ДекорацияФормы.Гиперссылка = Ложь;
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация Тогда
			Если Выборка.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Удаление Тогда
				ДекорацияФормы.Заголовок = НСтр("ru = 'Удаление публикации. Требуется синхронизация'");
				РежимПубликации          = Ложь;
			Иначе
				ДекорацияФормы.Заголовок = НСтр("ru = 'Требуется синхронизация'");
			КонецЕсли;
			ДекорацияФормы.ЦветТекста  = ЦветаСтиля.ЦветГиперссылкиБЭД;
			ДекорацияФормы.Гиперссылка = Истина;
		Иначе
			ДекорацияФормы.Заголовок   = НСтр("ru = 'Ошибка синхронизации'");
			ДекорацияФормы.ЦветТекста  = ЦветаСтиля.ПоясняющийОшибкуТекст;
			ДекорацияФормы.Гиперссылка = Истина;
		КонецЕсли;
	Иначе
		ДекорацияФормы.Заголовок = "";
	КонецЕсли;
		
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из обработчика события которой происходит вызов процедуры.
//  Источник - СправочникОбъект - источник события.
//  Организация - СправочникСсылка - организация торгового предложения.
//  ЭлементИнтерфейса - ЭлементФормы - группа элементов формы.
//  Отказ - Булево - признак отказа от выполнения действия.
//
Процедура ПередЗаписьюНаСервере(Знач Форма, Знач Источник, Знач Организация, Знач ЭлементИнтерфейса, Отказ) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") Тогда
		Возврат;
	КонецЕсли;
	
	Если Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип.СодержитТип(ТипЗнч(Источник.Ссылка)) Тогда
		ГруппаТорговыеПредложения = ЭлементИнтерфейса.ПодчиненныеЭлементы.Найти("ГруппаТорговыеПредложения");
		Если ГруппаТорговыеПредложения = Неопределено
			ИЛИ ГруппаТорговыеПредложения.ПодчиненныеЭлементы.Найти("ТорговыеПредложенияПубликовать") = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Форма.ТорговыеПредложенияПубликовать Тогда
			ТекстСообщения = "";
			Если Не ЗначениеЗаполнено(Источник.Организация) Тогда
				ТекстСообщения = НСтр("ru = 'Организация не указана. Публикация торговых предложений невозможна.'");
			ИначеЕсли Не БизнесСеть.ОрганизацияЗарегистрирована(Источник.Организация) Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Организация %1 не зарегистрирована в сервисе 1С:Бизнес-сеть. Публикация торговых предложений отменена.'"),
					Источник.Организация);
			КонецЕсли;
			Если Не ПустаяСтрока(ТекстСообщения) Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
					Источник.Ссылка, "Организация", "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект - ОпределяемыйТип.ТорговоеПредложение - торговое предложений.
//  Организация - ОпределяемыйТип.Организация - организация торгового предложения.
//  ЭлементИнтерфейса - ЭлементФормы - группа элементов формы.
//
Процедура ПослеЗаписиНаСервере(Знач Форма, Знач ТекущийОбъект, Знач Организация, Знач ЭлементИнтерфейса = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") Тогда
		Возврат;
	КонецЕсли;

	Если Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип.СодержитТип(ТипЗнч(ТекущийОбъект.Ссылка)) Тогда
		
		Если ЭлементИнтерфейса.ПодчиненныеЭлементы.Найти("ГруппаТорговыеПредложения") = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Источник = ТекущийОбъект.Ссылка;
		ЭлементСостояниеОбмена     = Форма.Элементы.ТорговыеПредложенияСостояниеОбмена;
		ЭлементНастройкиПубликации = Форма.Элементы.ТорговыеПредложенияОткрытьНастройкиПубликации;
		Публиковать                = Форма.ТорговыеПредложенияПубликовать;
		
		СостоянияСинхронизации = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения;
		Выборка = СостоянияСинхронизации.Выбрать(Новый Структура("ТорговоеПредложение", Источник));
		МенеджерЗаписи = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТорговоеПредложение = Источник;
		ЕстьЗапись = Ложь;
		Если Выборка.Следующий() Тогда
			МенеджерЗаписи.Организация = Выборка.Организация;
			МенеджерЗаписи.Прочитать();
			ЕстьЗапись = Истина;
		Иначе
			МенеджерЗаписи.Организация = Организация;
		КонецЕсли;
		
		Если Публиковать Тогда
			Статус = НСтр("ru = 'Требуется синхронизация'");
		ИначеЕсли ЕстьЗапись Тогда
			Статус = НСтр("ru = 'Удаление публикации. Требуется синхронизация'");
		Иначе
			Статус = "";
		КонецЕсли;
		
		Если Не Публиковать И ЕстьЗапись Тогда
			Если МенеджерЗаписи.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Добавление Тогда // отменяем синхронизацию
				МенеджерЗаписи.Удалить();
				Статус = "";
			Иначе
				МенеджерЗаписи.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Удаление;
				МенеджерЗаписи.Состояние             = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация;
				МенеджерЗаписи.ДатаСинхронизации     = '00010101';
				МенеджерЗаписи.Записать();
			КонецЕсли;
		ИначеЕсли Публиковать Тогда
			МенеджерЗаписи.ТорговоеПредложение = Источник;
			МенеджерЗаписи.Организация         = Организация;
			МенеджерЗаписи.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация;
			МенеджерЗаписи.ДействиеСинхронизации = ?(ЕстьЗапись,
				Перечисления.ДействияСинхронизацииТорговыеПредложения.Изменение,
				Перечисления.ДействияСинхронизацииТорговыеПредложения.Добавление);
			МенеджерЗаписи.Записать(ЕстьЗапись);
		КонецЕсли;
		
		Если ЭлементСостояниеОбмена <> Неопределено И (ЕстьЗапись ИЛИ Публиковать) Тогда
			ЭлементСостояниеОбмена.Заголовок = Строка(МенеджерЗаписи.Состояние);
			ЭлементСостояниеОбмена.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБЭД;
			ЭлементСостояниеОбмена.Гиперссылка     = Истина;
			ЭлементНастройкиПубликации.Видимость   = Не ПустаяСтрока(Статус) И Публиковать;
			ЭлементСостояниеОбмена.Доступность     = Истина;
			ЭлементНастройкиПубликации.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик создания подсказок формы.
//
// Параметры:
//  Форма			 - УправляемаяФорма - форма, в которой создаются подсказки.
//  ГруппаЭлементов	 - ГруппаЭлементов - группа элементов формы, в которой размещаются подсказки.
//
Процедура ПриСозданииПодсказокФормы(Форма, ГруппаЭлементов) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") Тогда
		Возврат;
	КонецЕсли;
	
	// Добавление реквизита формы для хранения подсказки.
	Картинка = Форма.Элементы.Добавить("Подключаемый_КартинкаТорговыеПредложения", Тип("ДекорацияФормы"), ГруппаЭлементов);
	Картинка.Вид       = ВидДекорацииФормы.Картинка;
	Картинка.Картинка  = БиблиотекаКартинок.Идея;
	Картинка.Видимость = Ложь;
	
	Декорация = Форма.Элементы.Добавить("Подключаемый_ПодсказкаТорговыеПредложения", Тип("ДекорацияФормы"), ГруппаЭлементов);
	Декорация.АвтоМаксимальнаяШирина = Ложь;
	Декорация.УстановитьДействие("Нажатие", "Подключаемый_ПодсказкиБизнесСетьНажатие");
	Декорация.Гиперссылка = Истина;
	Декорация.Видимость   = Ложь;
	
	НовыйРеквизит = Новый РеквизитФормы("Подключаемый_ТорговыеПредложенияПодсказка",
		Новый ОписаниеТипов("Неопределено"),, НСтр("ru = 'Подсказка торговых предложений'"));
	
	// Добавление реквизита формы для хранения подсказки.
	НовыеРеквизитыФормы = Новый Массив;
	НовыеРеквизитыФормы.Добавить(НовыйРеквизит);
	Форма.ИзменитьРеквизиты(НовыеРеквизитыФормы);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// См. ЭлектронноеВзаимодействие.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
#Область Отложенно
	
#Область Версия_1_3_10
	
#Область РегистрыСведений_СоответствиеРеквизитовБизнесСеть_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.10.23";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.СоответствиеРеквизитовБизнесСеть.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("39a14352-c603-4697-9953-0f69f0adc720");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СоответствиеРеквизитовБизнесСеть.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "РегистрыСведений.СоответствиеРеквизитовБизнесСеть.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.СоответствиеРеквизитовБизнесСеть,"
		+ "РегистрСведений.СоответствиеЗначенийРеквизитовБизнесСеть";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СоответствиеРеквизитовБизнесСеть,"
		+ "РегистрСведений.СоответствиеЗначенийРеквизитовБизнесСеть";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.СоответствиеЗначенийРеквизитовБизнесСеть,"
		+ "РегистрСведений.СоответствиеРеквизитовБизнесСеть";
	Обработчик.Комментарий = НСтр("ru = 'Обновление сопоставления номенклатуры 1С:Бизнес-сеть'");
	
#КонецОбласти
	
#КонецОбласти
	
#КонецОбласти
	
КонецПроцедуры

// Проверяет возможность настройки торговых предложений в сервисе 1С:Бизнес-сеть для текущего пользователя.
//
// Возвращаемое значение:
//  Булево - наличие права на настройку обмена документами.
//
Функция ПравоНастройкиТорговыхПредложений(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронноеВзаимодействиеСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

// Получение подсказки по контексту в фоновом задании.
//
// Параметры:
//  ДанныеКонтекста	 - Структура - контекст данных формы для подсказок,
//    см. ТорговыеПредложенияКлиент.ДанныеКонтекстаДляПодсказки.
//  АдресРезультата - Строка - адрес временного хранилища, в которое будет
//                             помещен (или уже помещен) результат работы процедуры.
// 
// Возвращаемое значение:
//  Структура - данные подсказок, см. ОписаниеПодсказокСервиса.
//
Функция ПолучитьПодсказкуПоКонтексту(ДанныеКонтекста, Знач АдресРезультата) Экспорт
	
	Подсказки = ОписаниеПодсказокСервиса();
	
	// Заполнение роли пользователя.
	ПодсказкаXDTO = ФабрикаXDTO.Создать(ТипXDTO("HintRequest"));
	Если ДанныеКонтекста.РежимПоставщика Тогда
		ПодсказкаXDTO.role = "shipper";
	ИначеЕсли ДанныеКонтекста.РежимПокупателя Тогда
		ПодсказкаXDTO.role = "customer";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Показ контекстной подсказки из документов производится только при включенной опции
	// показа подсказок для покупателей.
	УстановитьПривилегированныйРежим(Истина);
	ПоказыватьПодсказкиПокупателей = Константы.ПоказыватьПодсказкиПокупателейБизнесСеть.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеКонтекста.РежимПокупателя 
		И (ДанныеКонтекста.РежимПоискаПоСписку ИЛИ ДанныеКонтекста.РежимПоискаПоОтборам)
		И Не ПоказыватьПодсказкиПокупателей Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Заполнение данных по организациям.
	Если ДанныеКонтекста.Организации.Количество() Тогда
		
		// Проверка регистрации организации в сервисе.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОрганизацииБизнесСеть.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
		|ГДЕ
		|	ОрганизацииБизнесСеть.Организация В(&СписокОрганизаций)";
		Запрос.УстановитьПараметр("СписокОрганизаций", ДанныеКонтекста.Организации);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() <> ДанныеКонтекста.Организации.Количество() Тогда
			// Не все организации контекста зарегистрированы в сервисе, подсказка не отображается.
			Возврат Неопределено;
		КонецЕсли;
		
		// Заполнение данных по организации.
		Для каждого Организация Из ДанныеКонтекста.Организации Цикл
			РеквизитыОрганизации = Неопределено; 
			ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Организация, РеквизитыОрганизации);
			ОрганизацияXDTO = ФабрикаXDTO.Создать(ТипXDTO("Organization"));
			
			Отказ = Ложь;
			Идентификаторы = БизнесСеть.ИдентификаторыУчастника(РеквизитыОрганизации.ИНН, РеквизитыОрганизации.КПП,, Отказ);
			Если Отказ Тогда
				Продолжить;
			КонецЕсли;
			
			ОрганизацияXDTO.inn = Идентификаторы.ИНН;
			ОрганизацияXDTO.kpp = Идентификаторы.КПП;
			ПодсказкаXDTO.organizations.Добавить(ОрганизацияXDTO);
		КонецЦикла;
		
	Иначе
		// Получение всех зарегистрированных организаций.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОрганизацииБизнесСеть.Организация КАК Ссылка
		|ИЗ
		|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть";
		
		СписокОрганизаций = Запрос.Выполнить().Выгрузить();
		БизнесСеть.ЗаполнитьРеквизитыОрганизаций(СписокОрганизаций);
		
		Для каждого РеквизитыОрганизации Из СписокОрганизаций Цикл
			
			ОрганизацияXDTO = ФабрикаXDTO.Создать(ТипXDTO("Organization"));
			
			Отказ = Ложь;
			Идентификаторы = БизнесСеть.ИдентификаторыУчастника(РеквизитыОрганизации.ИНН, РеквизитыОрганизации.КПП,, Отказ);
			Если Отказ Тогда
				Продолжить;
			КонецЕсли;
			
			ОрганизацияXDTO.inn = Идентификаторы.ИНН;
			ОрганизацияXDTO.kpp = Идентификаторы.КПП;
			
			ПодсказкаXDTO.organizations.Добавить(ОрганизацияXDTO);
			
		КонецЦикла;
	КонецЕсли;
	
	// Подготовка данных по объекту.
	Если ЗначениеЗаполнено(ДанныеКонтекста.Основание) Тогда
		
		// Валюта.
		Валюта = Неопределено; ВалютаКод = "";
		ТорговыеПредложенияПереопределяемый.ПолучитьВалютуРегламентированногоУчета(Валюта);
		Если ЗначениеЗаполнено(Валюта) Тогда
			ВалютаКод = ТорговыеПредложенияПовтИсп.КодВалюты(Валюта);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВалютаКод) Тогда
			ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Получение подсказки торговых предложений.'"),
				НСтр("ru = 'Ошибка получения валюты или кода валюты.'"),, "БизнесСеть");
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
		
		Если ДанныеКонтекста.РежимПоискаПоСписку Тогда
			
			ПоискXDTO = ФабрикаXDTO.Создать(ТипXDTO("ProductListSearch"));
			ПоискXDTO.currency = ВалютаКод;
			
			// Список товаров для поиска.
			ПараметрыПоиска = Новый Структура;
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыПоиска, СохраненныеНастройкиПоискаПоТоварам());
			Товары = ОписаниеТаблицыТоваровДляПоиска();
			ТорговыеПредложенияПереопределяемый.ПолучитьТоварыДляПодсказокПоСсылке(
				ДанныеКонтекста.Основание, ПараметрыПоиска.ПоискПоШтрихКоду, Товары);
			ПараметрыПоиска.Вставить("Товары", Товары);
			СписокТоваровXDTO = ТоварыДляПоискаПоСпискуXDTO(ПараметрыПоиска);
			
			// Если список товаров пустой, прерывание.
			Если СписокТоваровXDTO.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Для каждого СтрокаТовара Из СписокТоваровXDTO Цикл
				ПоискXDTO.listSearch.Добавить(СтрокаТовара);
			КонецЦикла;
			
			// Регион поиска.
			РегионПоиска = СохраненныеНастройкиРегионаПоиска();
			Если РегионПоиска.РежимОтбора <> 0 Тогда
				ОбъектРегион = ФабрикаXDTO.Создать(ТипXDTO("RegionFilter"));
				ОбъектРегион.regionMode = РегионПоиска.РежимОтбора;
				Если РегионПоиска.РежимОтбора = 2 Тогда // Отбор по указанному региону
					ОбъектРегион.regions.Добавить(ПоляXDTOРегионаКонтактнойИнформацииСервиса(РегионПоиска.ЗначенияПолей));
				КонецЕсли;
				ПоискXDTO.regionFilter = ОбъектРегион;
			КонецЕсли;
			
			// Заполнение списка поиска.
			ПодсказкаXDTO.productListSearch = ПоискXDTO;
			
		ИначеЕсли ДанныеКонтекста.РежимПоискаПоОтборам Тогда
			
			ПоискXDTO = ФабрикаXDTO.Создать(ТипXDTO("ProductSearch"));
			ПоискXDTO.currency = ВалютаКод;
			
			Товары = ОписаниеТаблицыТоваровДляПоиска();
			ТорговыеПредложенияПереопределяемый.ПолучитьТоварыДляПодсказокПоСсылке(ДанныеКонтекста.Основание, Истина, Товары);
			Если Не Товары.Количество() Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			ПоискXDTO.productName = Товары[0].Наименование;
			ПоискXDTO.vendorCode  = Товары[0].Артикул;
			Для каждого ЗначениеМассива Из Товары[0].Штрихкоды Цикл
				ПоискXDTO.barcodes.Добавить(ЗначениеМассива);
			КонецЦикла;
			
			ПодсказкаXDTO.productSearch = ПоискXDTO;
			
			// Дополнительные параметры для открытия поиска по отборам.
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОтборНаименование", Товары[0].Наименование);
			ДополнительныеПараметры.Вставить("ОтборАртикул",      Товары[0].Артикул);
			ДополнительныеПараметры.Вставить("ОтборШтрихкоды",    Товары[0].Штрихкоды);
			Подсказки.ДополнительныеПараметры = ДополнительныеПараметры;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Выполнение запроса к сервису.
	Отказ = Ложь;
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Данные",  ОбъектXDTOВСтрокуJSON(ПодсказкаXDTO));
	ПараметрыКоманды = ПараметрыКомандыПолучитьПодсказку(ПараметрыМетода);
	Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	Если Отказ ИЛИ Не ЗначениеЗаполнено(Результат) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Подсказки, Результат, "Код, Заголовок, Содержание");
	
	// Преобразование значений доступных действий.
	Если ТипЗнч(Результат.Действия) = Тип("Массив") Тогда
		Для каждого Действие Из Результат.Действия Цикл
			Если ВРег(Действие) = "REGISTRATION" Тогда
				Подсказки.Действия.Добавить("Регистрация");
			ИначеЕсли ВРег(Действие) = "PRODUCT_PUBLICATION" Тогда
				Подсказки.Действия.Добавить("ПубликацияТорговыхПредложений");
			ИначеЕсли ВРег(Действие) = "BARCODE_UPLOAD" Тогда
				Подсказки.Действия.Добавить("ВыгрузкаШтрихкодов");
			ИначеЕсли ВРег(Действие) = "INVITE_ORG" Тогда
				Подсказки.Действия.Добавить("ОтправкаПриглашений");
			ИначеЕсли ВРег(Действие) = "PRODUCT_SEARCH" Тогда
				Подсказки.Действия.Добавить("ПоискПоОтборам");
			ИначеЕсли ВРег(Действие) = "PRODUCT_LIST_SEARCH" Тогда
				Подсказки.Действия.Добавить("ПоискПоТоварам");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Сохранение подсказки по временное хранилище.
	ПоместитьВоВременноеХранилище(Подсказки, АдресРезультата);
	
КонецФункции

// Дополнительные настройки публикации.
//
// Параметры:
//  ТорговоеПредложение	 - Ссылка - ссылка на торговое предложение.
// 
// Возвращаемое значение:
//  Структура - значения дополнительных настроек.
//   * Организация - Ссылка - организация настройки.
//   * АдресЭлектроннойПочты - Строка - адрес электронной почты поставщика.
//   * Организация - Ссылка - организация настройки.
//   * УведомлятьОЗаказах - Булево - признак уведомления о получении заказов покупателей.
//   * ПубликоватьЦены - Булево - публиковать цены.
//   * ПубликоватьСрокиПоставки - Булево - публиковать сроки поставки.
//   * ПубликоватьОстатки - Булево - публиковать остатки.
//   * ДополнительноеОписание - Строка - дополнительное текстовое описание.
//
Функция ДополнительныеНастройкиПубликации(ТорговоеПредложение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияСинхронизацииТорговыеПредложения.Организация КАК Организация,
	|	СостоянияСинхронизацииТорговыеПредложения.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	СостоянияСинхронизацииТорговыеПредложения.УведомлятьОЗаказах КАК УведомлятьОЗаказах,
	|	СостоянияСинхронизацииТорговыеПредложения.ПубликоватьЦены КАК ПубликоватьЦены,
	|	СостоянияСинхронизацииТорговыеПредложения.ПубликоватьСрокиПоставки КАК ПубликоватьСрокиПоставки,
	|	СостоянияСинхронизацииТорговыеПредложения.ПубликоватьОстатки КАК ПубликоватьОстатки,
	|	СостоянияСинхронизацииТорговыеПредложения.ДополнительноеОписание КАК ДополнительноеОписание
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
	|ГДЕ
	|	СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТорговоеПредложение);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() Тогда
		Результат = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Таблица[0]);
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТорговыеПредложения

// Параметры команды получения валюты по коду.
//
// Параметры:
//  КодВалюты	 - Строка - код валюты.
// 
// Возвращаемое значение:
//  СправочникСсылка.Валюты - значение валюты по коду.
//
Функция ПараметрыКомандыПолучитьВалютуПоКоду(КодВалюты) Экспорт

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();

	ПараметрыКоманды.Наименование = НСтр("ru = 'Получение валюты'");
	ПараметрыКоманды.Адрес  = СтрШаблон("/api/offer/v1/currency/%1", Формат(КодВалюты, "ЧГ="));
	ПараметрыКоманды.Метод  = "GET";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Валюта не найдена.'"));
	
	ОбработкаРезультата = Новый Структура;
	ОбработкаРезультата.Вставить("ПолноеНаименование", "name");
	ОбработкаРезультата.Вставить("Наименование",       "codeStr");
	ОбработкаРезультата.Вставить("Код",       "codeNum");
	ОбработкаРезультата.Вставить("Курс",      "rate");
	ОбработкаРезультата.Вставить("ДатаКурса", "rateTime");
	
	ПараметрыКоманды.Вставить("ОбработкаРезультата", ОбработкаРезультата);
	
	Возврат ПараметрыКоманды;
	
КонецФункции

Функция ПараметрыКомандыПолучитьАдресныеНастройкиАбонента()

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
		
	ПараметрыКоманды.Наименование = НСтр("ru = 'Чтение адресов абонента'");
	ПараметрыКоманды.Адрес = "/api/offer/v1/campaign/address";
	ПараметрыКоманды.Метод = "GET";
	ПараметрыКоманды.Права = "bn_user";
	
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыСинхронизироватьАдресныеНастройкиАбонента(ПараметрыМетода, Отказ = Неопределено)
	
	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Запись адресов абонента'");
	ПараметрыКоманды.Адрес  = "/api/offer/v1/campaign/address/fullSync";
	ПараметрыКоманды.Метод  = "POST";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = ПараметрыМетода.Данные;
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав для записи данных.'"));
	Возврат ПараметрыКоманды;
	
КонецФункции

Функция ПараметрыКомандыПолучитьАдресаСамовывоза(ПараметрыМетода, Отказ = Неопределено)

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	Идентификаторы = БизнесСеть.ИдентификаторыУчастника(ПараметрыМетода.ИНН, ПараметрыМетода.КПП,
		ПараметрыМетода.Ссылка, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено
	КонецЕсли;
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Чтение адресов самовывоза'");
	ПараметрыКоманды.Адрес = СтрШаблон("/api/offer/v1/organization/%1/%2/campaign/address",
		Идентификаторы.ИНН, Идентификаторы.КПП);
	ПараметрыКоманды.Метод = "GET";
	ПараметрыКоманды.Права = "bn_user";
		
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыВыгрузкаШтрихкодовДляПодсказок(ПараметрыМетода, Отказ)

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	
	РеквизитыОрганизации = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыМетода.Организация, РеквизитыОрганизации);
	
	ТекстОшибки = "";
	Идентификаторы = БизнесСеть.ИдентификаторыУчастника(РеквизитыОрганизации.ИНН, РеквизитыОрганизации.КПП,
		ПараметрыМетода.Организация, Отказ, ТекстОшибки);
	Если Отказ Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка выгрузки штрихкодов для подсказок:'") + " " + ТекстОшибки;
	КонецЕсли;

	ПараметрыКоманды.Адрес = СтрШаблон("/api/offer/v1/organization/%1/%2/barcode/fullSync",
		Идентификаторы.ИНН, Идентификаторы.КПП);
		
	ПараметрыКоманды.Наименование = НСтр("ru = 'Выгрузка штрихкодов номенклатуры'");
	ПараметрыКоманды.Метод = "POST";
	ПараметрыКоманды.Права = "bn_user";
	ПараметрыКоманды.Данные = ПараметрыМетода.Данные;
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Ошибка выгрузки штрихкодов номенклатуры.'"));
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПолучитьПодсказку(ПараметрыМетода)

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();

	ПараметрыКоманды.Наименование = НСтр("ru = 'Получение подсказок'");
	ПараметрыКоманды.Адрес  = "/api/offer/v1/hint";
	ПараметрыКоманды.Метод  = "POST";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = ПараметрыМетода.Данные;
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Организация не найдена в сервисе.'"));
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав на организацию.'"));
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Ошибка параметров.'"));
	ПараметрыКоманды.БлокироватьСообщенияОбОшибках = Истина;
	
	ОбработкаРезультата = Новый Структура;
	ОбработкаРезультата.Вставить("Код",        "code");
	ОбработкаРезультата.Вставить("Заголовок",  "shortText");
	ОбработкаРезультата.Вставить("Содержание", "longText");
	ОбработкаРезультата.Вставить("Действия",   "actions");
	
	ПараметрыКоманды.Вставить("ОбработкаРезультата", ОбработкаРезультата);
	
	// Проверка регистрации организаций.
	Если Не БизнесСеть.ОрганизацияЗарегистрирована() Тогда
		ПараметрыКоманды.Права = "bn_its";
	КонецЕсли;

	Возврат ПараметрыКоманды;

КонецФункции

#КонецОбласти

#Область ОписаниеПараметров

// Описание реквизитов номенклатуры.
//
// Возвращаемое значение:
//  Структура - описание реквизитов.
//
Функция НовыйПараметрыНоменклатуры() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ИспользованиеХарактеристик");
	Реквизиты.Вставить("ЕдиницаИзмерения");
	Реквизиты.Вставить("Упаковка");

	Возврат Реквизиты;
	
КонецФункции

// Описание региона поиска.
// 
// Возвращаемое значение:
//  Структура - описание переменной для отбора по региону поиска:
//    * РежимОтбора - Число - режим отбора (0 - без отбора, 1 - отбор по регионам профиля, 2 - указанный регион).
//    * Представление - Строка - представление региона поиска.
//    * ЗначенияПолей - Строка - внутреннее представление региона поиска введенного вручную.
//
Функция ОписаниеРегионаПоиска() Экспорт
		
	Результат = Новый Структура;
	Результат.Вставить("РежимОтбора",   0);
	Результат.Вставить("Представление", "");
	Результат.Вставить("ЗначенияПолей", Неопределено);
	Возврат Результат;
	
КонецФункции

// Получение структуры реквизитов сопоставления рубрикатора.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица реквизитов с указанными типами колонок.
//
Функция ОписаниеРеквизитовСопоставленияРубрикатора()
	
	ТипСтрока        = Новый ОписаниеТипов("Строка");
	ТипБулево        = Новый ОписаниеТипов("Булево");
	ТипОписаниеТипов = Новый ОписаниеТипов("ОписаниеТипов");
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("РеквизитОбъекта");
	Таблица.Колонки.Добавить("ИдентификаторРеквизитаКатегории", ТипСтрока);
	Таблица.Колонки.Добавить("ПредставлениеРеквизитаКатегории", ТипСтрока);
	Таблица.Колонки.Добавить("Сопоставлено",                    ТипСтрока);
	Таблица.Колонки.Добавить("ТипЗначения",                     ТипОписаниеТипов);
	Таблица.Колонки.Добавить("ТипРеквизитаРубрикатора",         ТипСтрока);
	Таблица.Колонки.Добавить("ВозможноСопоставление",           ТипБулево);
	
	Возврат Таблица;
	
КонецФункции

// Описание настроек поиска по товарам
// 
// Возвращаемое значение:
//  Структура - описание структуры для хранения настроек поиска по товарам.
//
Функция ОписаниеНастроекПоискаПоТоварам()
	
	Результат = Новый Структура;
	Результат.Вставить("ПревышениеМинимальнойЦены",     25);
	Результат.Вставить("МаксимальныйСрокПоставки",       7);
	Результат.Вставить("ОграничениеТорговыхПредложений", 5);
	Результат.Вставить("ПоискПоНаименованию",        Ложь);
	Результат.Вставить("ПоискПоХарактеристике",      Ложь);
	Результат.Вставить("ПоискПоАртикулу",            Ложь);
	Результат.Вставить("ПоискПоШтрихКоду",           Истина);
	Результат.Вставить("ПоискПоНоменклатуреСервиса", Истина);
	
	Возврат Результат;
	
КонецФункции

// Описание подсказок сервиса.
// 
// Возвращаемое значение:
//  Структура - описание данных для подсказок.
//
Функция ОписаниеПодсказокСервиса()
	
	Подсказки = Новый Структура;
	Подсказки.Вставить("Код",        "");
	Подсказки.Вставить("Заголовок",  "");
	Подсказки.Вставить("Содержание", "");
	Подсказки.Вставить("ДействиеРегистрация", Ложь);
	Подсказки.Вставить("ДействиеПубликация",  Ложь);
	Подсказки.Вставить("ДействиеВыгрузка",    Ложь);
	Подсказки.Вставить("ДействиеПриглашение", Ложь);
	Подсказки.Вставить("ДействиеПоиск",       Ложь);
	Подсказки.Вставить("Действия",            Новый Массив); // Массив действий.
	Подсказки.Вставить("ДополнительныеПараметры", Новый Структура); // Массив действий.
	Подсказки.Вставить("Основание",           Неопределено); // Заполняется по контексту формы.
	Подсказки.Вставить("РежимПоставщика",     Ложь); // Заполняется по контексту формы.
	Подсказки.Вставить("РежимПокупателя",     Ложь); // Заполняется по контексту формы.
	
	Возврат Подсказки;
	
КонецФункции

// Описание таблицы товаров для поиска.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица товаров для поиска:
//   * Номенклатура        - Ссылка - номенклатура.
//   * Характеристика      - Ссылка - характеристика.
//   * Упаковка            - Ссылка - упаковка.
//   * Количество          - Число - количество товара.
//   * УпаковкаКод         - Строка - код упаковки по классификатору ОКЕИ.
//   * ЕдиницаИзмеренияКод - Строка - код единицы измерений по классификатору ОКЕИ.
//   * УпаковкаЧислитель   - Число - числитель упаковки по отношению к единице измерения.
//   * УпаковкаЗнаменатель - Знаменатель - знаменатель упаковки по отношению к единице измерения.
//   * Артикул             - Строка - артикул товара.
//   * Наименование        - Строка - наименование товара.
//   * Штрихкоды           - Массив из Строка - штрихкоды товара.
//
Функция ОписаниеТаблицыТоваровДляПоиска()
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура",        Справочники.ТипВсеСсылки());
	Товары.Колонки.Добавить("Характеристика",      Справочники.ТипВсеСсылки());
	Товары.Колонки.Добавить("Упаковка",            Справочники.ТипВсеСсылки());
	Товары.Колонки.Добавить("Количество",          Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("УпаковкаКод",         Новый ОписаниеТипов("Строка"));
	Товары.Колонки.Добавить("ЕдиницаИзмеренияКод", Новый ОписаниеТипов("Строка"));
	Товары.Колонки.Добавить("УпаковкаЧислитель",   Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("УпаковкаЗнаменатель", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("Артикул",             Новый ОписаниеТипов("Строка"));
	Товары.Колонки.Добавить("Наименование",        Новый ОписаниеТипов("Строка"));
	Товары.Колонки.Добавить("Штрихкоды",           Новый ОписаниеТипов("Массив"));
	
	Возврат Товары;
	
КонецФункции

#КонецОбласти

#Область Рубрикатор

// Получение категорий рубрикатора.
//
// Параметры:
//  СтрокаДерева	 - КоллекцияСтрокДереваЗначений - строка дерева значения для заполнения.
//  Идентификатор	 - Строка - идентификатор категории.
//
Процедура ПолучитьКатегорииРубрикатора(СтрокаДерева, Знач Идентификатор) Экспорт
	
	Отказ = Ложь;
	
	Если Идентификатор = Неопределено Тогда
		// Получение корневого дерева.
		ПараметрыКоманды = ПараметрыКомандыПолучитьСписокКатегорийПервогоУровня();
		Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	Иначе
		// Получение вложенных объектов.
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("ИдентификаторКатегории", Идентификатор);
		ПараметрыКоманды = ПараметрыКомандыПолучитьСписокДочернихКатегорий(ПараметрыМетода, Отказ);
		Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементСтруктуры Из Результат Цикл
		НоваяСтрока = СтрокаДерева.Строки.Добавить();
		НоваяСтрока.Идентификатор = Формат(ЭлементСтруктуры.Id, "ЧГ=");
		НоваяСтрока.Представление = ЭлементСтруктуры.title;
		НоваяСтрока.КоличествоПодчиненных = ЭлементСтруктуры.childrenCount;
		Если НоваяСтрока.КоличествоПодчиненных > 0 Тогда
			НоваяСтрока.ИндексКартинки = 0; // Картинка группы.
		Иначе
			НоваяСтрока.ИндексКартинки = 3; // Картинка элемента.
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получение реквизитов рубрикатора по условиям.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - параметры для выполнения:
//   * ВидНоменклатуры        - СправочникСсылка.ВидыНоменклатуры, Строка - владелец для отбора реквизитов.
//   * ИдентификаторКатегории - Строка - идентификатор категории рубрикатора 1С:Бизнес-сеть.
//  АдресРезультата    - Строка - адрес временного хранилища с результатом.
//
Процедура ПолучитьРеквизитыРубрикатора(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	// Получить данные из сервиса.
	Отказ = Ложь;
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ИдентификаторКатегории", ПараметрыПроцедуры.ИдентификаторКатегории);
	ПараметрыКоманды = ПараметрыКомандыПолучитьСписокХарактеристикКатегории(ПараметрыМетода, Отказ);
	Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);	
	
	Если Отказ ИЛИ Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	// Сопоставленные значения реквизитов информационной базы и сервиса.
	СопоставленныеРеквизиты = Новый ТаблицаЗначений;
	СопоставленныеРеквизиты.Колонки.Добавить("РеквизитОбъекта");
	СопоставленныеРеквизиты.Колонки.Добавить("ИдентификаторРеквизитаКатегории", Новый ОписаниеТипов("Строка"));
	СопоставленныеРеквизиты.Колонки.Добавить("Представление",                   Новый ОписаниеТипов("Строка"));
	СопоставленныеРеквизиты.Индексы.Добавить("ИдентификаторРеквизитаКатегории"); // Индекс.
	
	// Дополнительные реквизиты номенклатуры в информационной базе.
	ДополнительныеРеквизиты = Новый ТаблицаЗначений;
	ДополнительныеРеквизиты.Колонки.Добавить("РеквизитОбъекта", Метаданные.ОпределяемыеТипы.ДополнительныеРеквизитыБизнесСеть.Тип);
	ДополнительныеРеквизиты.Колонки.Добавить("ТипЗначения");
	ДополнительныеРеквизиты.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	// Таблица расчета сопоставленных значений реквизитов в информационной базе со значениями сервиса.
	РасчетСоответствий = Новый ТаблицаЗначений;
	РасчетСоответствий.Колонки.Добавить("РеквизитОбъекта");
	РасчетСоответствий.Колонки.Добавить("КоличествоЗначенийРеквизита");
	РасчетСоответствий.Колонки.Добавить("КоличествоСопоставленныхРеквизитов");
	РасчетСоответствий.Индексы.Добавить("РеквизитОбъекта");	// Индекс.
	
	ТорговыеПредложенияПереопределяемый.ПолучитьДанныеСопоставленияРеквизитов(ПараметрыПроцедуры.Ссылка,
		СопоставленныеРеквизиты, ДополнительныеРеквизиты, РасчетСоответствий);
	
	РеквизитыРубрикатора = ОписаниеРеквизитовСопоставленияРубрикатора();
	
	Для каждого РеквизитРубрикатора Из Результат Цикл
		
		ЭтоДополнительныеЗначенияРеквизита = Ложь;
		ЭтоДополнительныеЗначенияСервиса   = Ложь;
		
		// Заполнение данных рубрикатора сервера.
		Если СтрНайти(РеквизитРубрикатора.sourceId, "-") ИЛИ СтрНайти(РеквизитРубрикатора.sourceId, "shipping")
			ИЛИ РеквизитРубрикатора.title = "Минимальная цена" ИЛИ РеквизитРубрикатора.title = "Максимальная цена" Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйРеквизит = РеквизитыРубрикатора.Добавить();
		НовыйРеквизит.ПредставлениеРеквизитаКатегории = РеквизитРубрикатора.title
			+ ?(ЗначениеЗаполнено(РеквизитРубрикатора.unitCode), ", " + РеквизитРубрикатора.unitCode, "");
		НовыйРеквизит.ИдентификаторРеквизитаКатегории = Формат(РеквизитРубрикатора.id, "ЧГ=");
		Если РеквизитРубрикатора.type = "NUMBER" Тогда
			НовыйРеквизит.ТипРеквизитаРубрикатора = "Число";
		ИначеЕсли РеквизитРубрикатора.type = "STRING" Тогда
			НовыйРеквизит.ТипРеквизитаРубрикатора = "Строка";
		ИначеЕсли РеквизитРубрикатора.type = "BOOLEAN" Тогда
			НовыйРеквизит.ТипРеквизитаРубрикатора = "Да/Нет";
		ИначеЕсли РеквизитРубрикатора.type = "ENUMERATION" Тогда
			НовыйРеквизит.ТипРеквизитаРубрикатора = "Список";
			ЭтоДополнительныеЗначенияСервиса = Истина;
		КонецЕсли;
		
		// Установка типов данных.
		СтрокаПоиска = СопоставленныеРеквизиты.Найти(
			НовыйРеквизит.ИдентификаторРеквизитаКатегории, "ИдентификаторРеквизитаКатегории");
		Если СтрокаПоиска <> Неопределено Тогда
			
			НовыйРеквизит.РеквизитОбъекта = СтрокаПоиска.РеквизитОбъекта;
			
			// Поиск в списке реквизитов номенклатуры.
			СтрокиРеквизитов = ДополнительныеРеквизиты.НайтиСтроки(
				Новый Структура("РеквизитОбъекта", СтрокаПоиска.РеквизитОбъекта));
			Если СтрокиРеквизитов.Количество() Тогда
				НовыйРеквизит.ТипЗначения = СтрокиРеквизитов[0].ТипЗначения;
				Если ОбщегоНазначения.ЭтоСсылка(СтрокиРеквизитов[0].ТипЗначения.Типы()[0]) Тогда
					ЭтоДополнительныеЗначенияРеквизита = Истина;
					Если РасчетСоответствий.Найти(СтрокаПоиска.РеквизитОбъекта, "РеквизитОбъекта") = Неопределено Тогда
						НовоеСоответствие = РасчетСоответствий.Добавить();
						НовоеСоответствие.РеквизитОбъекта = СтрокаПоиска.РеквизитОбъекта;
						НовоеСоответствие.КоличествоЗначенийРеквизита = 0;
						НовоеСоответствие.КоличествоСопоставленныхРеквизитов = 0;
					КонецЕсли;
				КонецЕсли;
			Иначе
				// Это ссылочный тип доп реквизита
				НовыйРеквизит.ТипЗначения = СтрокаПоиска.РеквизитОбъекта.ТипЗначения;
				Если ОбщегоНазначения.ЭтоСсылка(НовыйРеквизит.ТипЗначения.Типы()[0]) Тогда
					ЭтоДополнительныеЗначенияРеквизита = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ЭтоДополнительныеЗначенияРеквизита И ЭтоДополнительныеЗначенияСервиса Тогда
				НовыйРеквизит.ВозможноСопоставление = Истина;
			КонецЕсли;
			
			СтрокаСоответствий = РасчетСоответствий.Найти(СтрокаПоиска.РеквизитОбъекта, "РеквизитОбъекта");
			Если СтрокаСоответствий <> Неопределено Тогда
				НовыйРеквизит.Сопоставлено = СтрШаблон(НСтр("ru = 'Сопоставлено %1 из %2'"),
					СтрокаСоответствий.КоличествоСопоставленныхРеквизитов,
					СтрокаСоответствий.КоличествоЗначенийРеквизита);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("РеквизитыРубрикатора",    РеквизитыРубрикатора);
	Реквизиты.Вставить("СопоставленныеРеквизиты", СопоставленныеРеквизиты);
	
	ПоместитьВоВременноеХранилище(Реквизиты, АдресРезультата);
	
КонецПроцедуры

// Получение значений реквизитов рубрикатора по значениям в информационной базе.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - параметры для выполнения:
//   * Значения               - Массив из Произвольный - значения реквизитов.
//   * ИдентификаторКатегории - Строка - идентификатор категории рубрикатора 1С:Бизнес-сеть.
//   * ИдентификаторРеквизита - Строка - идентификатор реквизита рубрикатора 1С:Бизнес-сеть.
//  АдресРезультата    - Строка - адрес временного хранилища с результатом.
//
Процедура ПолучитьЗначенияРеквизитаРубрикатора(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Данные",                 ПараметрыПроцедуры.Значения);
	ПараметрыМетода.Вставить("ИдентификаторКатегории", ПараметрыПроцедуры.ИдентификаторКатегории);
	ПараметрыМетода.Вставить("ИдентификаторРеквизита", ПараметрыПроцедуры.ИдентификаторРеквизита);
	ПараметрыКоманды = ПараметрыКомандыСопоставитьЗначенияРеквизитов(ПараметрыМетода, Отказ);
	Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ ИЛИ Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыКомандРубрикатора

Функция ПараметрыКомандыПолучитьСписокКатегорийПервогоУровня() Экспорт

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Сервис = "Рубрикатор";
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Поиск категории рубрикатора'");
	ПараметрыКоманды.Адрес = "api/classifier/v1/categories";
	ПараметрыКоманды.Метод = "GET";
	ПараметрыКоманды.Права = "bn_user";
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Поиск содержит менее 3 символов'"));
	
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПолучитьСписокДочернихКатегорий(ПараметрыМетода, Отказ = Неопределено) Экспорт

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Сервис = "Рубрикатор";
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Чтение списка подчиненных категорий рубрикатора'");
	ПараметрыКоманды.Адрес = СтрШаблон("api/classifier/v1/category/%1/children",
		Формат(ПараметрыМетода.ИдентификаторКатегории, "ЧГ="));
	ПараметрыКоманды.Метод = "GET";
	ПараметрыКоманды.Права = "bn_user";
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Категория не найдена.'"));
	
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПолучитьЦепочкуКатегорийДоКорневой(ПараметрыМетода, Отказ = Неопределено) Экспорт

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Сервис = "Рубрикатор";
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Чтение родительских категорий рубрикатора'");
	ПараметрыКоманды.Адрес  = "api/classifier/v1/category/pathToRoot";
	ПараметрыКоманды.Метод  = "POST";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = ПараметрыМетода.ИдентификаторыКатегории;
		
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПолучитьСписокХарактеристикКатегории(ПараметрыМетода, Отказ = Неопределено) Экспорт

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Сервис = "Рубрикатор";

	ПараметрыКоманды.Наименование = НСтр("ru = 'Чтение списка характеристик категории рубрикатора'");
	ПараметрыКоманды.Адрес = СтрШаблон("api/classifier/v1/category/%1/attributes",
		Формат(ПараметрыМетода.ИдентификаторКатегории, "ЧГ="));
	ПараметрыКоманды.Метод = "GET";
	ПараметрыКоманды.Права = "bn_user";
	ПараметрыКоманды.Ошибки.Вставить(404, Ложь);
	
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПолучитьЗначенияХарактеристики(ПараметрыМетода, Отказ = Неопределено) Экспорт

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Сервис = "Рубрикатор";

	ПараметрыКоманды.Наименование = НСтр("ru = 'Чтение значений характеристики рубрикатора'");
	ПараметрыКоманды.Адрес = СтрШаблон("api/classifier/v1/category/%1/attribute/%2/values",
		Формат(ПараметрыМетода.ИдентификаторКатегории, "ЧГ="),
		Формат(ПараметрыМетода.ИдентификаторХарактеристики, "ЧГ="));
	ПараметрыКоманды.Метод = "GET";
	ПараметрыКоманды.Права = "bn_user";
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Категории или атрибуты не найдены.'"));
	
	РеквизитыМассива = Новый Структура;
	РеквизитыМассива.Вставить("Идентификатор", "id");
	РеквизитыМассива.Вставить("Значение",      "value");
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(РеквизитыМассива);
	
	ПараметрыКоманды.Вставить("ОбработкаРезультата", Реквизиты);
	
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПоискКатегорий(ПараметрыМетода, Отказ = Неопределено) Экспорт

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Сервис = "Рубрикатор";
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Поиск категорий рубрикатора'");
	ПараметрыКоманды.Адрес = СтрШаблон("api/classifier/v1/categories/search?search=%1",
		КодироватьСтроку(ПараметрыМетода.СтрокаПоиска, СпособКодированияСтроки.КодировкаURL));
		
	Если ПараметрыКоманды.Свойство("ТолькоЭлементы") И ПараметрыМетода.ТолькоЭлементы Тогда
		ПараметрыКоманды.Адрес = ПараметрыМетода.Адрес + СтрШаблон("&onlyLeaves=%1",
			Формат(ПараметрыКоманды.ДополнительныеПараметры, "БЛ=false; БИ=true"));
	КонецЕсли;

	ПараметрыКоманды.Метод = "GET";
	ПараметрыКоманды.Права = "bn_user";
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Поиск содержит менее 3 символов'"));
	
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыСопоставитьЗначенияРеквизитов(ПараметрыМетода, Отказ = Неопределено)

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Сервис = "Рубрикатор";
	
	// Формирование пакета для запроса.
	ОбъектПоискаЗначений = ФабрикаXDTO.Создать(ТипXDTO("AttributeValueSearch"));
	
	Для каждого ЗначениеДляСопоставления Из ПараметрыМетода.Данные Цикл
		ОбъектЗначения = ФабрикаXDTO.Создать(ТипXDTO("AttributeValue"));
		ОбъектЗначения.categoryId  = ПараметрыМетода.ИдентификаторКатегории;
		ОбъектЗначения.attributeId = ПараметрыМетода.ИдентификаторРеквизита;
		ОбъектЗначения.value       = Строка(ЗначениеДляСопоставления);
		ОбъектПоискаЗначений.AttributeValues.Добавить(ОбъектЗначения);
	КонецЦикла;
	
	Данные = ОбъектXDTOВСтрокуJSON(ОбъектПоискаЗначений, -1);
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Сопоставление значений реквизитов рубрикатора'");
	ПараметрыКоманды.Адрес  = "api/classifier/v1/findAttributeValueIdsByValues";
	ПараметрыКоманды.Метод  = "POST";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = Данные;
		
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПолучитьСписокВсехКатегорий() Экспорт

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Сервис = "Рубрикатор";
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Чтение всех категорий рубрикатора'");
	ПараметрыКоманды.Адрес = "api/classifier/v1/categories/all?onlyId=false";
	ПараметрыКоманды.Метод = "GET";
	ПараметрыКоманды.Права = "bn_user";

	Возврат ПараметрыКоманды;

КонецФункции

#КонецОбласти

#Область ПреобразованиеДанных

// Получение значение JSON простого типа (строка, число, дата, булево).
//
// Параметры:
//  Значение - Произвольный - значение преобразования.
// 
// Возвращаемое значение:
//  Строка, Число, Дата, Булево - преобразованное значение.
//
Функция ЗначениеJSON(Знач Значение)
	
	Если ТипЗнч(Значение) = Тип("Дата") Тогда
		Значение = Формат(Значение, "ДФ=yyyy-MM-dd; ДП=null");
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") И Значение = 0 Тогда
		Значение = Строка(Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Чтение значения объекта XTDO в запись JSON.
//
// Параметры:
//  ОбъектXDTO	 - Произвольный - элемент XDTO.
//  ЗаписьJSON	 - ЗаписьJSON - запись JSON.
//  Уровень		 - Число - уровень вложенности.
//
Процедура ПрочитатьОбъектXDTOВЗаписьJSON(Знач ОбъектXDTO, ЗаписьJSON, Знач Уровень = 0)
	
	Если ТипЗнч(ОбъектXDTO) = Тип("СписокXDTO") Тогда
		Если ОбъектXDTO.Количество() Тогда
			Если Уровень > 0 Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(ОбъектXDTO.ВладеющееСвойство.Имя);
			КонецЕсли;
			ЗаписьJSON.ЗаписатьНачалоМассива();
			Для каждого ЭлементСпискаXDTO Из ОбъектXDTO Цикл
				ПрочитатьОбъектXDTOВЗаписьJSON(ЭлементСпискаXDTO, ЗаписьJSON, Уровень);
			КонецЦикла;
			ЗаписьJSON.ЗаписатьКонецМассива();
		Иначе
			ЗаписьJSON.ЗаписатьНачалоМассива();
			ЗаписьJSON.ЗаписатьКонецМассива();
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
		Если Уровень > 0 Или ОбъектXDTO.Свойства().Количество() > 1 Тогда
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
		КонецЕсли;
		Для каждого СвойствоXDTO Из ОбъектXDTO.Свойства() Цикл
			Если ТипЗнч(ОбъектXDTO[СвойствоXDTO.Имя]) = Тип("СписокXDTO") Тогда
				Если СвойствоXDTO.НижняяГраница > 0 
					ИЛИ ОбъектXDTO[СвойствоXDTO.Имя].Количество() <> 0 
					ИЛИ Уровень = -1 Тогда
					ПрочитатьОбъектXDTOВЗаписьJSON(ОбъектXDTO.ПолучитьСписок(СвойствоXDTO.Имя), ЗаписьJSON, Уровень + 1);
				КонецЕсли;
			ИначеЕсли ТипЗнч(ОбъектXDTO[СвойствоXDTO.Имя]) = Тип("ОбъектXDTO") Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(СвойствоXDTO.Имя);
				ПрочитатьОбъектXDTOВЗаписьJSON(ОбъектXDTO.Получить(СвойствоXDTO.Имя), ЗаписьJSON, Уровень + 1);
			Иначе	
				ЗначениеСвойства = ЗначениеJSON(ОбъектXDTO.Получить(СвойствоXDTO.Имя));
				Если НЕ ЗначениеЗаполнено(ЗначениеСвойства) И СвойствоXDTO.НижняяГраница = 0 Тогда
					Продолжить;
				КонецЕсли;
				ЗаписьJSON.ЗаписатьИмяСвойства(СвойствоXDTO.Имя);	
				ЗаписьJSON.ЗаписатьЗначение(ЗначениеСвойства);
			КонецЕсли;
		КонецЦикла;
		Если Уровень > 0 Или ОбъектXDTO.Свойства().Количество() > 1 Тогда
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОбъектXDTO) <> Неопределено Тогда
		ЗаписьJSON.ЗаписатьЗначение(ЗначениеJSON(ОбъектXDTO));
	КонецЕсли;
	
КонецПроцедуры

// Приведение массива структур в таблицу значений.
//
// Параметры:
//  Источник      - Массив из Структура - коллекция структур данных, первый элемент определяют состав колонок и типов.
//  СоставКолонок - Структура - коллекция возвращаемых колонок таблицы, ключ описывает имя колонки до преобразования,
//                              значение описывает новое имя колонки.
//  Отбор         - Структура - отбор данных для преобразования по ключу и значению.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - преобразованные данные.
//
Функция МассивСтруктурВТаблицуЗначений(Источник, СоставКолонок, Отбор)
	
	Если Не ЗначениеЗаполнено(Источник) ИЛИ ТипЗнч(Источник) <> Тип("Массив")
		ИЛИ Источник.Количество() = 0 ИЛИ ТипЗнч(Источник[0]) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Инициализация таблицы значений.
	Таблица = Новый ТаблицаЗначений;
	Для каждого ЭлементКоллекции Из Источник[0] Цикл
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(ЭлементКоллекции.Значение));
		Таблица.Колонки.Добавить(ЭлементКоллекции.Ключ, Новый ОписаниеТипов(МассивТипов), ЭлементКоллекции.Ключ);
	КонецЦикла;
	
	// Заполнение таблицы.
	Для каждого ЭлементКоллекции Из Источник Цикл
		Пропустить = Ложь;
		Для каждого ЭлементОтбора Из Отбор Цикл
			Если ЭлементКоллекции[ЭлементОтбора.Ключ] <> ЭлементОтбора.Значение Тогда
				Пропустить = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Пропустить Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), ЭлементКоллекции);
	КонецЦикла;
	
	// Переименование колонок.
	Для каждого ЭлементКоллекции Из Источник[0] Цикл
		ИмяКолонки = ЭлементКоллекции.Ключ;
		Если СоставКолонок.Свойство(ИмяКолонки) Тогда
			Таблица.Колонки[ИмяКолонки].Имя = СоставКолонок[ИмяКолонки]; // Переименование колонки
		Иначе
			Таблица.Колонки.Удалить(Таблица.Колонки[ИмяКолонки]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

// Преобразование объекта XDTO в формат JSON.
//
// Параметры:
//  ОбъектXDTO	 - ОбъектXDTO - объект данных модели XDTO.
//  Уровень		 - Число - уровень вложенности.
// 
// Возвращаемое значение:
//  Строка - строка значения в формате JSON.
//
Функция ОбъектXDTOВСтрокуJSON(Знач ОбъектXDTO, Знач Уровень = 0)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ЗаписьJSON.УстановитьСтроку();
	
	ПрочитатьОбъектXDTOВЗаписьJSON(ОбъектXDTO, ЗаписьJSON, Уровень);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

#КонецОбласти

#Область ОбменДанными

// Тип XDTO.
//
// Параметры:
//  ИмяТипа	 - Строка - пространство имен.
// 
// Возвращаемое значение:
//  ТипЗначенияXDTO - тип XDTO по пространству имен.
//
Функция ТипXDTO(ИмяТипа)
	
	Возврат ФабрикаXDTO.Тип("http://1cbn.ru/offers/XMLSchema", ИмяТипа)
	
КонецФункции

// Выгрузка штрихкодов для получения подсказок сервиса 1С:Бизнес-сеть.
//
Процедура ОбновитьПодсказкиТорговыеПредложения()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть")
		Или Не ТорговыеПредложенияСлужебный.ИспользоватьФункционалПубликации() Тогда
		Возврат;
	КонецЕсли;
	
	// Выбрать подключенные организации к Бизнес-сети.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОрганизацииБизнесСеть.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть";
	
	Организации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	// Сформировать таблицу штрихкодов в переопределяемом модуле.
	Штрихкоды = Новый ТаблицаЗначений;
	Штрихкоды.Колонки.Добавить("Организация");
	Штрихкоды.Колонки.Добавить("Штрихкод");
	Штрихкоды.Колонки.Добавить("Наименование");
	Штрихкоды.Колонки.Добавить("РежимПоставщика");
	Штрихкоды.Колонки.Добавить("РежимПокупателя");
	
	УстановитьПривилегированныйРежим(Истина);
	РежимПоставщика = Константы.ПоказыватьПодсказкиПоставщиковБизнесСеть.Получить();
	РежимПокупателя = Константы.ПоказыватьПодсказкиПокупателейБизнесСеть.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТорговыеПредложенияПереопределяемый.ЗаполнитьШтрихкодыДляВыгрузки(Организации, Истина, Истина, Штрихкоды);
	
	Если Штрихкоды.Количество() = 0 ИЛИ (РежимПоставщика = Ложь И РежимПокупателя = Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	// Выгрузка данных производится отдельно для каждой организации.
	Для каждого Организация Из Организации Цикл
		
		Отказ = Ложь;
		
		// Подготовить данные для запроса.
		ШтрихкодыXDTO = ФабрикаXDTO.Создать(ТипXDTO("ProductBarcodeList"));
		ШтрихкодыОрганизация = Штрихкоды.НайтиСтроки(Новый Структура("Организация", Организация));
		
		ТолькоПоставляется = 1;
		ТолькоЗакупается = 2;
		ПоставляетсяИЗакупается = 3;
		
		Для каждого СтрокаШтрихкода Из ШтрихкодыОрганизация Цикл
			
			СтрокаШтрихкодаXDTO = ФабрикаXDTO.Создать(ТипXDTO("ProductBarcode"));
			СтрокаШтрихкодаXDTO.barcode = СтрокаШтрихкода.Штрихкод;
			СтрокаШтрихкодаXDTO.productName = СтрокаШтрихкода.Наименование;
			Если СтрокаШтрихкода.РежимПоставщика И СтрокаШтрихкода.РежимПокупателя Тогда
				Если РежимПоставщика И РежимПокупателя = Ложь Тогда
					СтрокаШтрихкодаXDTO.type = ТолькоПоставляется;
				ИначеЕсли РежимПоставщика И РежимПокупателя = Истина Тогда
					СтрокаШтрихкодаXDTO.type = ТолькоЗакупается;
				Иначе
					СтрокаШтрихкодаXDTO.type = ПоставляетсяИЗакупается;
				КонецЕсли; 
			ИначеЕсли РежимПоставщика И СтрокаШтрихкода.РежимПоставщика
				И Не СтрокаШтрихкода.РежимПокупателя Тогда
				СтрокаШтрихкодаXDTO.type = ТолькоПоставляется;
			ИначеЕсли РежимПокупателя И Не СтрокаШтрихкода.РежимПоставщика И СтрокаШтрихкода.РежимПокупателя Тогда
				СтрокаШтрихкодаXDTO.type = ТолькоЗакупается;
			Иначе
				Продолжить;
			КонецЕсли;
			
			ШтрихкодыXDTO.ProductBarcodes.Добавить(СтрокаШтрихкодаXDTO);
			
		КонецЦикла;
		
		Данные = ОбъектXDTOВСтрокуJSON(ШтрихкодыXDTO, -1);
		ПараметрыМетода = Новый Структура("Организация, Данные", Организация, Данные);
		ПараметрыКоманды = ПараметрыКомандыВыгрузкаШтрихкодовДляПодсказок(ПараметрыМетода, Отказ);
		Если Отказ Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка обновления подсказок торговых предложений'");
		КонецЕсли;

		БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		Если Отказ Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка обновления подсказок торговых предложений'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Массив товаров для поиска.
//
// Параметры:
//  ПараметрыПоиска - Структура - параметры поиска, см. ОписаниеНастроекПоискаПоТоварам.
// 
// Возвращаемое значение:
//  Массив из ОбъектXDTO - массив объектов XDTO для поиска.
//
Функция ТоварыДляПоискаПоСпискуXDTO(ПараметрыПоиска)
	
	МассивДанных = Новый Массив;
	
	Для каждого СтрокаТовары Из ПараметрыПоиска.Товары Цикл
		
		Если Не (ПараметрыПоиска.ПоискПоНаименованию И ЗначениеЗаполнено(СтрокаТовары.Наименование))
			И Не (ПараметрыПоиска.ПоискПоХарактеристике И ЗначениеЗаполнено(СтрокаТовары.Характеристика))
			И Не (ПараметрыПоиска.ПоискПоАртикулу И ЗначениеЗаполнено(СтрокаТовары.Артикул))
			И Не (ПараметрыПоиска.ПоискПоШтрихКоду И ТипЗнч(СтрокаТовары.ШтрихКоды) = Тип("Массив") И СтрокаТовары.ШтрихКоды.Количество()) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементПоиска = ФабрикаXDTO.Создать(ТипXDTO("ListSearch"));
		ЭлементПоиска.index = ПараметрыПоиска.Товары.Индекс(СтрокаТовары);
		
		Если ПараметрыПоиска.ПоискПоНаименованию И ЗначениеЗаполнено(СтрокаТовары.Наименование) Тогда
			ЭлементПоиска.Установить("productName", СтрокаТовары.Наименование);
		КонецЕсли;
		
		Если ПараметрыПоиска.ПоискПоХарактеристике И ЗначениеЗаполнено(СтрокаТовары.Характеристика) Тогда
			ЭлементПоиска.Установить("productFeature", Строка(СтрокаТовары.Характеристика));
		КонецЕсли;
		
		Если ПараметрыПоиска.ПоискПоАртикулу И ЗначениеЗаполнено(СтрокаТовары.Артикул) Тогда
			ЭлементПоиска.Установить("vendorCode", СтрокаТовары.Артикул);
		КонецЕсли;
		
		Если ПараметрыПоиска.ПоискПоШтрихКоду И ТипЗнч(СтрокаТовары.ШтрихКоды) = Тип("Массив") И СтрокаТовары.ШтрихКоды.Количество() Тогда
			Для каждого ЗначениеМассива Из СтрокаТовары.ШтрихКоды Цикл
				ЭлементПоиска.barcodes.Добавить(ЗначениеМассива);
			КонецЦикла;
		КонецЕсли;
		
		ОбъектЕдиницаИзмерения = ФабрикаXDTO.Создать(ТипXDTO("UnitFilter"));
		Если ЗначениеЗаполнено(СтрокаТовары.ЕдиницаИзмеренияКод) Тогда
			ОбъектЕдиницаИзмерения.basicUnit = СокрЛП(СтрокаТовары.ЕдиницаИзмеренияКод);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТовары.УпаковкаКод) Тогда
			ОбъектЕдиницаИзмерения.basicUnit = СокрЛП(СтрокаТовары.УпаковкаКод);
		Иначе
			ОбъектЕдиницаИзмерения.basicUnit = "NULL";
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТовары.УпаковкаЧислитель) Тогда
			ОбъектЕдиницаИзмерения.basicUnitCount = СтрокаТовары.УпаковкаЧислитель;
		Иначе
			ОбъектЕдиницаИзмерения.basicUnitCount = 1;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТовары.УпаковкаЗнаменатель) Тогда
			ОбъектЕдиницаИзмерения.unitCount = СтрокаТовары.УпаковкаЗнаменатель;
		Иначе
			ОбъектЕдиницаИзмерения.unitCount = 1;
		КонецЕсли;
		ЭлементПоиска.units.Добавить(ОбъектЕдиницаИзмерения);
		ЭлементПоиска.buyingCount = СтрокаТовары.Количество * Макс(1, СтрокаТовары.УпаковкаЗнаменатель);
		
		МассивДанных.Добавить(ЭлементПоиска);
		
	КонецЦикла;
	
	Возврат МассивДанных;
		
КонецФункции

#КонецОбласти

#Область КонтактнаяИнформация

// Описание адресов абонента.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица для заполнения адресов:
//    * Представление - Строка - представление адреса.
//    * ЗначенияПолей - Строка - адрес в формате XML.
//    * Описание - Строка - комментарий адреса.
//    * Ссылка - Ссылка - объект хранения контактной информации.
//    * Вид - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации.
//
Функция НовыйАдресАбонента() Экспорт
	
	АдресаАбонента = Новый ТаблицаЗначений;
	АдресаАбонента.Колонки.Добавить("Представление");
	АдресаАбонента.Колонки.Добавить("ЗначенияПолей");
	АдресаАбонента.Колонки.Добавить("Описание");
	АдресаАбонента.Колонки.Добавить("Ссылка");
	АдресаАбонента.Колонки.Добавить("Вид");
	
	Возврат АдресаАбонента;
	
КонецФункции

// Получить адреса самовывоза организации
//
// Параметры:
//  ИдентификаторОрганизации - Строка - идентификатор в формате ИНН/КПП.
// 
// Возвращаемое значение:
//  СписокЗначений - список адресов организации, значение - адрес в XML, представление - строка адреса.
//
Функция ПолучитьАдресаСамовывозаОрганизации(ПараметрыМетода, Отказ) Экспорт
	
	ПараметрыКоманды = ПараметрыКомандыПолучитьАдресаСамовывоза(ПараметрыМетода, Отказ);
	Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокАдресов = Новый СписокЗначений;
	Для каждого СтрокаРезультата Из Результат Цикл
		Если ТипЗнч(СтрокаРезультата) <> Тип("Структура")
			ИЛИ СтрокаРезультата.Свойство("addressInfo1") = Ложь Тогда
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
		СписокАдресов.Добавить(СтрокаРезультата.addressInfo2, СтрокаРезультата.addressInfo1);
	КонецЦикла;

	Возврат СписокАдресов;
	
КонецФункции

// Получить адресные настройки абонента.
//
// Параметры:
//  Отказ - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Массив - адреса абонента.
//
Функция ПолучитьАдресныеНастройкиАбонента(Отказ) Экспорт
	
	ПараметрыКоманды = ПараметрыКомандыПолучитьАдресныеНастройкиАбонента();
	Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Возврат Результат;

КонецФункции

// Получить адреса профиля абонента.
//
// Параметры:
//  Отказ - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Структура - адреса абонента:
//    * РегионыПродажи - ТаблицаЗначений - регионы продаж абонента.
//    * РегионыЗакупки - ТаблицаЗначений - регионы закупок абонента.
//    * АдресаПродажи  - ТаблицаЗначений - адреса магазинов абонента.
//    * АдресаЗакупки  - ТаблицаЗначений - адреса складов абонента.
//
Функция ПолучитьАдресаПрофиляАбонента(Отказ) Экспорт
	
	Данные = ПолучитьАдресныеНастройкиАбонента(Отказ);
	Если Данные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СоставКолонок = Новый Структура;
	СоставКолонок.Вставить("address",      "АдресСтруктурой");
	СоставКолонок.Вставить("addressInfo1", "Представление");
	СоставКолонок.Вставить("addressInfo2", "ЗначенияПолей");
	
	Отбор = Новый Структура;
	Отбор.Вставить("addressType", 1);
	Отбор.Вставить("shipment",    Истина);
	Отбор.Вставить("active",      Истина);
	РегионыПродажи = МассивСтруктурВТаблицуЗначений(Данные, СоставКолонок, Отбор);
	
	Отбор = Новый Структура;
	Отбор.Вставить("addressType", 1);
	Отбор.Вставить("entrance",    Истина);
	Отбор.Вставить("active",      Истина);
	РегионыЗакупки = МассивСтруктурВТаблицуЗначений(Данные, СоставКолонок, Отбор);
	
	Отбор = Новый Структура;
	Отбор.Вставить("addressType", 2);
	Отбор.Вставить("shipment",    Истина);
	Отбор.Вставить("active",      Истина);
	АдресаПродажи = МассивСтруктурВТаблицуЗначений(Данные, СоставКолонок, Отбор);
	
	Отбор = Новый Структура;
	Отбор.Вставить("addressType", 2);
	Отбор.Вставить("entrance",    Истина);
	Отбор.Вставить("active",      Истина);
	АдресаЗакупки = МассивСтруктурВТаблицуЗначений(Данные, СоставКолонок, Отбор);
	
	Результат = Новый Структура;
	Результат.Вставить("РегионыПродажи", РегионыПродажи);
	Результат.Вставить("АдресаПродажи",  АдресаПродажи);
	Результат.Вставить("РегионыЗакупки", РегионыЗакупки);
	Результат.Вставить("АдресаЗакупки",  АдресаЗакупки);
	
	Возврат Результат;
	
КонецФункции

// Синхронизация адресных настроек абонента.
//
// Параметры:
//  РегионаАдреса - ТаблицаЗначений - регионы и адреса абонента.
//   * Представление - Строка - представление адреса.
//   * ЗначенияПолей - Строка - контактная информация XML.
//   * ЭтоРегион - Булево - признак региона.
//   * ЭтоПродажи - Булево - признак продажи.
//   * ЭтоЗакупки - Булево - признак закупки.
//  Отказ - Булево - признак ошибки выполнения.
// 
Процедура СинхронизироватьАдресныеНастройкиАбонента(РегионыАдреса, Отказ) Экспорт
	
	РегионыАбонентаXDTO = ФабрикаXDTO.Создать(ТипXDTO("RegionsSubscriber"));
	
	Попытка
		
		Для каждого СтрокаТаблицы Из РегионыАдреса Цикл
			Если ПустаяСтрока(СтрокаТаблицы.Представление) Тогда
				Продолжить;
			КонецЕсли;
			АдресаРегионыXDTO = ФабрикаXDTO.Создать(ТипXDTO("CampaignAddress"));
			АдресаРегионыXDTO.address = ПоляXDTOРегионаКонтактнойИнформацииСервиса(СтрокаТаблицы.ЗначенияПолей);
			
			Если АдресаРегионыXDTO.address.country <> "643" Тогда // Россия
				АдресаРегионыXDTO.addressType = 0;
			Иначе
				АдресаРегионыXDTO.addressType  = ?(СтрокаТаблицы.ЭтоРегион, 1, 2);
			КонецЕсли;
			
			АдресаРегионыXDTO.addressInfo1 = СтрокаТаблицы.Представление;
			АдресаРегионыXDTO.addressInfo2 = СтрокаТаблицы.ЗначенияПолей;
			АдресаРегионыXDTO.shipment     = СтрокаТаблицы.ЭтоПродажи;
			АдресаРегионыXDTO.entrance     = СтрокаТаблицы.ЭтоЗакупки;
			АдресаРегионыXDTO.active       = СтрокаТаблицы.Активный;
			РегионыАбонентаXDTO.CampaignAddress.Добавить(АдресаРегионыXDTO);
		КонецЦикла;
		
		РегионыАбонентаXDTO.Проверить();
		
	Исключение
		
		Отказ = Истина;
		Операция = НСтр("ru = 'Синхронизация адресных настроек абонента.'");
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения, "БизнесСеть");
		Возврат;
		
	КонецПопытки;
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Данные", ОбъектXDTOВСтрокуJSON(РегионыАбонентаXDTO, -1));
	ПараметрыКоманды = ПараметрыКомандыСинхронизироватьАдресныеНастройкиАбонента(ПараметрыМетода, Отказ);
	БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
КонецПроцедуры

// Представление последнего региона в адресе.
//
// Параметры:
//  Адрес - Строка - адрес во внутреннем формате JSON, XML.
//  Отказ - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Строка - значение последнего заполненного уровня региона.
//
Функция ПредставлениеПоследнегоРегионаАдреса(Адрес, Ошибка) Экспорт
	
	Сведения = РаботаСАдресами.СведенияОбАдресе(Адрес);
	Если Не ЗначениеЗаполнено(Сведения) Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	Если Сведения.Свойство("НаселенныйПункт") И ЗначениеЗаполнено(Сведения.НаселенныйПункт) Тогда
		Результат = Сведения.НаселенныйПункт + " " + Сведения.НаселенныйПунктСокращение;
	ИначеЕсли Сведения.Свойство("Город") И ЗначениеЗаполнено(Сведения.Город) Тогда
		Результат =  Сведения.Город + " " + Сведения.ГородСокращение;
	ИначеЕсли Сведения.Свойство("Район") И ЗначениеЗаполнено(Сведения.Район) Тогда
		Результат =  Сведения.Район + " " + Сведения.РегионСокращение;
	ИначеЕсли Сведения.Свойство("Регион") И ЗначениеЗаполнено(Сведения.Регион) Тогда
		Результат =  Сведения.Регион + " " + Сведения.РегионСокращение;
	ИначеЕсли Сведения.Свойство("Страна") И ЗначениеЗаполнено(Сведения.Страна) Тогда
		Результат =  Сведения.Страна;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Идентификатор последнего региона в адресе.
//
// Параметры:
//  Адрес - Строка - адрес во внутреннем формате JSON, XML.
//  Отказ - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Строка - значение последнего заполненного уровня региона.
//
Функция ИдентификаторПоследнегоРегионаАдреса(Адрес, КодСтраны)
	
	Сведения = РаботаСАдресами.СведенияОбАдресе(Адрес, Новый Структура("КодыАдреса", Истина));
	Если Не ЗначениеЗаполнено(Сведения) ИЛИ НЕ ЗначениеЗаполнено(Сведения.Идентификаторы) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сведения.КодСтраны) Тогда
		КодСтраны = Сведения.КодСтраны;
	Иначе
		КодСтраны = "643"; // Россия
	КонецЕсли;
	
	Идентификаторы = Сведения.Идентификаторы;
	
	Результат = "";
	Если Идентификаторы.Свойство("НаселенныйПункт") И ЗначениеЗаполнено(Идентификаторы.НаселенныйПункт) Тогда
		Результат =  Идентификаторы.НаселенныйПункт;
	ИначеЕсли Идентификаторы.Свойство("Город") И ЗначениеЗаполнено(Идентификаторы.Город) Тогда
		Результат =  Идентификаторы.Город;
	ИначеЕсли Идентификаторы.Свойство("Район") И ЗначениеЗаполнено(Идентификаторы.Район) Тогда
		Результат =  Идентификаторы.Район;
	ИначеЕсли Идентификаторы.Свойство("Регион") И ЗначениеЗаполнено(Идентификаторы.Регион) Тогда
		Результат =  Идентификаторы.Регион;
	КонецЕсли;
	
	Возврат Строка(Результат);

КонецФункции

// Получить регионы контактной информации
//
// Параметры:
//  ЗначенияПолей - Строка - контактная информация в XML.
//  Представление - Строка - представление адреса.
//
Процедура ПолучитьРегионыКонтактнойИнформации(ЗначенияПолей, Представление) Экспорт
	
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ЗначенияПолей);
	
	Если ВРег(СведенияОбАдресе.ТипАдреса) = ВРег("ВСвободнойФорме") Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОбАдресе.МуниципальноеПредставление = "";
	СведенияОбАдресе.Представление = "";
	СведенияОбАдресе.Индекс = "";
	СведенияОбАдресе.Улица = "";
	СведенияОбАдресе.Здание = Новый Структура("ТипЗдания, Номер");
	СведенияОбАдресе.Корпуса.Очистить();
	СведенияОбАдресе.Помещения.Очистить();
	
	ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
		РаботаСАдресами.ПоляАдресаВJSON(СведенияОбАдресе),, Перечисления.ТипыКонтактнойИнформации.Адрес);

	Представление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ЗначенияПолей,
		Новый Структура("ВключатьСтрануВПредставление, ФорматАдреса", Истина, "ФИАС"));
	Если ПустаяСтрока(Представление) Тогда
		Представление = СведенияОбАдресе.Страна;
	КонецЕсли;

КонецПроцедуры

// Инициализация вида контактной информации для ввода адреса.
//
// Возвращаемое значение:
//  Структура - свойства для ввода адреса:
//    * Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - значения типа адрес.
//    * ВключатьСтрануВПредставление - Булево - признак включения страны в представление.
//
Функция ВидКонтактнойИнформацииАдреса() Экспорт
	
	ВидКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации();
	
	ВидКонтактнойИнформации.Вставить("Тип", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	ВидКонтактнойИнформации.Вставить("ВключатьСтрануВПредставление", Истина);
	
	Возврат ВидКонтактнойИнформации;
	
КонецФункции

// Получение сведения регионов из профиля абонента
//
// Параметры:
//  Представление			 - Строка - представление региона.
//  ИдентификаторыРегионов	 - Строка - идентификатор адресного классификатора.
//  Отказ					 - Булево - результат метода.
//
Процедура ПолучитьСведенияРегионовПрофиляАбонента(Представление, ИдентификаторыРегионов, Отказ)
	
	// Получение адресов из профиля абонента.
	АдресаРегионовПрофиля = ПолучитьАдресаПрофиляАбонента(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыРегионов.Очистить();
	
	Представление = "";
	Если АдресаРегионовПрофиля <> Неопределено И ТипЗнч(АдресаРегионовПрофиля) = Тип("Структура")
		И АдресаРегионовПрофиля.Свойство("РегионыЗакупки")
		И ТипЗнч(АдресаРегионовПрофиля.РегионыЗакупки) = Тип("ТаблицаЗначений") Тогда
		
		// Поиск идентификаторов регионов закупки.
		Для каждого Адрес Из АдресаРегионовПрофиля.РегионыЗакупки Цикл
			КодСтраны = "";
			Идентификатор = ИдентификаторПоследнегоРегионаАдреса(Адрес.ЗначенияПолей, КодСтраны);
			Если ЗначениеЗаполнено(Идентификатор) Тогда
				НоваяСтрока = ИдентификаторыРегионов.Добавить();
				НоваяСтрока.Идентификатор = Идентификатор;
				НоваяСтрока.КодСтраны = КодСтраны;
				НоваяСтрока.ДляСамовывоза = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Поиск идентификаторов адресов закупки.
		Для каждого Адрес Из АдресаРегионовПрофиля.АдресаЗакупки Цикл
			КодСтраны = "";
			Идентификатор = ИдентификаторПоследнегоРегионаАдреса(Адрес.ЗначенияПолей, КодСтраны);
			Если ЗначениеЗаполнено(Идентификатор) Тогда
				НоваяСтрока = ИдентификаторыРегионов.Добавить();
				НоваяСтрока.Идентификатор = Идентификатор;
				НоваяСтрока.КодСтраны = КодСтраны;
				НоваяСтрока.ДляДоставки = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Представление адреса.
		КоличествоАдресов = ИдентификаторыРегионов.Количество();
		Если КоличествоАдресов = 1 Тогда
			АдресПоИдентификатору = РаботаСАдресами.АдресПоИдентификатору(ИдентификаторыРегионов[0].Идентификатор);
			Представление = РаботаСАдресами.СведенияОбАдресе(АдресПоИдентификатору).Представление;
		ИначеЕсли КоличествоАдресов > 1 Тогда
			Представление = Строка(КоличествоАдресов);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновление сведений о регионе поиска.
//
// Параметры:
//  РегионПоиска			 - Структура - описание региона поиска вызываемой формы:
//    * РежимОтбора - Число - режим региона поиска формы (0 - без отбора, 1 - из профиля, 2 - введенный адрес).
//    * ЗначенияПолей - Строка - служебное значение адреса в JSON или XML.
//  РегионЗаголовок			 - Строка - возвращаемое значение представления.
//  ИдентификаторыРегионов	 - ТаблицаЗначений - возвращаемые значения идентификаторов регионов, колонки:
//    * Идентификатор - Строка - значение идентификатора региона.
//    * КодСтраны     - Строка - код страны региона.
//    * ДляСамовывоза - Булево - применять отбор для самовывоза.
//    * ДляДоставки   - Булево - применять отбор для доставки.
//
Процедура ОбновитьСведенияРегионаПоиска(Знач РегионПоиска, РегионЗаголовок, ИдентификаторыРегионов = Ложь) Экспорт
	
	Если РегионПоиска.РежимОтбора = 0 Тогда
		
		РегионЗаголовок = НСтр("ru = 'Без отбора по регионам'");
		
	ИначеЕсли РегионПоиска.РежимОтбора = 1 Тогда
		
		Отказ = Ложь;
		Детализация = "";
		ПолучитьСведенияРегионовПрофиляАбонента(Детализация, ИдентификаторыРегионов, Отказ);
		Если Отказ Тогда
			РегионЗаголовок = НСтр("ru = '<Ошибка данных профиля>'");
		ИначеЕсли ПустаяСтрока(Детализация) Тогда
			РегионЗаголовок = НСтр("ru = 'Регионы профиля (не выбраны)'");
		Иначе
			РегионЗаголовок = СтрШаблон(НСтр("ru = 'Регионы профиля (%1)'"), Детализация);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(РегионПоиска.ЗначенияПолей) Тогда
		
		Отказ = Ложь;
		РегионЗаголовок = ПредставлениеПоследнегоРегионаАдреса(РегионПоиска.ЗначенияПолей, Отказ);
		
		КодСтраны = "";
		ИдентификаторыРегионов.Очистить();
		Идентификатор = ИдентификаторПоследнегоРегионаАдреса(РегионПоиска.ЗначенияПолей, КодСтраны);
		Если ЗначениеЗаполнено(Идентификатор) Или ЗначениеЗаполнено(КодСтраны) Тогда
			НоваяСтрока = ИдентификаторыРегионов.Добавить();
			НоваяСтрока.Идентификатор = Идентификатор;
			НоваяСтрока.КодСтраны = КодСтраны;
			НоваяСтрока.ДляСамовывоза = Истина;
			НоваяСтрока.ДляДоставки = Истина;
		КонецЕсли;
		
		Если Отказ Тогда
			РегионЗаголовок = НСтр("ru = 'Без отбора по регионам'");
		КонецЕсли;
		
	Иначе
		
		РегионЗаголовок = НСтр("ru = 'Без отбора по регионам'");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

// Выполняет регламентное задание по выгрузки штрихкодов для подсказок.
//
Процедура ОбновитьПодсказкиТорговыеПредложенияОбработчикЗадания() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеПодсказокТорговыеПредложения);
		
	УстановитьПривилегированныйРежим(Истина);
	ПодсказкиДоступны = Константы.ПоказыватьПодсказкиПокупателейБизнесСеть.Получить()
		Или Константы.ПоказыватьПодсказкиПоставщиковБизнесСеть.Получить();
	УстановитьПривилегированныйРежим(Ложь);
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") И ПодсказкиДоступны Тогда
		ОбновлениеПодсказокТорговыхПредложений();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Настройки

// Сохраненные настройки поиска по товарам.
// 
// Возвращаемое значение:
//  Структура - сохраненные настройки поиска по товарам, см. ОписаниеНастроекПоискаПоТоварам.
//
Функция СохраненныеНастройкиПоискаПоТоварам() Экспорт
	
	// Заполнение структуры настроек по умолчанию.
	Результат = ОписаниеНастроекПоискаПоТоварам();
	
	// Чтение сохраненных данных.
	СохраненныеНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТорговыеПредложения.ПоискПоТоварам",
		"НастройкиПоискаПоТоварам");
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Результат, СохраненныеНастройки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сохранение настроек поиска по товарам.
//
// Параметры:
//  СохраняемыеНастройки - Структура - сохраняемые данные, см. ОписаниеНастроекПоискаПоТоварам.
//
Процедура СохранитьНастройкиПоискаПоТоварам(СохраняемыеНастройки) Экспорт
	
	Настройки = ОписаниеНастроекПоискаПоТоварам();
	
	Если ТипЗнч(СохраняемыеНастройки) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Настройки, СохраняемыеНастройки);
	КонецЕсли;

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТорговыеПредложения.ПоискПоТоварам",
		"НастройкиПоискаПоТоварам", Настройки);
		
КонецПроцедуры

// Сохраненные настройки региона поиска
// 
// Возвращаемое значение:
//  Структура - сохраненные настройки региона поиска, см. ОписаниеРегионаПоиска.
//
Функция СохраненныеНастройкиРегионаПоиска() Экспорт
	
	РегионПоиска = ОписаниеРегионаПоиска();
	
	// Заполнение структуры настроек по умолчанию.
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТорговыеПредложения.РегионПоиска",
		"СохраненныеНастройки");
	
	Если СохраненноеЗначение <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(РегионПоиска, СохраненноеЗначение);
	КонецЕсли;
	
	Возврат РегионПоиска;
	
КонецФункции

// Сохранение настроек региона поиска.
//
// Параметры:
//  СохраняемыеНастройки - Структура - сохраняемые настройки поиска, см. ОписаниеРегионаПоиска.
//
Процедура СохранитьНастройкиРегионаПоиска(СохраняемыеНастройки) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТорговыеПредложения.РегионПоиска",
		"СохраненныеНастройки", СохраняемыеНастройки);
		
КонецПроцедуры

#КонецОбласти

#Область Права

// Проверяет возможность поиска торговых предложений в сервисе 1С:Бизнес-сеть для текущего пользователя.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости вывода сообщения о недостаточности прав.
// 
// Возвращаемое значение:
//  Булево - наличие права на выполнение обмена.
//
Функция ПравоПоискаТорговыхПредложений(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = ПравоДоступа("Просмотр", Метаданные.ОбщиеКоманды.ТорговыеПредложенияБизнесСеть);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронноеВзаимодействиеСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Добавление элементов управления для формы торговые предложения.
//
// Параметры:
//  Форма			 - УправляемаяФорма - форма объекта торговые предложения, например Справочник.Соглашения.
//  ГруппаЭлементов	 - ГруппаФормы - группа элементов формы для добавления новых элементов.
//
Процедура ДобавитьЭлементыУправленияФормыТорговыеПредложения(Форма, ГруппаЭлементов)

	// Создание реквизитов формы.
	НовыеРеквизитыФормы = Новый Массив;
	РеквизитыФормы = Форма.ПолучитьРеквизиты();
	Реквизиты = Новый Соответствие;
	Для каждого РеквизитФормы Из РеквизитыФормы Цикл
		Реквизиты.Вставить(РеквизитФормы.Имя, РеквизитФормы);
	КонецЦикла;
	
	РеквизитТорговыеПредложенияПубликовать = Новый РеквизитФормы("ТорговыеПредложенияПубликовать",
		Новый ОписаниеТипов("Булево"),, НСтр("ru = 'Публиковать торговые предложения в сервисе'"),	Истина);
		
	Если Реквизиты.Получить(РеквизитТорговыеПредложенияПубликовать.Имя) = Неопределено Тогда
		НовыеРеквизитыФормы.Добавить(РеквизитТорговыеПредложенияПубликовать);
	КонецЕсли;
	Если НовыеРеквизитыФормы.Количество() Тогда
		Форма.ИзменитьРеквизиты(НовыеРеквизитыФормы);
	КонецЕсли;
	
	// Создание/настройка элементов управления.
	
	// Создание общей группы 1С:Бизнес-сеть.
	ЭлементГруппаТорговыеПредложения = ГруппаЭлементов.ПодчиненныеЭлементы.Найти("ГруппаТорговыеПредложения");
	Если ЭлементГруппаТорговыеПредложения = Неопределено Тогда
		ЭлементГруппаТорговыеПредложения = Форма.Элементы.Добавить("ГруппаТорговыеПредложения",
			Тип("ГруппаФормы"), ГруппаЭлементов);
		ЭлементГруппаТорговыеПредложения.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементГруппаТорговыеПредложения.Заголовок           = НСтр("ru = '1С:Бизнес-сеть'");
		ЭлементГруппаТорговыеПредложения.Отображение         = ОтображениеОбычнойГруппы.Нет;
		ЭлементГруппаТорговыеПредложения.ОтображатьЗаголовок = Ложь;
		ЭлементГруппаТорговыеПредложения.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КонецЕсли;
	
	ЭлементыГруппы = ЭлементГруппаТорговыеПредложения.ПодчиненныеЭлементы;
	
	// Флаг Публиковать торговые предложения.
	ЭлементТорговыеПредложенияПубликовать = ЭлементыГруппы.Найти("ТорговыеПредложенияПубликовать");
	Если ЭлементТорговыеПредложенияПубликовать = Неопределено Тогда
		ЭлементТорговыеПредложенияПубликовать = Форма.Элементы.Добавить("ТорговыеПредложенияПубликовать",
			Тип("ПолеФормы"), ЭлементГруппаТорговыеПредложения);
		ЭлементТорговыеПредложенияПубликовать.Вид                = ВидПоляФормы.ПолеФлажка;
		ЭлементТорговыеПредложенияПубликовать.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		ЭлементТорговыеПредложенияПубликовать.ПутьКДанным        = РеквизитТорговыеПредложенияПубликовать.Имя;
		ЭлементТорговыеПредложенияПубликовать.УстановитьДействие("ПриИзменении",
			"Подключаемый_ПриИзменении_ПубликоватьТорговыеПредложения");
	КонецЕсли;
	
	// Гиперссылка Торговые предложения.
	ЭлементТорговыеПредложенияСостояниеОбмена = ЭлементыГруппы.Найти("ТорговыеПредложенияСостояниеОбмена");
	Если ЭлементТорговыеПредложенияСостояниеОбмена = Неопределено Тогда
		ЭлементГиперссылка = Форма.Элементы.Добавить("ТорговыеПредложенияСостояниеОбмена",
			Тип("ДекорацияФормы"), ЭлементГруппаТорговыеПредложения);
		ЭлементГиперссылка.Заголовок = НСтр("ru = 'Торговые предложения состояние обмена'");
		ЭлементГиперссылка.Гиперссылка = Истина;
		ЭлементГиперссылка.УстановитьДействие("Нажатие",
			"Подключаемый_Нажатие_ГиперссылкиТорговыхПредложений");
	КонецЕсли;
	
	// Гиперссылка Дополнительные настройки.
	ЭлементГиперссылка = ЭлементыГруппы.Найти("ТорговыеПредложенияОткрытьНастройкиПубликации");
	Если ЭлементГиперссылка = Неопределено Тогда
		ЭлементГиперссылка = Форма.Элементы.Добавить("ТорговыеПредложенияОткрытьНастройкиПубликации",
			Тип("ДекорацияФормы"), ЭлементГруппаТорговыеПредложения);
		ЭлементГиперссылка.Заголовок = НСтр("ru = 'Настройки публикации торгового предложения'");
		ЭлементГиперссылка.Гиперссылка = Истина;
		ЭлементГиперссылка.УстановитьДействие("Нажатие",
			"Подключаемый_Нажатие_ГиперссылкиТорговыхПредложений");
	КонецЕсли;

КонецПроцедуры

// Поля региона контактной информации сервиса.
//
// Параметры:
//  ЗначенияПолей	 - Строка - строка XML.
//  СтраныПоиска	 - Соответствие - страны поиска.
// 
// Возвращаемое значение:
//  ТипЗначенияXDTO - значения адреса в XDTO.
//
Функция ПоляXDTOРегионаКонтактнойИнформацииСервиса(ЗначенияПолей)
	
	ДополнительныеПараметры = Новый Структура("НаименованиеВключаетСокращение", Истина);
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ЗначенияПолей, ДополнительныеПараметры);
	
	ПоляРегионаXDTO = ФабрикаXDTO.Создать(ТипXDTO("Address"));
	Если Не ЗначениеЗаполнено(СведенияОбАдресе) Тогда
		Возврат ПоляРегионаXDTO;
	КонецЕсли;
	
	СведенияОбАдресе.Свойство("КодСтраны",       ПоляРегионаXDTO.country);
	СведенияОбАдресе.Свойство("Регион",          ПоляРегионаXDTO.region);
	СведенияОбАдресе.Свойство("Район",           ПоляРегионаXDTO.area);
	СведенияОбАдресе.Свойство("НаселенныйПункт", ПоляРегионаXDTO.place);
	СведенияОбАдресе.Свойство("Город",           ПоляРегионаXDTO.city);
	СведенияОбАдресе.Свойство("Улица",           ПоляРегионаXDTO.street);
	СведенияОбАдресе.Свойство("Индекс",          ПоляРегионаXDTO.postalCode);
	Если ЗначениеЗаполнено(СведенияОбАдресе.Здание.Номер) Тогда
		ПомещениеXDTO = ФабрикаXDTO.Создать(ТипXDTO("HouseElement"));
		ПомещениеXDTO.Установить("type", "1020");
		ПомещениеXDTO.Установить("number", СведенияОбАдресе.Здание.Номер);
		ПоляРегионаXDTO.houseElements.Добавить(ПомещениеXDTO);
	КонецЕсли;
	
	Возврат ПоляРегионаXDTO;
	
КонецФункции

// Обновление подсказок торговых предложений торговых предложений в сервисе 1С:Бизнес-сеть.
//
Процедура ОбновлениеПодсказокТорговыхПредложений()
	
	ОбновитьПодсказкиТорговыеПредложения();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
