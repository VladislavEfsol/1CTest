////////////////////////////////////////////////////////////////////////////////
// Подсистема "Торговые предложения".
// ОбщийМодуль.ТорговыеПредложенияСлужебный.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Выполнение команды сервиса.
//
// Параметры:
//   ЗапросСервиса - Структура - параметры вызова или имя команды.
//   Отказ - Булево - признак ошибки выполнения.
// Возврат
//   Строка, Массив, Структура - возвращаемые данные сервиса.
//
Функция ВыполнитьЗапрос(ЗапросСервиса, Отказ, Ошибка = Неопределено) Экспорт
	
	Если Не ТорговыеПредложения.ПравоПоискаТорговыхПредложений(Истина) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Проверка отказа заполнения параметров.
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ошибка = Новый Структура("ТекстОшибки", "ПодробныйТекстОшибки");
	
	// Инициализация параметров соединения.
	ПараметрыСоединения = БизнесСетьПовтИсп.ПараметрыСоединения("ТорговаяПлощадка");
	ЗапросСервиса.Вставить("ИдентификаторПрограммы", ПараметрыСоединения.ИдентификаторПрограммы);
	
	// Установка времени ожидания ответа.
	Если ЗапросСервиса.Свойство("Таймаут") И ЗапросСервиса.Таймаут <> 0 Тогда
		Таймаут = ЗапросСервиса.Таймаут;
	Иначе
		Таймаут = ПараметрыСоединения.Таймаут;
	КонецЕсли;
		
	// Инициализация соединения.
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.Сервер, ПараметрыСоединения.Порт,,,
			ПараметрыСоединения.Прокси, Таймаут, ПараметрыСоединения.ЗащищенноеСоединение);
	Исключение
		ТекстСообщения = НСтр("ru='Отсутствует соединение с сервисом 1С:Бизнес-сеть'")
			+ БизнесСетьКлиентСервер.ПодробностиВЖурналеРегистрации();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			ПодробноеПредставлениеОшибки, "БизнесСеть");
		Ошибка.Вставить("ТекстОшибки", ТекстСообщения);
		Ошибка.Вставить("ПодробныйТекстОшибки", ПодробноеПредставлениеОшибки);
		Возврат Неопределено;
	КонецПопытки;

	// Установка параметров запроса.
	Запрос = Новый HTTPЗапрос(ЗапросСервиса.Адрес);
	
	// Получение тикета сервиса.
	Если ПараметрыСоединения.Аутентификация Тогда
		КлючТикета = ПолучитьКлючТикета(Соединение, ПараметрыСоединения, ЗапросСервиса, Отказ);
		Если Отказ ИЛИ Не ЗначениеЗаполнено(КлючТикета) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Запрос.Заголовки.Вставить("Authorization", "Bearer " + КлючТикета);
	КонецЕсли;
	
	// Установка заголовков запроса.
	Если ЗапросСервиса.Свойство("Заголовки") Тогда
		Для каждого ПараметрЗаголовка Из ЗапросСервиса.Заголовки Цикл
			Запрос.Заголовки.Вставить(ПараметрЗаголовка.Ключ, ПараметрЗаголовка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// Установка тела запроса.
	Если ЗначениеЗаполнено(ЗапросСервиса.Данные) Тогда
		Если ТипЗнч(ЗапросСервиса.Данные) = Тип("ДвоичныеДанные") Тогда
			Запрос.УстановитьТелоИзДвоичныхДанных(ЗапросСервиса.Данные);
		Иначе
			Запрос.УстановитьТелоИзСтроки(ЗапросСервиса.Данные);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗапросСервиса.Метод = "GET" Тогда
		
		Если ЗапросСервиса.РасширятьКонтент Тогда
			Запрос.Заголовки.Вставить("Accept", ЗапросСервиса.Контент + ", application/json");
		Иначе
			Запрос.Заголовки.Вставить("Accept", ЗапросСервиса.Контент);
		КонецЕсли;
		
	ИначеЕсли ЗапросСервиса.Метод = "POST" Тогда
		Запрос.Заголовки.Вставить("Content-Type", ЗапросСервиса.Контент);
	ИначеЕсли ЗапросСервиса.Метод = "PUT" Тогда
		Запрос.Заголовки.Вставить("Content-Type", ЗапросСервиса.Контент);
	ИначеЕсли ЗапросСервиса.Метод = "PATCH" Тогда
		Запрос.Заголовки.Вставить("Content-Type", ЗапросСервиса.Контент);
	ИначеЕсли ЗапросСервиса.Метод = "DELETE" Тогда
		Запрос.Заголовки.Вставить("Content-Type", ЗапросСервиса.Контент);
		Запрос.Заголовки.Вставить("Content-Length", СтрДлина(Запрос.ПолучитьТелоКакСтроку()));
	КонецЕсли;
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ЗапросСервиса.Метод, Запрос);
		Если ЗапросСервиса.ОтветДвоичныеДанные Тогда
			Данные = Ответ.ПолучитьТелоКакДвоичныеДанные();
		Иначе
			Данные = Ответ.ПолучитьТелоКакСтроку();
			Если ЗначениеЗаполнено(Данные) Тогда
				Данные = ЗначениеИзСтрокиJSON(Данные);
			КонецЕсли;
		КонецЕсли;
	Исключение
		Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса к сервису.'");
		ПодробныйТекстОшибки = ТекстОшибки + Символы.ПС + ЗапросСервиса.Адрес + Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ЗапросСервиса.Наименование,
			ПодробныйТекстОшибки, ТекстОшибки, "БизнесСеть");
		Ошибка.Вставить("ТекстОшибки", ТекстОшибки);
		Ошибка.Вставить("ПодробныйТекстОшибки", ПодробныйТекстОшибки);
		Возврат Неопределено;
	КонецПопытки;
	
	// Обработка результата запроса.
	ОтветСервиса = ОбработатьОтветСервиса(Соединение, ЗапросСервиса, Ответ, Данные, Ошибка, Отказ);
	
	Если ЗапросСервиса.ВозвращатьЗаголовки = Истина Тогда
		Результат = Новый Структура;
		Результат.Вставить("Заголовки", Ответ.Заголовки);
		Результат.Вставить("Результат", ОтветСервиса);
	Иначе
		Результат = ОтветСервиса;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Чтение торгового предложения.
//
// Параметры:
//  Идентификатор	 - Строка - идентификатор торгового предложения.
//  Валюта			 - СправочникСсылка.Валюта - валюта.
//  Отказ			 - Булево - результат метода.
// 
// Возвращаемое значение:
//  Структура - полученное значение торгового предложения:
//   * Идентификатор - Строка - идентификатор.
//   * ВнутреннийИдентификатор - Строка - внутренний идентификатор.
//   * ИдентификаторКатегорииСервиса - Строка - идентификатор категории сервиса.
//   * НаименованиеКатегорииСервиса - Строка - наименование категории сервиса.
//   * ИдентификаторНоменклатурыСервиса - Строка - идентификатор номенклатуры сервиса.
//   * ПредставлениеНоменклатурыСервиса - Строка - представление номенклатуры сервиса.
//   * ОписаниеСервиса - Строка - описание сервиса.
//   * ИдентификаторХарактеристикиСервиса - Строка - идентификатор характеристики сервиса.
//   * ПредставлениеХарактеристикиСервиса - Строка - представление характеристики сервиса.
//   * ШтрихкодыСервиса - Массив из Строка - штрихкоды сервиса.
//   * АртикулПроизводителя - Строка - артикул производителя.
//   * АдресаКартинокСервиса - Строка - адреса картинок сервиса.
//   * КодЕдиницыИзмеренияСервиса - Строка - код единицы измерения сервиса.
//   * ИдентификаторПроизводителя - Строка - идентификатор производителя.
//   * НаименованиеПроизводителя - Строка - наименование производителя.
//   * ИдентификаторМаркиСервиса - Строка - идентификатор марки сервиса.
//   * НаименованиеМаркаСервиса - Строка - наименование марка сервиса.
//   * СвойстваСервиса - ТаблицаЗначений - свойства сервиса, колонки:
//     ** Идентификатор - Строка - идентификатор.
//     ** Наименование - Строка - наименование.
//     ** Значение - Строка - значение.
//     ** Представление - Строка - представление.
//   * ИдентификаторНоменклатуры - Строка - идентификатор номенклатуры.
//   * НаименованиеНоменклатуры - Строка - наименование номенклатуры.
//   * Описание - Строка - описание.
//   * Марка - Строка - марка.
//   * Производитель - Строка - производитель.
//   * Артикул - Массив из Строка - артикул.
//   * Штрихкоды - Массив из Строка - штрихкоды.
//   * КодЕдиницыИзмерения - Строка - код единицы измерения.
//   * ИдентификаторКатегории - Строка - идентификатор категории.
//   * НаименованиеКатегории - Строка - наименование категории.
//   * Свойства - Массив из Структура - свойства товара, где:
//     ** Идентификатор - Строка - идентификатор сервиса.
//     ** Наименование - Строка - наименование.
//     ** Значение - Строка - значение.
//     ** Представление - Строка - представление.
//   * Заголовок - Строка - заголовок.
//   * ДополнительноеОписание - Строка - дополнительное описание.
//   * ИдентификаторКонтрагента - Строка - идентификатор контрагента.
//   * ИННКонтрагента - Строка - ИНН контрагента.
//   * КППКонтрагента - Строка - КПП контрагента.
//   * НаименованиеКонтрагента - Строка - наименование контрагента.
//   * ПредставлениеКонтакта - Строка - представление контакта.
//   * Телефон - Строка - телефон.
//   * ЭлектроннаяПочта - Строка - электронная почта.
//   * УпаковкаНаименование - Строка - упаковка наименование.
//   * ЧислительУпаковки - Число - числитель упаковки.
//   * ЗнаменательУпаковки - Число - знаменатель упаковки.
//   * КоличествоЕдиниц - Число - количество единиц.
//   * СрокПоставки - Число - срок поставки.
//   * Валюта - Ссылка - валюта.
//   * СтавкаНДС - Ссылка - ставка НДС.
//   * ЦенаВключаетНДС - Булево - цена включает НДС.
//   * Цены - ТаблицаЗначений - цены:
//     ** Количество - Число - количество.
//     ** Цена - Число - цена.
//     ** Комментарий - Строка - комментарий.
//   * КратностьУпаковки - Число - кратность упаковки.
//   * Наличие - Число - наличие.
//   * РегионыДоставки - Массив - регионы доставки.
//   * АдресаСамовывоза - Массив - адреса самовывоза.
//   * ВалютаПоиска - Ссылка - валюта поиска.
//   * ЦеныПоВалюте - ТаблицаЗначений - цены по валюте:
//     ** Количество - Число - количество.
//     ** Цена - Число - цена.
//     ** Комментарий - Строка - комментарий.
//
Функция ПолучитьТорговоеПредложение(Идентификатор, Валюта, Отказ) Экспорт
	
	// Запрос торгового предложения.
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Идентификатор", Идентификатор);
	ПараметрыЗапроса.Вставить("Валюта", Валюта);
	ЗапросСервиса = ЗапросСервисаПолучениеТорговогоПредложения(ПараметрыЗапроса);
	Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	Если Отказ Или Не ЗначениеЗаполнено(Результат) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Добавление цены товара по валюте публикации.
	Результат.Вставить("ЦенаПубликации", Неопределено);
	Если ЗначениеЗаполнено(Результат.Цены) И Результат.Цены.Количество() Тогда
		Результат.Цены.Сортировать("Количество");
		Результат.ЦенаПубликации = Результат.Цены[0].Цена;
	КонецЕсли;
	
	// Добавление цены по валюте запроса.
	Результат.Вставить("Цена", Неопределено);
	Если ЗначениеЗаполнено(Результат.ЦеныПоВалюте) И Результат.ЦеныПоВалюте.Количество() Тогда
		Результат.ЦеныПоВалюте.Сортировать("Количество");
		Результат.Цена = Результат.ЦеныПоВалюте[0].Цена;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры запроса поиска торговых предложений по списку.
// Метод: GET /search-groups
// Модель: SearchTradeOffersGroupsQueryV1
//
Функция НовыеПараметрыПоискаТорговыхПредложенийПоСписку() Экспорт
	
	Результат = Новый Структура;
	
	// Общие параметры.
	Результат.Вставить("КоличествоКонтрагентов", 0); // maxSuppliersNumber
	Результат.Вставить("ОтклонениеЦены",         0); // priceDeviationPercent
	Результат.Вставить("СрокОтгрузки",           0); // maxShippingDays
	Результат.Вставить("Валюта"); // priceCurrencyCode
	
	// Отборы для поиска. SearchTradeOfferCriteria
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Наименование",  Типы().Строка); // query
	Товары.Колонки.Добавить("Производитель", Типы().Строка); // manufacturerOrBrand
	Товары.Колонки.Добавить("ЦенаОт",        Типы().Число);  // priceFrom
	Товары.Колонки.Добавить("ЦенаДо",        Типы().Число);  // priceTo
	Товары.Колонки.Добавить("ЕдиницаИзмерения");             // unitOkeiCode (ссылка)
	Товары.Колонки.Добавить("Количество",    Типы().Число);  // demandedUnitsNumber
	Товары.Колонки.Добавить("Артикулы",      Типы().Массив); // partNumbers (строки)
	Товары.Колонки.Добавить("Штрихкоды",     Типы().Массив); // barCodes (строки)
	Товары.Колонки.Добавить("Контрагенты",   Типы().Массив); // suppliers (ссылки контрагенты)
	Товары.Колонки.Добавить("ИдентификаторКатегории", Типы().Строка); // categoryId
	Товары.Колонки.Добавить("ИдентификаторНоменклатурыСервиса",   Типы().Строка); // nomenclatureId
	Товары.Колонки.Добавить("ИдентификаторХарактеристикиСервиса", Типы().Строка); // nomenclatureCharacteristicId
	Товары.Колонки.Добавить("Сортировка",    Типы().Строка); // resultSorting
	
	Результат.Вставить("Товары",             Товары);
	Результат.Вставить("РегионыПоиска",      Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Поиск торговых предложения по отбору.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. НовыеПараметрыПоискаТорговыхПредложенийСОтборами.
//  Отказ			 - Булево	 - результат выполнения.
// 
// Возвращаемое значение:
//  Структура - возвращаемые данные, состав:
//   * Страницы - Структура - страницы:
//     ** Страница - Число - страница.
//     ** РазмерСтраницы - Число - размер страницы.
//     ** КоличествоСтрок - Число - количество строк.
//     ** КоличествоСтраниц - Число - количество страниц.
//   * Список - ТаблицаЗначений - список:
//     ** Идентификатор - Строка - идентификатор.
//     ** НаименованиеНоменклатуры - Строка - наименование номенклатуры.
//     ** ИдентификаторКатегории - Строка - идентификатор категории.
//     ** НаименованиеКатегории - Строка - наименование категории.
//     ** КодЕдиницыИзмерения - Строка - код единицы измерения.
//     ** АртикулПроизводителя - Строка - артикул производителя.
//     ** АртикулПоставщика - Строка - артикул поставщика.
//     ** СрокПоставки - Число - срок поставки.
//     ** НаименованиеУпаковки - Строка - наименование упаковки.
//     ** ЧислительУпаковки - Число - числитель упаковки.
//     ** ЗнаменательУпаковки - Число - знаменатель упаковки.
//     ** КратностьУпаковки - Число - кратность упаковки.
//     ** Наличие - Число - наличие.
//     ** СтавкаНДС - Ссылка - ставка НДС.
//     ** ЦенаВключаетНДС - Булево - цена включает НДС.
//     ** ИдентификаторКонтрагента - Строка - идентификатор контрагента.
//     ** ИННКонтрагента - Строка - ИНН контрагента.
//     ** КППКонтрагента - Строка - КПП контрагента.
//     ** НаименованиеКонтрагента - Строка - наименование контрагента.
//     ** ПредставлениеКонтакта - Строка - представление контакта.
//     ** Телефон - Строка - телефон.
//     ** ЭлектроннаяПочта - Строка - электронная почта.
//     ** Валюта - Ссылка - валюта.
//     ** Цена - Число - цена.
//     ** ВалютаПредложения - Ссылка - валюта предложения.
//     ** ЦеныВВалютеПредложения - ТаблицаЗначений - цены в валюте предложения:
//        *** Количество - Число - количество.
//        *** Цена - Число - цена.
//        *** Комментарий - Строка - комментарий.
//
Функция ПоискТорговыхПредложенийПоОтбору(Знач ПараметрыЗапроса, Отказ) Экспорт
	
	Отказ = Ложь;
	
	ЗапросСервиса = ЗапросСервисаПоискТорговыхПредложенийСОтборами(ПараметрыЗапроса);
	Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Возврат Результат;
	
КонецФункции

// Поиск торговых предложений по списку.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. НовыеПараметрыПоискаТорговыхПредложенийПоСписку.
//  Отказ			 - Булево	 - признак результата выполнения.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - данные торгового предложения:
//   * Страницы - Структура - страницы:
//     ** Страница - Число - страница.
//     ** РазмерСтраницы - Число - размер страницы.
//     ** КоличествоСтрок - Число - количество строк.
//     ** КоличествоСтраниц - Число - количество страниц.
//   * Список - ТаблицаЗначений - список:
//     ** Идентификатор - Строка - идентификатор.
//     ** ИдентификаторНоменклатурыСервиса - Строка - идентификатор номенклатуры сервиса.
//     ** ИдентификаторХарактеристикиСервиса - Строка - идентификатор характеристики сервиса.
//     ** ИдентификаторНоменклатурыПоставщика - Строка - идентификатор номенклатуры поставщика.
//     ** НаименованиеУпаковки - Строка - наименование упаковки.
//     ** ЧислительУпаковки - Число - числитель упаковки.
//     ** ЗнаменательУпаковки - Число - знаменатель упаковки.
//     ** СтавкаНДС - Ссылка- ставка НДС.
//     ** Цены - ТаблицаЗначений - цены:
//       *** Количество - Число - количество.
//       *** Цена - Число - цена.
//       *** Комментарий - Строка - комментарий.
//     ** КратностьУпаковки - Число - кратность упаковки.
//     ** ЦенаВключаетНДС - Булево - цена включает ндс.
//     ** СрокПоставки - Число - срок поставки.
//     ** НеПубликуется - Булево - не публикуется.
//
Функция ПоискТорговыхПредложенийПоСписку(ПараметрыЗапроса, Отказ) Экспорт
	
	ЗапросСервиса = ЗапросСервисаПоискТорговыхПредложенийПоСписку(ПараметрыЗапроса);
	Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Возврат Результат;
	
КонецФункции

// Установка представления единиц измерения по коду.
//
// Параметры:
//  Коллекция				 - ТаблицаЗначений - таблица для заполнения.
//  РеквизитКода			 - Строка - имя реквизита с кодом единицы измерения.
//  РеквизитПредставление	 - Строка - имя реквизита для установки представления.
//
Процедура УстановитьПредставлениеЕдиницИзмерения(Коллекция, РеквизитКода, РеквизитПредставление) Экспорт
	
	Если ТипЗнч(Коллекция) = Тип("ТаблицаЗначений") Тогда
		
		Если Коллекция.Колонки.Найти(РеквизитПредставление) = Неопределено Тогда
			Коллекция.Колонки.Добавить(РеквизитПредставление, Новый ОписаниеТипов("Строка"), НСтр("ru = 'Единица измерения'"));
		КонецЕсли;
		
		Для каждого ЭлементКоллекции Из Коллекция Цикл
			
			Если ЗначениеЗаполнено(ЭлементКоллекции[РеквизитПредставление]) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЭлементКоллекции[РеквизитКода]) Тогда
				// Не заполнен код единицы измерения.
				Продолжить;
			КонецЕсли;
			
			ЭлементКоллекции[РеквизитПредставление]
				= ТорговыеПредложенияПовтИсп.ПараметрыЕдиницыИзмеренияПоКоду(ЭлементКоллекции[РеквизитКода]).Представление;
				
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверка использования функционал публикации.
// 
// Возвращаемое значение:
//  Булево - признак использования функционала.
//
Функция ИспользоватьФункционалПубликации() Экспорт
	
	Возврат Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип
		<> Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных");
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ПрофилиБезопасности
// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	ПараметрыСоединения = БизнесСетьПовтИсп.ПараметрыСоединения("ТорговаяПлощадка");
	
	Протокол = ?(ПараметрыСоединения.ЗащищенноеСоединение <> Неопределено, "HTTPS", "HTTP");
	Адрес    = ПараметрыСоединения.Сервер;
	Порт     = ПараметрыСоединения.Порт;
	Описание = НСтр("ru = 'Публикация, поиск, заказы торговых предложений в сервисе 1С:Торговая площадка.'");
	
	Разрешения = Новый Массив;
	Разрешения.Добавить(РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(Протокол, Адрес, Порт, Описание));
	ВладелецРазрешения = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		Метаданные.РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.ПолноеИмя());
	
	ЗапросРазрешений = РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(Разрешения, ВладелецРазрешения, Истина);
	
	ЗапросыРазрешений.Добавить(ЗапросРазрешений);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПрофилиБезопасности

// ЭлектронноеВзаимодействие.РаботаСНоменклатурой

// Подготовка данных для регистрации сопоставления.
//  В методе выполняется запись данных для публикации в служебный регистр сведений
//  и выполняется подготовка запроса для получения данных по публикуемым товарам.
//  В составе возвращаемых полей в запросе должны быть Номенклатура, Характеристика.
//
// Параметры:
//  Запрос	 - Запроса - объект запроса.
//
Процедура ПодготовитьДанныеИЗапросРегистрацииСопоставленияНоменклатуры(Запрос) Экспорт
	
	// Создание новых записей в регистре.
	СоздатьЗаписиТорговыхПредложенийДляПоискаСоответствия();
	
	// Инициализация запроса.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТорговыеПредложенияТорговойПлощадки.Номенклатура КАК Номенклатура,
	|	ТорговыеПредложенияТорговойПлощадки.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
	|ГДЕ
	|	ТорговыеПредложенияТорговойПлощадки.Публикуется";
	
КонецПроцедуры

// Подготовка запроса сопоставления и поиска номенклатуры.
//  По входящему запросу производится добавление источника данных и соединение
//  по полям Номенклатура и Характеристика для механизма сопоставления
//  номенклатуры с сервисом 1С:Номенклатура.
//
// Параметры:
//  Запрос	 - Запрос - запрос для компоновки.
//
Процедура ПодготовитьЗапросСопоставленияНоменклатуры(Запрос) Экспорт
	
	ПолеСТекстомЗапроса = "Текст";
	Если ТипЗнч(Запрос) = Тип("ДинамическийСписок") Тогда
		ПолеСТекстомЗапроса = "ТекстЗапроса";
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос[ПолеСТекстомЗапроса]);
		
	ОператорЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];	
	
	ОператорЗапроса.ВыбиратьРазличные = Истина;
	СоответствиеНоменклатуры          = ОператорЗапроса.Источники[0];
	СоответствиеПоиска                = ОператорЗапроса.Источники.Добавить(
		"РегистрСведений.ТорговыеПредложенияТорговойПлощадки", "ТорговыеПредложенияТорговойПлощадки");
		
	СоответствиеНоменклатуры.Соединения.Очистить();
	СоответствиеПоиска.Соединения.Очистить();
		
	СоответствиеНоменклатуры.Соединения.Добавить(СоответствиеПоиска,
		СтрШаблон("%1.Номенклатура = ТорговыеПредложенияТорговойПлощадки.Номенклатура
			|И %1.Характеристика = ТорговыеПредложенияТорговойПлощадки.Характеристика
			|И ТорговыеПредложенияТорговойПлощадки.Публикуется",
				СоответствиеНоменклатуры.Источник.Псевдоним));
		
	СоответствиеНоменклатуры.Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
	
	Запрос[ПолеСТекстомЗапроса] = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗапросыСервиса

// Запрос сервиса получение тикета
//
// Параметры:
//  ПараметрыМетода	 - Структура - параметры запроса.
//  Отказ			 - Булево - результат выполнения.
// 
// Возвращаемое значение:
//  Структура - значение тикета.
//
Функция ЗапросСервисаПолучениеТикета(ПараметрыМетода, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Вставить("Логин");
	ЗапросСервиса.Вставить("Пароль");
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение тикета'");
	ЗапросСервиса.Адрес = "its-auth/token";
	ЗапросСервиса.Контент = "application/json";
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки("1c-bn-access");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(ДанныеАутентификации.КодОшибки) Тогда
		Если ДанныеАутентификации.КодОшибки = "НеверныйЛогинИлиПароль" Тогда
			Отказ = Истина;
		КонецЕсли;
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось подключиться к порталу интернет-поддержки по причине:
				|%1'"),
			ДанныеАутентификации.СообщениеОбОшибке);
			
		Если ПараметрыМетода.Свойство("БлокироватьСообщенияОбОшибках")
						И ПараметрыМетода.БлокироватьСообщенияОбОшибках = Истина Тогда
			Отказ = Истина;
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки,,,, Отказ);
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;
	
	ЗапросСервиса.Логин  = "AUTH_TOKEN";
	ЗапросСервиса.Пароль = ДанныеАутентификации.Тикет;

	Возврат ЗапросСервиса;

КонецФункции

// Получение прайс-листов.
//
// Параметры:
//  ПараметрыЗапроса	 - Структура - параметры поиска, см. НовыеПараметрыПолученияПрайсЛистов.
// 
// Возвращаемое значение:
//  Структура - данные запроса.
//
Функция ЗапросСервисаПолучениеПрайсЛистов(ПараметрыЗапроса) Экспорт
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение прайс-листов'");
	ЗапросСервиса.Адрес = "trade-offers/placement/price-lists";
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd.1cbn-rsc+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.РазрешенныеСостояния.Добавить(404);
	ДобавитьКолонкиТаблицыОписания(ЗапросСервиса.Обработка, "Placement/PriceListPageV1");
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ВнутреннийИдентификатор) Тогда
		ЗапросСервиса.Адрес = ЗапросСервиса.Адрес + "/search/by-external-code";
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "code", ПараметрыЗапроса.ВнутреннийИдентификатор);
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.Идентификатор) Тогда
		ЗапросСервиса.Адрес = ЗапросСервиса.Адрес + "/" + ПараметрыЗапроса.Идентификатор;
		ДобавитьКолонкиТаблицыОписания(ЗапросСервиса.Обработка, "Placement/PriceListV1");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Страница) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "PageParameters", ПараметрыЗапроса.Страница);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыЗапроса.РазмерСтраницы) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "size", ПараметрыЗапроса.РазмерСтраницы);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Сортировка) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "sort", ПараметрыЗапроса.Сортировка);
	КонецЕсли;
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Удаление прайса-листа.
//
// Параметры:
//  ПараметрыЗапроса	 - Структура - параметры поиска, см. НовыеПараметрыПолученияПрайсЛистов.
// 
// Возвращаемое значение:
//  Структура - данные запроса.
//
Функция ЗапросСервисаУдалениеПрайсЛиста(ПараметрыЗапроса) Экспорт
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.Наименование = НСтр("ru = 'Удаление прайс-листа'");
	ЗапросСервиса.Адрес = СтрШаблон("trade-offers/placement/price-lists/%1", ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "DELETE";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.РазрешенныеСостояния.Добавить(204);
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Удаление торгового предложения в сервисе.
//
// Параметры:
//  Идентификатор - Срока - идентификатор торгового предложения.
// 
// Возвращаемое значение:
//  Структура - данные запроса.
//
Функция ЗапросСервисаУдалениеТорговогоПредложения(Идентификатор, РежимСнятияСПубликации = Ложь)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	Если Не РежимСнятияСПубликации Тогда
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Удаление торгового предложения'");
		ЗапросСервиса.Адрес = СтрШаблон("trade-offers/placement/offers/%1", Идентификатор);
		ЗапросСервиса.Метод = "DELETE";
		ЗапросСервиса.Аутентификация = Истина;
		ЗапросСервиса.РазрешенныеСостояния.Добавить(204);
		
	Иначе
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Снятие с публикации торгового предложения'");
		ЗапросСервиса.Адрес = СтрШаблон("trade-offers/placement/offers/%1", Идентификатор);
		ЗапросСервиса.Метод = "PATCH";
		ЗапросСервиса.Аутентификация = Истина;
		ЗапросСервиса.Контент = "application/json-patch+json";
		ЗапросСервиса.Данные = "[{""op"":""replace"", ""path"":""/termsOfSale/temporarilyOutOfSales"", ""value"":""true""}]";
		ЗапросСервиса.РазрешенныеСостояния.Добавить(204);
		ЗапросСервиса.Ошибки.Вставить(404, СтрШаблон(НСтр("ru = 'Не найдено торговое предложение в сервисе с идентификатором %1'"),
			Идентификатор));
		
	КонецЕсли;
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Получение торговых предложений.
//
// Параметры:
//  ПараметрыЗапроса	 - Структура - параметры поиска, см. НовыеПараметрыПолученияТорговыхПредложений.
// 
// Возвращаемое значение:
//  Структура - данные запроса.
//
Функция ЗапросСервисаПолучениеТорговыхПредложений(ПараметрыЗапроса)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение торговых предложений'");
	ЗапросСервиса.Адрес = "trade-offers/placement/offers";
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.Контент = "application/vnd.1cbn-rsc+json";
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ВнутреннийИдентификаторПрайсЛиста) Тогда
		ЗапросСервиса.Адрес = ЗапросСервиса.Адрес + "/search/by-price-list";
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "priceListExternalCode",
			ПараметрыЗапроса.ВнутреннийИдентификаторПрайсЛиста);
		ДобавитьКолонкиТаблицыОписания(ЗапросСервиса.Обработка, "Placement/TradeOffersPageV1");
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ВнутреннийИдентификатор) Тогда
		ЗапросСервиса.Адрес = ЗапросСервиса.Адрес + "/search/by-external-code";
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "code", ПараметрыЗапроса.ВнутреннийИдентификатор);
		ДобавитьКолонкиТаблицыОписания(ЗапросСервиса.Обработка, "Placement/TradeOffersPageV1");
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.Идентификатор) Тогда
		ЗапросСервиса.Адрес = ЗапросСервиса.Адрес + "/" + ПараметрыЗапроса.Идентификатор;
		ДобавитьКолонкиТаблицыОписания(ЗапросСервиса.Обработка, "Placement/TradeOfferV1");
	Иначе
		// Запрос с отборами.
		ДобавитьКолонкиТаблицыОписания(ЗапросСервиса.Обработка, "Placement/TradeOffersPageV1");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Страница) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "page", ПараметрыЗапроса.Страница);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыЗапроса.РазмерСтраницы) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "size", ПараметрыЗапроса.РазмерСтраницы);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Сортировка) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "sort", ПараметрыЗапроса.Сортировка);
	КонецЕсли;
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Создание прайс-листа.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры поиска, см. НовыеПараметрыСозданияПрайсЛиста.
// 
// Возвращаемое значение:
//  Структура - данные запроса.
//
Функция ЗапросСервисаСозданиеОбновленияПрайсЛиста(ПараметрыЗапроса, ИдентификаторПрайсЛиста, Отказ)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	Если ЗначениеЗаполнено(ИдентификаторПрайсЛиста) Тогда
		ЗапросСервиса.Наименование = НСтр("ru = 'Обновление прайс-листа'");
		ЗапросСервиса.Адрес = СтрШаблон("trade-offers/placement/price-lists/%1", ИдентификаторПрайсЛиста);
		ЗапросСервиса.Метод = "PATCH";
		ЗапросСервиса.Контент = "application/merge-patch+json";
		ЗапросСервиса.РазрешенныеСостояния.Добавить(204);
		ЗапросСервиса.Ошибки.Вставить(404, СтрШаблон(НСтр("ru = 'Не найден прайс-лист в сервисе с идентификатором %1'"),
			ИдентификаторПрайсЛиста));
			
	Иначе
		ЗапросСервиса.Наименование = НСтр("ru = 'Создание прайс-листа'");
		ЗапросСервиса.Адрес = "trade-offers/placement/price-lists";
		ЗапросСервиса.Метод = "POST";
		ЗапросСервиса.Контент = "application/json";	
		ЗапросСервиса.РазрешенныеСостояния.Добавить(201);
		ЗапросСервиса.Ошибки.Вставить(422, СтрШаблон(НСтр("ru = 'Данные прайс-листа %1 не прошли проверку в сервисе'"),
			ПараметрыЗапроса.Наименование));
	КонецЕсли;
	
	ЗапросСервиса.Аутентификация = Истина;
	
	Данные = Новый Структура;
	ОкончаниеДействия = ПараметрыЗапроса.ОкончаниеДействия;
	Если Не ЗначениеЗаполнено(ОкончаниеДействия) Тогда
		ОкончаниеДействия = ДобавитьМесяц(Макс(ПараметрыЗапроса.НачалоДействия, ТекущаяДатаСеанса()), 1);
	ИначеЕсли ОкончаниеДействия < НачалоДня(ТекущаяДатаСеанса()) Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка публикации торговых предложений: Период публикации завершен.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстОшибки, "БизнесСеть",
			УровеньЖурналаРегистрации.Предупреждение,, ПараметрыЗапроса.Ссылка);
		Возврат Неопределено;
	КонецЕсли;
	
	НачалоДействия = ПараметрыЗапроса.НачалоДействия;
	Если Не ЗначениеЗаполнено(НачалоДействия) Тогда
		НачалоДействия = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	СтрокаФормата = "ДФ=yyyy-MM-dd";
	ДобавитьЗначение(Данные, "dateActualFrom", Формат(НачалоДействия, СтрокаФормата), Истина);
	ДобавитьЗначение(Данные, "dateActualTo",   Формат(ОкончаниеДействия, СтрокаФормата), Истина);
	ДобавитьЗначение(Данные, "name",           ПараметрыЗапроса.Наименование);
	ДобавитьЗначение(Данные, "currencyCode",   ТорговыеПредложенияПовтИсп.КодВалюты(ПараметрыЗапроса.Валюта));
	ДобавитьЗначение(Данные, "externalCode",   ПараметрыЗапроса.ВнутреннийИдентификатор);
	
	Контакты = Новый Структура;
	ДобавитьЗначение(Контакты, "personName", ПараметрыЗапроса.ПредставлениеКонтакта);
	ДобавитьЗначение(Контакты, "phone",      ПараметрыЗапроса.Телефон);
	ДобавитьЗначение(Контакты, "email",      ПараметрыЗапроса.ЭлектроннаяПочта);
	
	ДобавитьЗначение(Данные, "contacts", Контакты);
	
	// Создание белого списка контрагентов (заполнение ИНН, КПП).
	ТаблицаКонтрагентов = Новый ТаблицаЗначений;
	ТаблицаКонтрагентов.Колонки.Добавить("Ссылка");
	ТаблицаКонтрагентов.Колонки.Добавить("ИНН");
	ТаблицаКонтрагентов.Колонки.Добавить("КПП");
	Для каждого ЭлементКонтрагентов Из ПараметрыЗапроса.Контрагенты Цикл
		НоваяСтрокаКонтрагентов = ТаблицаКонтрагентов.Добавить();
		НоваяСтрокаКонтрагентов.Ссылка = ЭлементКонтрагентов;
	КонецЦикла;
	Если ТаблицаКонтрагентов.Количество() Тогда
		БизнесСеть.ЗаполнитьРеквизитыКонтрагентов(ТаблицаКонтрагентов);
		СписокКонтрагентовСервиса = Новый Массив;
		Для каждого ЭлементДанныхКонтрагентов Из ТаблицаКонтрагентов Цикл
			КонтрагентСервиса = Новый Структура();
			КонтрагентСервиса.Вставить("inn", ЭлементДанныхКонтрагентов.ИНН);
			Если ЗначениеЗаполнено(ЭлементДанныхКонтрагентов.КПП) Тогда 
				КонтрагентСервиса.Вставить("kpp", ЭлементДанныхКонтрагентов.КПП);
			КонецЕсли;
			СписокКонтрагентовСервиса.Добавить(КонтрагентСервиса);
		КонецЦикла;
		ДобавитьЗначение(Данные, "audience",
			Новый Структура("whiteList", СписокКонтрагентовСервиса));
	КонецЕсли;
	
	ИдентификаторОрганизации = ПолучитьИдентификаторОрганизации(ПараметрыЗапроса.Организация, Отказ);
	ДобавитьЗначение(Данные, "supplierPartyId", ИдентификаторОрганизации, Истина);
	ЗапросСервиса.Данные = БизнесСеть.ЗначениеВJSON(Данные);
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Поиск торговых предложений с отборами.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. НовыеПараметрыПоискаТорговыхПредложенийСОтборами.
// 
// Возвращаемое значение:
//  Структура - данные запроса.
//
Функция ЗапросСервисаПоискТорговыхПредложенийСОтборами(ПараметрыЗапроса) Экспорт
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.Наименование = НСтр("ru = 'Поиск торговых предложений с отборами'");
	ЗапросСервиса.Адрес = "trade-offers/storefront/search";
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Контент = "application/vnd.1cbn-trade-offer-query.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	
	ДобавитьКолонкиТаблицыОписания(ЗапросСервиса.Обработка, "Search/TradeOffersListPageV1");
	
	ЗапросСервиса.РазрешенныеСостояния.Добавить(404);
	
	// Параметры в адресе.
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Страница) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "page", ПараметрыЗапроса.Страница);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыЗапроса.РазмерСтраницы) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "size", ПараметрыЗапроса.РазмерСтраницы);
	КонецЕсли;
	
	// Заполнение данных запроса.
	Данные = Новый Структура;
	
	ДобавитьЗначение(Данные, "query", ПараметрыЗапроса.Наименование);
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Валюта) Тогда
		ДобавитьЗначение(Данные, "priceCurrencyCode", ТорговыеПредложенияПовтИсп.КодВалюты(ПараметрыЗапроса.Валюта));
	КонецЕсли;
	
	ДобавитьЗначение(Данные, "priceFrom",   ПараметрыЗапроса.ЦенаОт * 100);
	ДобавитьЗначение(Данные, "priceTo",     ПараметрыЗапроса.ЦенаДо * 100);
	ДобавитьЗначение(Данные, "partNumbers", ПараметрыЗапроса.Артикулы);
	ДобавитьЗначение(Данные, "barCodes",    ПараметрыЗапроса.Штрихкоды);
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Контрагенты) Тогда
		МассивКонтрагентов = Новый Массив;
		Для каждого ЭлементКонтрагенты Из ПараметрыЗапроса.Контрагенты Цикл
			ОтборКонтрагента = Новый Структура;
			Если ЗначениеЗаполнено(ЭлементКонтрагенты.Ссылка) Тогда
				ПараметрыКонтрагента = Неопределено;
				ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ЭлементКонтрагенты.Ссылка, ПараметрыКонтрагента);
				Идентификаторы = БизнесСеть.ИдентификаторыУчастника(ПараметрыКонтрагента.ИНН, ПараметрыКонтрагента.КПП);
				ДобавитьЗначение(ОтборКонтрагента, "inn", Идентификаторы.ИНН);
				ДобавитьЗначение(ОтборКонтрагента, "kpp", Идентификаторы.КПП);
			Иначе
				
				Если ЗначениеЗаполнено(ЭлементКонтрагенты.ИНН) Тогда
					Идентификаторы = БизнесСеть.ИдентификаторыУчастника(ЭлементКонтрагенты.ИНН, ЭлементКонтрагенты.КПП);
					ДобавитьЗначение(ОтборКонтрагента, "inn", Идентификаторы.ИНН);
					Если ЗначениеЗаполнено(ЭлементКонтрагенты.КПП) Тогда
						ДобавитьЗначение(ОтборКонтрагента, "kpp", Идентификаторы.КПП);
					КонецЕсли;
				Иначе
					ДобавитьЗначение(ОтборКонтрагента, "name", ЭлементКонтрагенты.Наименование);
				КонецЕсли;
			КонецЕсли;
			МассивКонтрагентов.Добавить(ОтборКонтрагента);
		КонецЦикла;
		ДобавитьЗначение(Данные, "suppliers", МассивКонтрагентов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Свойства) Тогда
		МассивСвойств = Новый Массив;
		Для каждого ЭлементСвойства Из ПараметрыЗапроса.Свойства Цикл
			СтруктураСвойства = Новый Структура;
			СтруктураСвойства.Вставить("requisiteId", ЭлементСвойства.Идентификатор);
			СтруктураСвойства.Вставить("requisiteValue", ЭлементСвойства.Значение);
			МассивСвойств.Добавить(СтруктураСвойства);
		КонецЦикла;
		ДобавитьЗначение(Данные, "categoryRequisitesFilter", МассивСвойств);
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыЗапроса.НоменклатураСервиса) Тогда
		МассивНоменклатурыСервиса = Новый Массив;
		Для каждого ЭлементНоменклатурыСервиса Из ПараметрыЗапроса.НоменклатураСервиса Цикл
			НоменклатурыСервиса = Новый Структура;
			ДобавитьЗначение(НоменклатурыСервиса, "nomenclatureId",
				ЭлементНоменклатурыСервиса.ИдентификаторНоменклатуры);
			ДобавитьЗначение(НоменклатурыСервиса, "nomenclatureCharacteristicId",
				ЭлементНоменклатурыСервиса.ИдентификаторХарактеристики);
			МассивНоменклатурыСервиса.Добавить(НоменклатурыСервиса);
		КонецЦикла;
		ДобавитьЗначение(Данные, "productSpecificationIds", МассивНоменклатурыСервиса);
	КонецЕсли;
	
	ДобавитьЗначение(Данные, "categoryId", ПараметрыЗапроса.ИдентификаторКатегории);

	// Регионы поиска.
	Если ЗначениеЗаполнено(ПараметрыЗапроса.РегионыПоиска) Тогда
		РегионыСамовывоза = Новый Массив;
		РегионыДоставки = Новый Массив;
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.РегионыПоиска Цикл
			РегионОтбора = Новый Структура;
			ДобавитьЗначение(РегионОтбора, "countryOksmCode", ЭлементКоллекции.КодСтраны);
			ДобавитьЗначение(РегионОтбора, "regionFiasCode",  ЭлементКоллекции.Идентификатор);
			Если ЭлементКоллекции.ДляСамовывоза Тогда
				РегионыСамовывоза.Добавить(РегионОтбора);
			КонецЕсли;
			Если ЭлементКоллекции.ДляДоставки Тогда
				РегионыДоставки.Добавить(РегионОтбора);
			КонецЕсли;
		КонецЦикла;
		ДобавитьЗначение(Данные, "deliveryRegionCodes", РегионыДоставки);
		ДобавитьЗначение(Данные, "pickupRegionCodes", РегионыСамовывоза);
	КонецЕсли;
	
	// Сортировка.
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Сортировка) Тогда
		Если ПараметрыЗапроса.Сортировка = "СортировкаЦенаВозрастание" Тогда
			РежимСортировки = "PRICE_ASC";
		ИначеЕсли ПараметрыЗапроса.Сортировка = "СортировкаЦенаУбывание" Тогда
			РежимСортировки = "PRICE_DESC";
		Иначе
			РежимСортировки = "RELEVANCE";
		КонецЕсли;
		ДобавитьЗначение(Данные, "resultSorting", РежимСортировки);
	КонецЕсли;
	
	ЗапросСервиса.Данные = БизнесСеть.ЗначениеВJSON(Данные);
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Поиск торговых предложений по списку товаров.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. НовыеПараметрыПоискаТорговыхПредложенийПоСписку.
// 
// Возвращаемое значение:
//  Структура - данные запроса.
//
Функция ЗапросСервисаПоискТорговыхПредложенийПоСписку(ПараметрыЗапроса) Экспорт
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.Наименование = НСтр("ru = 'Поиск торговых предложений по списку'");
	ЗапросСервиса.Адрес = "trade-offers/storefront/search-groups";
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Контент = "application/vnd.1cbn-trade-offer-group-query.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	
	ДобавитьКолонкиТаблицыОписания(ЗапросСервиса.Обработка, "Search/TradeOfferGroupsListV1");
	
	// Заполнение данных запроса.
	Данные = Новый Структура;
	
	ДобавитьЗначение(Данные, "maxSuppliersNumber",    ПараметрыЗапроса.КоличествоКонтрагентов);
	ДобавитьЗначение(Данные, "priceDeviationPercent", ПараметрыЗапроса.ОтклонениеЦены);
	ДобавитьЗначение(Данные, "maxShippingDays",       ПараметрыЗапроса.СрокОтгрузки);
	
	КодВалюты = ТорговыеПредложенияПовтИсп.КодВалюты(ПараметрыЗапроса.Валюта);
	
	МассивТоваровЗапроса = Новый Массив;
	Для каждого СтрокаТовары Из ПараметрыЗапроса.Товары Цикл
		
		ЗапросТовары = Новый Структура;
		ДобавитьЗначение(ЗапросТовары, "query",               СтрокаТовары.Наименование);
		ДобавитьЗначение(ЗапросТовары, "priceCurrencyCode",   КодВалюты);
		ДобавитьЗначение(ЗапросТовары, "demandedUnitsNumber", СтрокаТовары.Количество);
		ДобавитьЗначение(ЗапросТовары, "unitOkeiCode",
			ТорговыеПредложенияПовтИсп.КодЕдиницыИзмерения(СтрокаТовары.ЕдиницаИзмерения));
			
		ДобавитьЗначение(ЗапросТовары, "barCodes", СтрокаТовары.Штрихкоды);
		ДобавитьЗначение(ЗапросТовары, "partNumbers", СтрокаТовары.Артикулы);
		
		НоменклатураСервиса = Новый Структура;
		ДобавитьЗначение(НоменклатураСервиса, "nomenclatureId", СтрокаТовары.ИдентификаторНоменклатурыСервиса);
		ДобавитьЗначение(НоменклатураСервиса, "nomenclatureCharacteristicId", СтрокаТовары.ИдентификаторХарактеристикиСервиса);
		Если ЗначениеЗаполнено(НоменклатураСервиса) Тогда
			ДобавитьЗначение(ЗапросТовары, "productSpecificationIds", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НоменклатураСервиса));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗапросТовары) Тогда
			МассивТоваровЗапроса.Добавить(ЗапросТовары);
		КонецЕсли;
		
	КонецЦикла;
	ДобавитьЗначение(Данные, "productsSpecification", МассивТоваровЗапроса);
	
	// Регионы поиска
	Если ЗначениеЗаполнено(ПараметрыЗапроса.РегионыПоиска) Тогда
		РегионыСамовывоза = Новый Массив;
		РегионыДоставки = Новый Массив;
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.РегионыПоиска Цикл
			РегионОтбора = Новый Структура;
			ДобавитьЗначение(РегионОтбора, "countryOksmCode", ЭлементКоллекции.КодСтраны);
			ДобавитьЗначение(РегионОтбора, "regionFiasCode",  ЭлементКоллекции.Идентификатор);
			Если ЭлементКоллекции.ДляСамовывоза Тогда
				РегионыСамовывоза.Добавить(РегионОтбора);
			КонецЕсли;
			Если ЭлементКоллекции.ДляДоставки Тогда
				РегионыДоставки.Добавить(РегионОтбора);
			КонецЕсли;
		КонецЦикла;
		ДобавитьЗначение(Данные, "deliveryRegionCodes", РегионыДоставки);
		ДобавитьЗначение(Данные, "pickupRegionCodes", РегионыСамовывоза);
	КонецЕсли;
	
	ЗапросСервиса.Данные = БизнесСеть.ЗначениеВJSON(Данные);
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Получение торгового предложения.
//
// Параметры:
//  ПараметрыЗапроса - Структура:
//    * Идентификатор - Строка - идентификатор торгового предложения.
//    * Валюта - Ссылка - валюта для конвертации цены.
// 
// Возвращаемое значение:
//  Структура - данные запроса.
//
Функция ЗапросСервисаПолучениеТорговогоПредложения(ПараметрыЗапроса) Экспорт
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение торгового предложения'");
	ЗапросСервиса.Адрес = СтрШаблон("trade-offers/storefront/%1", ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd.1cbn-rsc.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	
	ДобавитьКолонкиТаблицыОписания(ЗапросСервиса.Обработка, "Search/TradeOfferV1");
	
	ЗапросСервиса.РазрешенныеСостояния.Добавить(404);
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Валюта) Тогда
		КодВалюты = ТорговыеПредложенияПовтИсп.КодВалюты(ПараметрыЗапроса.Валюта);
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "priceCurrencyCode", КодВалюты);
	КонецЕсли;
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Создание номенклатуры поставщика.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры поиска, см. НоваяНоменклатураБизнесСети.
// 
// Возвращаемое значение:
//  Структура - данные запроса.
//
Функция ЗапросСервисаСозданиеОбновлениеНоменклатурыПоставщика(ПараметрыЗапроса, Идентификатор, Отказ)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		ЗапросСервиса.Наименование = НСтр("ru = 'Обновление номенклатуры поставщика'");
		ЗапросСервиса.Адрес = СтрШаблон("supplier-nomenclatures/placement/nomenclatures/%1", Идентификатор);
		ЗапросСервиса.Метод = "PUT";
		ЗапросСервиса.РазрешенныеСостояния.Добавить(204);
		ЗапросСервиса.Ошибки.Вставить(404, Ложь);
	Иначе
		ЗапросСервиса.Наименование = НСтр("ru = 'Создание номенклатуры поставщика'");
		ЗапросСервиса.Адрес = "supplier-nomenclatures/placement/nomenclatures";
		ЗапросСервиса.Метод = "POST";
		ЗапросСервиса.РазрешенныеСостояния.Добавить(201);
		ЗапросСервиса.Обработка = "id";
	КонецЕсли;
	
	ЗапросСервиса.Контент = "application/vnd.1cbn-rsc.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	
	Данные = Новый Структура;
	Продукт = Новый Структура;
	
	// Заполнение на основании данных сервиса 1С:Номенклатура.
	ОписаниеКатегории = Новый Структура;
	ДобавитьЗначение(ОписаниеКатегории, "categoryId",     ПараметрыЗапроса.ИдентификаторКатегории);
	ДобавитьЗначение(ОписаниеКатегории, "manufacturerId", ПараметрыЗапроса.ИдентификаторПроизводителя);
	ДобавитьЗначение(ОписаниеКатегории, "tradeMarkId",    ПараметрыЗапроса.ИдентификаторТорговойМарки);
	
	Свойства = Новый Массив;
	Для каждого ЭлементКоллекции Из ПараметрыЗапроса.Свойства Цикл
		НовоеСвойство = Новый Структура;
		НовоеСвойство.Вставить("id", ЭлементКоллекции.ИдентификаторРеквизита);
		Если ЗначениеЗаполнено(ЭлементКоллекции.ИдентификаторЗначения) Тогда
			НовоеСвойство.Вставить("value", ЭлементКоллекции.ИдентификаторЗначения);
		Иначе
			НовоеСвойство.Вставить("value", Строка(ЭлементКоллекции.Значение));
		КонецЕсли;
		Свойства.Добавить(НовоеСвойство);
	КонецЦикла;
	ДобавитьЗначение(ОписаниеКатегории, "requisiteValues", Свойства);
	
	ДобавитьЗначение(Продукт, "ref1cNomenclature", ОписаниеКатегории, Истина);
	
	// Описание товара.
	Товар = Новый Структура; // supplierNomenclature
	
	НаименованиеНоменклатуры = ПараметрыЗапроса.НаименованиеНоменклатуры
		+ ?(ПустаяСтрока(ПараметрыЗапроса.Характеристика), "", ", " + ПараметрыЗапроса.Характеристика);
	ДобавитьЗначение(Товар, "productName",        НаименованиеНоменклатуры);
	ДобавитьЗначение(Товар, "productDescription", ПараметрыЗапроса.ПодробноеОписание);
	
	ДанныеПроизводителя = Новый Структура;
	ДобавитьЗначение(ДанныеПроизводителя, "tradeMark", ПараметрыЗапроса.ТорговаяМарка);
	ДобавитьЗначение(ДанныеПроизводителя, "name",      ПараметрыЗапроса.Производитель);
	ДобавитьЗначение(Товар, "manufacturer", ДанныеПроизводителя);
	
	ДобавитьЗначение(Товар, "partNumber",      ПараметрыЗапроса.Артикул);
	ДобавитьЗначение(Товар, "baseUnitOkeiCode",
		ТорговыеПредложенияПовтИсп.КодЕдиницыИзмерения(ПараметрыЗапроса.ЕдиницаИзмерения), Истина);
	ДобавитьЗначение(Товар, "barCodes",        ПараметрыЗапроса.Штрихкоды);
	
	ДобавитьЗначение(Продукт, "supplierNomenclature", Товар);
	ДобавитьЗначение(Данные, "product", Продукт, Истина);
	
	ЗапросСервиса.Данные = БизнесСеть.ЗначениеВJSON(Данные);
	ЗапросСервиса.Детализация = ПараметрыЗапроса.НаименованиеНоменклатуры
		+ ?(ПустаяСтрока(ПараметрыЗапроса.ЕдиницаИзмерения), "", " (" + ПараметрыЗапроса.ЕдиницаИзмерения + ")");
		
	Возврат ЗапросСервиса;
	
КонецФункции

// Отправка торгового предложения.
//
// Параметры:
//  ПараметрыЗапроса	 - Структура - см. НовоеТорговоеПредложение.
// 
// Возвращаемое значение:
//  Структура - данные запроса.
//
Функция ЗапросСервисаСозданиеОбновлениеТорговогоПредложения(ПараметрыЗапроса, Идентификатор, Отказ)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		ЗапросСервиса.Наименование = НСтр("ru = 'Обновление торгового предложения'");
		ЗапросСервиса.Адрес = СтрШаблон("trade-offers/placement/offers/%1", Идентификатор);
		ЗапросСервиса.Метод = "PATCH";
		ЗапросСервиса.Контент = "application/merge-patch+json";
		ЗапросСервиса.РазрешенныеСостояния.Добавить(204);
		ЗапросСервиса.Ошибки.Вставить(404, СтрШаблон(НСтр("ru = 'Не найдено торговое предложение в сервисе с идентификатором %1'"),
			Идентификатор));
	Иначе
		ЗапросСервиса.Наименование = НСтр("ru = 'Создание торгового предложения'");
		ЗапросСервиса.Адрес = "trade-offers/placement/offers";
		ЗапросСервиса.Метод = "POST";
		ЗапросСервиса.Контент = "application/json";
		ЗапросСервиса.РазрешенныеСостояния.Добавить(201);
	КонецЕсли;
	
	ЗапросСервиса.Аутентификация = Истина;
	
	Данные = Новый Структура;
	
	ДобавитьЗначение(Данные, "priceListId", ПараметрыЗапроса.ИдентификаторПрайсЛиста, Истина);
	
	Продукт = Новый Структура;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторНоменклатурыСервиса) Тогда
		НоменклатураСервиса = Новый Структура;
		ДобавитьЗначение(НоменклатураСервиса, "productSpecificationId",  ПараметрыЗапроса.ИдентификаторНоменклатурыСервиса);
		ДобавитьЗначение(НоменклатураСервиса, "productCharacteristicId", ПараметрыЗапроса.ИдентификаторХарактеристикиСервиса);
		ДобавитьЗначение(Продукт, "ref1cNomenclature", НоменклатураСервиса);
	Иначе
		НоменклатураПоставщика = Новый Структура;
		ДобавитьЗначение(НоменклатураПоставщика, "productSpecificationId", ПараметрыЗапроса.ИдентификаторНоменклатуры);
		ДобавитьЗначение(Продукт, "refSupplierNomenclature", НоменклатураПоставщика);
	КонецЕсли;
	
	ДобавитьЗначение(Данные, "product", Продукт, Истина);
	
	// Описание
	Описание = Новый Структура;
	
	Заголовок = "" + ПараметрыЗапроса.НаименованиеНоменклатуры
		+ ?(ЗначениеЗаполнено(ПараметрыЗапроса.НаименованиеХарактеристики),
			" ," + ПараметрыЗапроса.НаименованиеХарактеристики, "");
	ДобавитьЗначение(Описание, "title", Заголовок);
	ДобавитьЗначение(Описание, "description", ПараметрыЗапроса.ДополнительноеОписание);
	ДобавитьЗначение(Данные, "offerDescription", Описание);
	
	// Данные о продажах.
	УсловияПродаж = Новый Структура; // termsOfSale
	
	// Упаковка в условиях продаж termsOfSale.
	Упаковка = Новый Структура; // packaging
	ДобавитьЗначение(Упаковка, "description",      ПараметрыЗапроса.НаименованиеУпаковки);
	ДобавитьЗначение(Упаковка, "unitsNumerator",   ПараметрыЗапроса.ЧислительУпаковки, Истина);
	ДобавитьЗначение(Упаковка, "unitsDenominator", ПараметрыЗапроса.ЗнаменательУпаковки, Истина);
	
	ДобавитьЗначение(УсловияПродаж, "packaging", Упаковка, Истина);
	
	МатрицаЦен = Новый Массив; // matrix
	
	Если ПараметрыЗапроса.Цена <> Неопределено Тогда
		НоваяЦена = Новый Структура;
		ДобавитьЗначение(НоваяЦена, "fromPackages", 1);
		ДобавитьЗначение(НоваяЦена, "price", ПараметрыЗапроса.Цена * 100, Истина); // Цена хранится в копейках.
		МатрицаЦен.Добавить(НоваяЦена);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МатрицаЦен) Тогда
		Цена = Новый Структура; // price
		ДобавитьЗначение(Цена, "vat",         ТорговыеПредложенияПовтИсп.СтавкаНДССериализованная(ПараметрыЗапроса.СтавкаНДС), Истина);
		ДобавитьЗначение(Цена, "includesVAT", ПараметрыЗапроса.ЦенаВключаетНДС, Истина);
		ДобавитьЗначение(Цена, "matrix",      МатрицаЦен);
		ДобавитьЗначение(УсловияПродаж, "price", Цена);
	КонецЕсли;
	
	// Ограничение сервиса на минимальный срок поставки.
	Если ПараметрыЗапроса.СрокПоставки = 0 Тогда
		ПараметрыЗапроса.СрокПоставки = 1;
	КонецЕсли;
	
	ДобавитьЗначение(УсловияПродаж, "packageMultiplicity", ПараметрыЗапроса.КратностьУпаковки, Истина);
	ДобавитьЗначение(УсловияПродаж, "maxDaysForShipment",  ПараметрыЗапроса.СрокПоставки,
		?(ПараметрыЗапроса.СрокПоставки = 0, Истина, Ложь));
	
	ДобавитьЗначение(Данные, "termsOfSale", УсловияПродаж, Истина);
	
	Остатки = Новый Структура; // stock
	
	Наличие = Неопределено;
	Если ПараметрыЗапроса.Наличие = 1 Тогда
		Наличие = "LOW";
	ИначеЕсли ПараметрыЗапроса.Наличие = 2 Тогда
		Наличие = "MEDIUM";
	ИначеЕсли ПараметрыЗапроса.Наличие = 3 Тогда
		Наличие = "HIGH";
	КонецЕсли;
	ДобавитьЗначение(Остатки, "stockBalanceSummary.level", Наличие);
	
	Если ЗначениеЗаполнено(Наличие) Тогда 
		ДобавитьЗначение(Данные,  "stock", Остатки);
	Иначе
		ДобавитьЗначение(Данные,  "stock", Неопределено, Истина);
	КонецЕсли;
	
	ДобавитьЗначение(Данные,  "externalCode", ПараметрыЗапроса.ВнутреннийИдентификатор);

	ЗапросСервиса.Данные = БизнесСеть.ЗначениеВJSON(Данные);
	ЗапросСервиса.Детализация = Заголовок
		+ ?(ПустаяСтрока(ПараметрыЗапроса.НаименованиеУпаковки), "", " (" + ПараметрыЗапроса.НаименованиеУпаковки + ")");
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Акутализация проекции данных торгового предложения в сервисе.
//
// Параметры:
//  Идентификатор	 - Строка - Идентификатор торгового предложения.
// 
// Возвращаемое значение:
//  Структура - данные запроса.
//
Функция ЗапросСервисаАктуализацияДанныхТорговогоПредложения(Идентификатор, Отказ)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.Наименование = НСтр("ru = 'Актуализация данных торгового предложения в сервисе'");
	ЗапросСервиса.Адрес = СтрШаблон("trade-offers/placement/offers/%1/refresh", Идентификатор);
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Контент = "application/json";
	ЗапросСервиса.РазрешенныеСостояния.Добавить(204);
	ЗапросСервиса.Ошибки.Вставить(400, НСтр("ru = 'Сервис не может обработать запрос. Подробности в журнале регистрации'"));
			
	ЗапросСервиса.Аутентификация = Истина;
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Получение идентификатора организации.
//
// Параметры:
//  Организация	 - Ссылка - ссылка на организацию.
// 
// Возвращаемое значение:
//  Строка - идентификатор организации в сервисе.
//
Функция ЗапросСервисаПолучениеИдентификатораОрганизации(Организация) Экспорт
	
	ДанныеОрганизации = Новый Структура;
	ДанныеОрганизации.Вставить("Ссылка", Организация);
	ДанныеОрганизации.Вставить("ИНН", "");  // inn
	ДанныеОрганизации.Вставить("КПП", "0"); // kpp (пустое значение "0")
	БизнесСеть.ЗаполнитьРеквизитыОрганизаций(ДанныеОрганизации);
	
	ТекстСообщения = ""; Отказ = Ложь;
	Идентификаторы = БизнесСеть.ИдентификаторыУчастника(ДанныеОрганизации.ИНН, ДанныеОрганизации.КПП, Организация, Отказ, ТекстСообщения);
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено
	КонецЕсли;
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение идентификатора организации'");
	ЗапросСервиса.Адрес = СтрШаблон("subscriber-profile/parties/%1:%2", Идентификаторы.ИНН, Идентификаторы.КПП);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd.1cbn-rsc+json";
	ЗапросСервиса.Аутентификация = Ложь;
	ЗапросСервиса.Обработка = "partyId";
	ЗапросСервиса.Ошибки.Вставить(404, Ложь);
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Получение организации по идентификатору.
//
// Параметры:
//  Идентификатор	 - Строка - идентификатор организации в сервисе.
// 
// Возвращаемое значение:
//  Структура - идентификатор организации в сервисе.
//
Функция ЗапросСервисаПолучениеОрганизацииПоИдентификатору(Идентификатор) Экспорт
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение организации по идентификатору'");
	ЗапросСервиса.Адрес = СтрШаблон("subscriber-profile/parties/%1", Идентификатор);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd.1cbn-rsc+json";
	ЗапросСервиса.Аутентификация = Ложь;
	ЗапросСервиса.Ошибки.Вставить(404, Ложь);
	
	ТаблицаОбработки = Новый ТаблицаЗначений;
	ТаблицаОбработки.Колонки.Добавить("Наименование",, "name");
	ТаблицаОбработки.Колонки.Добавить("ИНН", Типы().Строка, "inn");
	ТаблицаОбработки.Колонки.Добавить("КПП", Типы().Строка, "kpp");
	ЗапросСервиса.Обработка = ТаблицаОбработки;
	
	Возврат ЗапросСервиса;
	
КонецФункции

#КонецОбласти

#Область МетодыСервиса

// Получение количества торговых предложений участника сервиса.
//
// Параметры:
//   ПараметрыКоманды - Структура - параметры вызова.
//     * ИНН - Строка - ИНН участника.
//     * КПП - Строка - КПП участника.
//   Отказ - Булево - признак результата выполнения.
//
// Возвращаемое значение:
//   Число - количество торговых предложений.
//
Функция ПолучитьКоличествоТорговыхПредложений(ПараметрыМетода, Отказ) Экспорт
	
	Валюта = Неопределено;
	КлючНастроекФормы = "Обработка.ТорговыеПредложения.Форма.ПоискПоОтборам/ТекущиеДанные";
	Настройки = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекФормы);
	Если ТипЗнч(Настройки) = Тип("Соответствие") Тогда
		Валюта = Настройки.Получить("Валюта");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		ТорговыеПредложенияПереопределяемый.ПолучитьВалютуРегламентированногоУчета(Валюта);
	КонецЕсли;
	
	ПараметрыЗапроса = НовыеПараметрыПоискаТорговыхПредложенийСОтборами();
	
	ПараметрыЗапроса.РазмерСтраницы = 1;
	ПараметрыЗапроса.Валюта = Валюта;
	
	СтрокаПараметрыКонтрагента = ПараметрыЗапроса.Контрагенты.Добавить();
	Если ЗначениеЗаполнено(ПараметрыМетода.Ссылка) Тогда
		СтрокаПараметрыКонтрагента.Ссылка = ПараметрыМетода.Ссылка;
	Иначе
		СтрокаПараметрыКонтрагента.ИНН = ПараметрыМетода.ИНН;
		СтрокаПараметрыКонтрагента.КПП = ПараметрыМетода.КПП;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПоискТорговыхПредложенийСОтборами(ПараметрыЗапроса);
	ЗапросСервиса.БлокироватьСообщенияОбОшибках = Истина;
	
	Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Результат = Неопределено ИЛИ ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Количество = Результат.Страницы.КоличествоСтрок;

	Возврат Количество;
	
КонецФункции

// Длительная операция получение табличного документа по карточке торгового предложения.
//
Процедура СформироватьПредставлениеТорговогоПредложения(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Валюта = ПараметрыПроцедуры.Валюта;
	Идентификатор = ПараметрыПроцедуры.Идентификатор;
	Результат = ПолучитьТорговоеПредложение(Идентификатор, Валюта, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(Результат) Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка получения данных торгового предложения.'");
		ПодробнаяИнформация = ТекстСообщения + Символы.ПС + СтрШаблон(НСтр("ru = 'Идентификатор %1.'"), Идентификатор);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Чтение торгового предложения.'"),
			ПодробнаяИнформация, ТекстСообщения, "ТорговыеПредложения");
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода = Новый Структура;
	
	ПараметрыВывода.Вставить("ВнутреннийИдентификатор", Результат.ВнутреннийИдентификатор);
	
	ПараметрыВывода.Вставить("Наименование", "");
	Если ЗначениеЗаполнено(Результат.НаименованиеНоменклатуры) Тогда
		ПараметрыВывода.Наименование = Результат.НаименованиеНоменклатуры;
	ИначеЕсли ЗначениеЗаполнено(Результат.Заголовок) Тогда
		ПараметрыВывода.Наименование = Результат.Заголовок;
	ИначеЕсли ЗначениеЗаполнено(Результат.ПредставлениеНоменклатурыСервиса) Тогда
		ПараметрыВывода.Наименование = Результат.ПредставлениеНоменклатурыСервиса
			+ ?(ЗначениеЗаполнено(Результат.ПредставлениеХарактеристикиСервиса),
				", " + Результат.ПредставлениеХарактеристикиСервиса, "");
	Иначе
		ПараметрыВывода.Наименование = НСтр("ru = 'не заполнено'");
	КонецЕсли;
	
	ПараметрыВывода.Вставить("ИдентификаторНоменклатурыСервиса");
	ПараметрыВывода.Вставить("ПредставлениеНоменклатурыСервиса");
	ПараметрыВывода.Вставить("ИдентификаторХарактеристикиСервиса");
	ПараметрыВывода.Вставить("ПредставлениеХарактеристикиСервиса");
	ПараметрыВывода.Вставить("ОписаниеНоменклатурыСервиса", "");
	ПараметрыВывода.Вставить("АдресаКартинок", Новый Массив);
	ПараметрыВывода.Вставить("ДанныеИзображений", Новый СписокЗначений);
	Если ЗначениеЗаполнено(Результат.ИдентификаторНоменклатурыСервиса) Тогда
		ПараметрыВывода.ИдентификаторНоменклатурыСервиса = Результат.ИдентификаторНоменклатурыСервиса;
		ПараметрыВывода.ПредставлениеНоменклатурыСервиса = Результат.ПредставлениеНоменклатурыСервиса;
		ПараметрыВывода.ИдентификаторХарактеристикиСервиса = Результат.ИдентификаторХарактеристикиСервиса;
		ПараметрыВывода.ПредставлениеХарактеристикиСервиса = Результат.ПредставлениеХарактеристикиСервиса;
		ПараметрыВывода.ОписаниеНоменклатурыСервиса = ПараметрыВывода.ПредставлениеНоменклатурыСервиса
			+ ?(ПустаяСтрока(ПараметрыВывода.ПредставлениеХарактеристикиСервиса), "", ", ")
			+ ПараметрыВывода.ПредставлениеХарактеристикиСервиса;
		ПараметрыВывода.АдресаКартинок = Результат.АдресаКартинокСервиса;
		ИдентификаторКатегории = Результат.ИдентификаторКатегорииСервиса;
		Свойства = Результат.СвойстваСервиса;
	Иначе
		ИдентификаторКатегории = Результат.ИдентификаторКатегории;
		Свойства = Результат.Свойства;
	КонецЕсли;
	
	ПараметрыВывода.Вставить("Описание", Результат.Описание);
	
	// Остатки товаров (мало-много).
	ПараметрыВывода.Вставить("Наличие");
	ОстатокМногоМало = Результат.Наличие;
	ПараметрыВывода.Наличие = НСтр("ru = 'По запросу'");
	Если ЗначениеЗаполнено(ОстатокМногоМало) Тогда
		Если ОстатокМногоМало = 1 Тогда
			ПараметрыВывода.Наличие = НСтр("ru = 'Мало'");
		ИначеЕсли ОстатокМногоМало = 2 Тогда
			ПараметрыВывода.Наличие = НСтр("ru = 'Достаточно'");
		ИначеЕсли ОстатокМногоМало = 3 Тогда
			ПараметрыВывода.Наличие = НСтр("ru = 'Много'");
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВывода.Вставить("ИННКонтрагента", Результат.ИННКонтрагента);
	ПараметрыВывода.Вставить("КППКонтрагента", ?(Результат.КППКонтрагента = "0", "", Результат.КППКонтрагента));
	ПараметрыВывода.Вставить("ИдентификаторКонтрагента", Результат.ИдентификаторКонтрагента);
	ПараметрыВывода.Вставить("НаименованиеКонтрагента", Результат.НаименованиеКонтрагента);
	ПараметрыВывода.Вставить("ПредставлениеКонтакта", Результат.ПредставлениеКонтакта);
	ПараметрыВывода.Вставить("Телефон",               Результат.Телефон);
	ПараметрыВывода.Вставить("ЭлектроннаяПочта",      Результат.ЭлектроннаяПочта);
	
	// Получить данные поставщика в сервисе.
	ПараметрыМетода = БизнесСетьКлиентСервер.ОписаниеИдентификацииОрганизацииКонтрагентов();
	ПараметрыМетода.ИНН = Результат.ИННКонтрагента;
	ПараметрыМетода.КПП = Результат.КППКонтрагента;
	ПараметрыКоманды = БизнесСеть.ПараметрыКомандыПолучитьРеквизитыУчастника(ПараметрыМетода, Отказ);
	РеквизитыКонтрагента = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(РеквизитыКонтрагента) Тогда
		ТекстСообщения = НСтр("ru = 'Поставщик не найден.'");
		ПодробнаяИнформация = ТекстСообщения + Символы.ПС + СтрШаблон(НСтр("ru = 'Идентификатор торгового предложения %1.'"),
			Идентификатор) + Символы.ПС + СтрШаблон(НСтр("ru = 'Поставщик ИНН/КПП %1/%2.'"),
				Результат.ИННКонтрагента, Результат.КППКонтрагента);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Чтение торгового предложения.'"),
			ПодробнаяИнформация, ТекстСообщения, "ТорговыеПредложения");
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.Вставить("СайтКонтрагента",             "");
	ПараметрыВывода.Вставить("ТелефонКонтрагента",          "");
	ПараметрыВывода.Вставить("ЭлектроннаяПочтаКонтрагента", "");
	
	Если ЗначениеЗаполнено(РеквизитыКонтрагента) Тогда
		РеквизитыКонтрагента.Свойство("Сайт",    ПараметрыВывода.СайтКонтрагента);
		РеквизитыКонтрагента.Свойство("Телефон", ПараметрыВывода.ТелефонКонтрагента);
		РеквизитыКонтрагента.Свойство("ЭлектроннаяПочта", ПараметрыВывода.ЭлектроннаяПочтаКонтрагента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.Заголовок) Тогда 
		ПараметрыВывода.Вставить("Заголовок", Результат.Заголовок);
	Иначе	
		ПараметрыВывода.Вставить("Заголовок");
		ПараметрыВывода.Заголовок = СтрШаблон(НСтр("ru = '%1, %2'"),
			ПараметрыВывода.Наименование,
			ПараметрыВывода.НаименованиеКонтрагента);
	КонецЕсли;
	ПараметрыВывода.Заголовок = СтрШаблон(НСтр("ru = '%1 (Торговое предложение)'"),
		ПараметрыВывода.Заголовок);
	
		
	ПараметрыВывода.Вставить("Артикул", Строка(Результат.АртикулПроизводителя)
		+ ?(ЗначениеЗаполнено(Результат.АртикулПроизводителя) И ЗначениеЗаполнено(Результат.Артикул), " / ", "")
		+ Результат.Артикул);
		
	// Определение сроков поставки.
	ПараметрыВывода.Вставить("СрокПоставки",           Результат.СрокПоставки);
	ПараметрыВывода.Вставить("ДополнительноеОписание", Результат.ДополнительноеОписание);
	
	ПараметрыВывода.Вставить("Поставка");
	Если ПараметрыВывода.СрокПоставки = Неопределено Тогда
		ПараметрыВывода.Поставка = НСтр("ru = 'По запросу'")
	ИначеЕсли ЗначениеЗаполнено(ПараметрыВывода.СрокПоставки) И ПараметрыВывода.СрокПоставки > 1 Тогда
		ПараметрыВывода.Поставка = СтрШаблон(НСтр("ru = '%1 дн.'"), ПараметрыВывода.СрокПоставки);
	Иначе
		ПараметрыВывода.Поставка = НСтр("ru = 'В наличии'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.КодЕдиницыИзмеренияСервиса) Тогда
		КодЕдиницыИзмерения = Результат.КодЕдиницыИзмеренияСервиса;
	Иначе
		КодЕдиницыИзмерения = Результат.КодЕдиницыИзмерения;
	КонецЕсли;
	
	ПараметрыВывода.Вставить("ПредставлениеЕдиницыИзмерения", ТорговыеПредложенияПовтИсп.ПараметрыЕдиницыИзмеренияПоКоду(КодЕдиницыИзмерения).Представление);
	Если ЗначениеЗаполнено(Результат.УпаковкаНаименование)
			И ВРег(Результат.УпаковкаНаименование) <> ВРег(ПараметрыВывода.ПредставлениеЕдиницыИзмерения) Тогда
		ПараметрыВывода.ПредставлениеЕдиницыИзмерения = Результат.УпаковкаНаименование
			+ " ("
			+ ?(Результат.ЧислительУпаковки > 1 И Результат.ЗнаменательУпаковки <= 1, Строка(Результат.ЧислительУпаковки) + " ", "")
			+ ?(Результат.ЧислительУпаковки > 1 И Результат.ЗнаменательУпаковки > 1, Строка(Результат.ЧислительУпаковки)
				+ "/" + Результат.ЗнаменательУпаковки, "")
			+ ПараметрыВывода.ПредставлениеЕдиницыИзмерения + ")";
	КонецЕсли;
	
	ПараметрыВывода.Вставить("ЦенаПубликации", Результат.ЦенаПубликации);
	ПараметрыВывода.Вставить("Цена",           Результат.Цена);
	РежимПоЗапросу = Не ЗначениеЗаполнено(Результат.Цена);
	
	ПараметрыВывода.Вставить("СтавкаНДС",       Результат.СтавкаНДС);
	ПараметрыВывода.Вставить("ЦенаВключаетНДС", Результат.ЦенаВключаетНДС);
	ПараметрыВывода.Вставить("ИнформацияНДС");
	Если Не РежимПоЗапросу Тогда
		Если ПараметрыВывода.ЦенаВключаетНДС = Неопределено Тогда
			ПараметрыВывода.ИнформацияНДС = Строка(ПараметрыВывода.СтавкаНДС);
		Иначе
			ПараметрыВывода.ИнформацияНДС = СтрШаблон("%1, %2", Строка(ПараметрыВывода.СтавкаНДС),
				?(ПараметрыВывода.ЦенаВключаетНДС, НСтр("ru = 'входит в стоимость'"), НСтр("ru = 'не входит в стоимость'")));
		КонецЕсли;
	КонецЕсли;
	
	// Способ доставки.
	ПараметрыВывода.Вставить("СпособДоставки");
	Если ЗначениеЗаполнено(Результат.АдресаСамовывоза) Тогда
		ПараметрыВывода.СпособДоставки = НСтр("ru = 'Самовывоз'");
	КонецЕсли;
	Если ЗначениеЗаполнено(Результат.РегионыДоставки) Тогда
		Если ПараметрыВывода.СпособДоставки = Неопределено Тогда
			ПараметрыВывода.СпособДоставки = НСтр("ru = 'Доставка'");
		Иначе
			ПараметрыВывода.СпособДоставки = СтрШаблон(НСтр("ru = '%1, доставка'"), ПараметрыВывода.СпособДоставки);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВывода.Вставить("ЦенаСтрокой", "");
	ПараметрыВывода.Вставить("ЦенаПубликацииСтрокой", "");
	ПараметрыВывода.Вставить("ВалютаПубликации");
	Если РежимПоЗапросу Тогда // Цена по запросу
		ПараметрыВывода.ЦенаСтрокой = НСтр("ru = 'по запросу'");
	Иначе
		// Установка цены публикации, если отличается валюта публикации от валюты запроса.
		ПараметрыВывода.ЦенаСтрокой = Формат(ПараметрыВывода.Цена, "ЧЦ=15; ЧДЦ=2")
			+ " " + Валюта;
		Если ТипЗнч(Результат.Валюта) = Тип("Структура") Тогда
			Результат.Валюта.Свойство("Наименование", ПараметрыВывода.ВалютаПубликации);
		Иначе
			ПараметрыВывода.ВалютаПубликации = Результат.Валюта;	
		КонецЕсли;
		
		Если ПараметрыВывода.ВалютаПубликации <> Валюта И ЗначениеЗаполнено(ПараметрыВывода.ВалютаПубликации) Тогда
			ПараметрыВывода.ЦенаПубликацииСтрокой = Формат(Результат.ЦенаПубликации, "ЧЦ=15; ЧДЦ=2")
				+ " " + ПараметрыВывода.ВалютаПубликации;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВывода.Вставить("ИдентификаторКатегории");
	ПараметрыВывода.Вставить("ПредставлениеКатегории");
	Если Не ПустаяСтрока(ИдентификаторКатегории) Тогда
		
		ПараметрыВывода.ИдентификаторКатегории = ИдентификаторКатегории;
		
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("ИдентификаторыКатегории", "[" + ИдентификаторКатегории + "]");
		ПараметрыКоманды = ТорговыеПредложения.ПараметрыКомандыПолучитьЦепочкуКатегорийДоКорневой(ПараметрыМетода, Отказ);
		КатегорииСервиса = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		Если Отказ Тогда
			ТекстСообщения = НСтр("ru = 'Ошибка чтения категории торгового предложения.'");
			ПодробнаяИнформация = ТекстСообщения + Символы.ПС + СтрШаблон(НСтр("ru = 'Идентификатор %1.'"), Идентификатор)
				+ Символы.ПС + СтрШаблон(НСтр("ru = 'Идентификатор категории %1.'"),
					ИдентификаторКатегории);
			ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Чтение торгового предложения.'"),
				ПодробнаяИнформация, ТекстСообщения, "ТорговыеПредложения");
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(КатегорииСервиса) = Тип("Массив") Тогда
			Если ТипЗнч(КатегорииСервиса[0]) = Тип("Массив") И КатегорииСервиса[0].Количество() Тогда
				Для каждого ЗначениеМассива Из КатегорииСервиса[0] Цикл
					ПараметрыВывода.ПредставлениеКатегории = ЗначениеМассива.title
						+ ?(ПустаяСтрока(ПараметрыВывода.ПредставлениеКатегории), "", " \ ") + ПараметрыВывода.ПредставлениеКатегории;
				КонецЦикла;
			Иначе
				ПараметрыВывода.ПредставлениеКатегории = НСтр("ru = 'Все товары'");
				ПараметрыВывода.ИдентификаторКатегории = "";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВывода.Вставить("Свойства");
	Если Свойства <> Неопределено Тогда
		ПараметрыВывода.Свойства = Новый СписокЗначений;
		Для каждого ЭлементКоллекции Из Свойства Цикл
			ПараметрыВывода.Свойства.Добавить(
				?(ЗначениеЗаполнено(ЭлементКоллекции.Представление), ЭлементКоллекции.Представление, ЭлементКоллекции.Значение),
				ЭлементКоллекции.Наименование);
		КонецЦикла;
	КонецЕсли;
	
	ТабличныйДокумент = СформироватьТабличныйДокументТорговогоПредложения(ПараметрыВывода);
	
	РезультатЗадания = Новый Структура;
	РезультатЗадания.Вставить("Реквизиты", ПараметрыВывода);
	РезультатЗадания.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	
	ПоместитьВоВременноеХранилище(РезультатЗадания, АдресРезультата);
	
КонецПроцедуры

// Выполняет регламентное задание по синхронизации торговых предложений с сервисом.
//
Процедура СинхронизацияТорговыхПредложенийОбработчикЗадания() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.СинхронизацияТорговыхПредложений);
	
	СинхронизацияТорговыхПредложений(Неопределено, Неопределено);
	
КонецПроцедуры

// Синхронизация торговых предложений с сервисом.
// Экспортная процедура, запускается по регламентному заданию.
//
// Параметры:
//   ПараметрыПроцедуры - Структура - параметры процедуры, не заполнять.
//   АдресРезультата - УникальныйИдентификатор - адрес результат в хранилище, не заполнять.
//
Процедура СинхронизацияТорговыхПредложений(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияСинхронизации.ТорговоеПредложение.Ссылка КАК Ссылка,
	|	СостоянияСинхронизации.Идентификатор КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА СостоянияСинхронизации.ДействиеСинхронизации = ЗНАЧЕНИЕ(Перечисление.ДействияСинхронизацииТорговыеПредложения.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РежимУдаления,
	|	ВЫБОР
	|		КОГДА СостоянияСинхронизации.Отключено
	|				ИЛИ СостоянияСинхронизации.ТорговоеПредложение.ПометкаУдаления
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отключено,
	|	СостоянияСинхронизации.ДействиеСинхронизации КАК ДействиеСинхронизации,
	|	СостоянияСинхронизации.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ОрганизацииБизнесСеть.Организация ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОрганизацияЗарегистрирована,
	|	СостоянияСинхронизации.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
	|		ПО СостоянияСинхронизации.Организация = ОрганизацииБизнесСеть.Организация";
	
	ЗапросПрайсЛисты = Новый Запрос;
	ЗапросПрайсЛисты.Текст = ТекстЗапроса;
	
	Запрос = Новый Запрос;
	ИнициализироватьПараметрыЗапросаПубликуемыхТоваров(Запрос.Параметры);
	ТорговыеПредложенияПереопределяемый.ИнициализацияЗапросаПубликуемыхТоваров(Запрос);
	
	// Дополнение служебными данными.
	ДополнитьЗапросСлужебнымиТаблицами(Запрос);
	
	Отказ = Ложь;
	
	ВыборкаПрайсЛисты = ЗапросПрайсЛисты.Выполнить().Выбрать();
	Пока ВыборкаПрайсЛисты.Следующий() Цикл
		
		Если ВыборкаПрайсЛисты.Отключено
			И ВыборкаПрайсЛисты.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.Синхронизировано Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.Параметры.ПрайсЛист = ВыборкаПрайсЛисты.Ссылка;
		
		РезультирующиеТаблицы = Новый Структура("ПрайсЛистыСлужебный, УстаревшиеПредложения,
			|ТоварыСлужебный, Контакты, Контрагенты, СвойстваСлужебный, Штрихкоды");
		УдаляемыеТаблицы = Неопределено;
		ПреобразоватьЗапросПоВременнымТаблицам(Запрос, РезультирующиеТаблицы, УдаляемыеТаблицы, Истина);
		РезультатПакетаЗапросов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		
		ТаблицаПрайсЛисты = РезультатПакетаЗапросов[РезультирующиеТаблицы.ПрайсЛистыСлужебный].Выгрузить();
		ПрайсЛист = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаПрайсЛисты[0]);
		
		Контакты = РезультатПакетаЗапросов[РезультирующиеТаблицы.Контакты].Выбрать();
		Если Контакты.Следующий() Тогда
			ПрайсЛист.Вставить("ПредставлениеКонтакта", Контакты.ПредставлениеКонтакта);
			ПрайсЛист.Вставить("Телефон",               Контакты.Телефон);
			ПрайсЛист.Вставить("ЭлектроннаяПочта",      Контакты.ЭлектроннаяПочта);
		КонецЕсли;
		
		ПрайсЛист.Вставить("Контрагенты", РезультатПакетаЗапросов[РезультирующиеТаблицы.Контрагенты].Выгрузить().ВыгрузитьКолонку("Контрагент"));
		ПрайсЛист.Вставить("Товары",      РезультатПакетаЗапросов[РезультирующиеТаблицы.ТоварыСлужебный].Выгрузить());
		ПрайсЛист.Вставить("Свойства",    РезультатПакетаЗапросов[РезультирующиеТаблицы.СвойстваСлужебный].Выгрузить());
		ПрайсЛист.Вставить("Штрихкоды",   РезультатПакетаЗапросов[РезультирующиеТаблицы.Штрихкоды].Выгрузить());
		ПрайсЛист.Вставить("УстаревшиеПредложения", РезультатПакетаЗапросов[РезультирующиеТаблицы.УстаревшиеПредложения].Выгрузить());
		ПрайсЛист.Вставить("Отключено",   ВыборкаПрайсЛисты.Отключено);
		
		Отказ = Ложь;
		
		ТекстОшибки = "";
		Если Не ВыборкаПрайсЛисты.ОрганизацияЗарегистрирована Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Организации %1 не зарегистрирована в сервисе.'"),
				СокрЛП(ВыборкаПрайсЛисты.Организация));
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		КонецЕсли;
		
		Если Не Отказ Тогда
			Если ВыборкаПрайсЛисты.РежимУдаления Тогда
				Если ЗначениеЗаполнено(ПрайсЛист.Идентификатор) Тогда
					УдалитьПрайсЛист(ПрайсЛист, Отказ);
					Если Не Отказ Тогда
						ОчиститьУстаревшиеИдентификаторыТорговыхПредложений(Отказ);
					Иначе
						ТекстОшибки = НСтр("ru = 'Ошибка удаления прайс-листа.'")
					КонецЕсли;
				КонецЕсли;
			Иначе
				// Выгрузка торговых предложений.
				ОбработатьВыгрузкуПрайсЛиста(ПрайсЛист, ТекстОшибки, Отказ);
			КонецЕсли;
		КонецЕсли;
		
		// Сохранение нового состояния.
		МенеджерЗаписи = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТорговоеПредложение = ВыборкаПрайсЛисты.Ссылка;
		МенеджерЗаписи.Организация         = ВыборкаПрайсЛисты.Организация;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Удаление Тогда
			Если Не Отказ И МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Удалить();
			Иначе
				МенеджерЗаписи.Состояние         = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ОшибкаСинхронизации;
				МенеджерЗаписи.ДатаСинхронизации = ТекущаяДатаСеанса();
				МенеджерЗаписи.ОписаниеОшибки    = ТекстОшибки;
				МенеджерЗаписи.Записать();
			КонецЕсли;
		ИначеЕсли ВыборкаПрайсЛисты.Отключено И МенеджерЗаписи.Отключено
			И МенеджерЗаписи.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.Синхронизировано Тогда
			Продолжить;
		Иначе
			МенеджерЗаписи.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.ПустаяСсылка();
			МенеджерЗаписи.ДатаСинхронизации = ТекущаяДатаСеанса();
			Если Не Отказ Тогда
				МенеджерЗаписи.Состояние      = Перечисления.СостоянияСинхронизацииТорговыеПредложения.Синхронизировано;
				МенеджерЗаписи.ОписаниеОшибки = "";
			Иначе
				МенеджерЗаписи.Состояние      = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ОшибкаСинхронизации;
				МенеджерЗаписи.ОписаниеОшибки = ТекстОшибки;
			КонецЕсли;
			МенеджерЗаписи.Идентификатор = ПрайсЛист.Идентификатор;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получение внешних прайс-листов в фоне.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. НовыеПараметрыПолученияПрайсЛистов.
//  АдресРезультата	 - Строка - адрес временного хранилища сохранения результата выполнения.
//
Процедура ПолучитьВнешниеПрайсЛисты(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	// Получение всех зарегистрированных организаций.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОрганизацииБизнесСеть.Идентификатор КАК ИдентификаторОрганизации,
	|	СостоянияСинхронизацииТорговыеПредложения.Идентификатор КАК ИдентификаторПрайсЛиста,
	|	ОрганизацииБизнесСеть.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
	|		ПО ОрганизацииБизнесСеть.Организация = СостоянияСинхронизацииТорговыеПредложения.Организация";
	
	УстановитьПривилегированныйРежим(Истина);
	Идентификаторы = Запрос.Выполнить().Выгрузить();
	
	// Получение всех прайс-листов абонента.
	Если Не ЗначениеЗаполнено(ПараметрыЗапроса) Тогда
		ПараметрыЗапроса = НовыеПараметрыПолученияПрайсЛистов();
		ПараметрыЗапроса.РазмерСтраницы = 1000;
	КонецЕсли;
	ЗапросСервиса = ЗапросСервисаПолучениеПрайсЛистов(ПараметрыЗапроса);
	Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	Если Отказ Или Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Идентификатор");
	Таблица.Колонки.Добавить("ИдентификаторОрганизации");
	Таблица.Колонки.Добавить("Организация");
	Таблица.Колонки.Добавить("Наименование");
	Таблица.Колонки.Добавить("ДатаНачала");
	Таблица.Колонки.Добавить("ДатаОкончания");
	Таблица.Колонки.Добавить("КонтактноеЛицо");
	Таблица.Колонки.Добавить("Телефон");
	Таблица.Колонки.Добавить("ЭлектроннаяПочта");

	Для каждого ЭлементКоллекции Из Результат.Список Цикл
		
		// Пропуск прайс-листов организаций, не зарегистрированных в информационной базе.
		ИдентификаторОрганизации = Идентификаторы.Найти(ЭлементКоллекции.ИдентификаторОрганизации, "ИдентификаторОрганизации");
		Если ИдентификаторОрганизации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Пропуск прайс-листов, опубликованных в информационной базе.
		Если Идентификаторы.Найти(ЭлементКоллекции.Идентификатор, "ИдентификаторПрайсЛиста") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Идентификатор    = ЭлементКоллекции.Идентификатор;
		НоваяСтрока.ИдентификаторОрганизации = ЭлементКоллекции.ИдентификаторОрганизации;
		НоваяСтрока.Организация      = ИдентификаторОрганизации.Организация;
		НоваяСтрока.Наименование     = ЭлементКоллекции.Наименование;
		НоваяСтрока.ДатаНачала       = ЭлементКоллекции.ДатаНачала;
		НоваяСтрока.ДатаОкончания    = ЭлементКоллекции.ДатаОкончания;
		НоваяСтрока.КонтактноеЛицо   = ЭлементКоллекции.КонтактноеЛицо;
		НоваяСтрока.Телефон          = ЭлементКоллекции.Телефон;
		НоваяСтрока.ЭлектроннаяПочта = ЭлементКоллекции.ЭлектроннаяПочта;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Таблица, АдресРезультата);
	
КонецПроцедуры

// Формирование табличного документа представления торгового предложения.
//
// Параметры:
//  ПараметрыВывода	 - Структура - параметры макета вывода торгового предложения,
//    см.Обработки.ТорговыеПредложения.ПФ_MXL_КарточкаТорговогоПредложения.
// 
// Возвращаемое значение:
//  ТабличныйДокумент - представление торгового предложения.
//
Функция СформироватьТабличныйДокументТорговогоПредложения(ПараметрыВывода)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Макет = Обработки.ТорговыеПредложения.ПолучитьМакет("ПФ_MXL_КарточкаТорговогоПредложения");
	
	// Область Шапка.
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(Шапка.Параметры, ПараметрыВывода);
	ЭлектронноеВзаимодействиеСлужебный.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, Шапка, "Шапка");
	
	Если ЗначениеЗаполнено(ПараметрыВывода.ОписаниеНоменклатурыСервиса) Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
			МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
			Если МодульРаботаСНоменклатурой.ДоступнаФункциональностьПодсистемы() Тогда
				// Область НоменклатураСервиса.
				ОбластьНоменклатураСервиса = Макет.ПолучитьОбласть("НоменклатураСервиса");
				ЗаполнитьЗначенияСвойств(ОбластьНоменклатураСервиса.Параметры, ПараметрыВывода);
				ЭлектронноеВзаимодействиеСлужебный.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент,
					ОбластьНоменклатураСервиса, "НоменклатураСервиса");
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	ВысотаВставки = ТабличныйДокумент.ВысотаТаблицы;
	
	// Область Цена (левая колонка).
	ОбластьЦена = Макет.ПолучитьОбласть("Цена|Лево");
	ЗаполнитьЗначенияСвойств(ОбластьЦена.Параметры, ПараметрыВывода);
	ЭлектронноеВзаимодействиеСлужебный.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьЦена, "Цена");
	
	// Область ЦенаПубликации.
	Если ЗначениеЗаполнено(ПараметрыВывода.ЦенаПубликацииСтрокой) Тогда
		ОбластьЦенаПубликации = Макет.ПолучитьОбласть("ЦенаПубликации|Лево");
		ЗаполнитьЗначенияСвойств(ОбластьЦенаПубликации.Параметры, ПараметрыВывода);
		ЭлектронноеВзаимодействиеСлужебный.ВывестиОбластьВТабличныйДокумент(
			ТабличныйДокумент, ОбластьЦенаПубликации, "ЦенаПубликации");
	КонецЕсли;
	
	// Область Условия.
	ОбластьУсловия = Макет.ПолучитьОбласть("Условия|Лево");
	ЗаполнитьЗначенияСвойств(ОбластьУсловия.Параметры, ПараметрыВывода);
	ЭлектронноеВзаимодействиеСлужебный.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьУсловия, "Условия");
	
	// Область Описание.
	Если ЗначениеЗаполнено(ПараметрыВывода.ДополнительноеОписание) Тогда
		ОбластьОписание = Макет.ПолучитьОбласть("Описание|Лево");
		ЗаполнитьЗначенияСвойств(ОбластьОписание.Параметры, ПараметрыВывода);
		ЭлектронноеВзаимодействиеСлужебный.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьОписание, "Описание");
	КонецЕсли;
	
	// Область Поставщик (правая колонка).
	ОбластьПраво = Макет.ПолучитьОбласть("Контрагент|Лево");
	ЗаполнитьЗначенияСвойств(ОбластьПраво.Параметры, ПараметрыВывода);
	ОбластьВставки = ТабличныйДокумент.Область(ВысотаВставки + 1, ОбластьЦена.ШиринаТаблицы + 1,
		ВысотаВставки + ОбластьПраво.ВысотаТаблицы + 1, ОбластьЦена.ШиринаТаблицы + ОбластьПраво.ШиринаТаблицы + 1);
	ЭлектронноеВзаимодействиеСлужебный.ВставитьОбластьВТабличныйДокумент(
		ТабличныйДокумент, ОбластьПраво, "Контрагент",, ОбластьВставки);
		
	Если Не ЗначениеЗаполнено(ОбластьПраво.Параметры.ТелефонКонтрагента) Тогда 
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Области.ОбластьТелефонКонтрагента,
			ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(ОбластьПраво.Параметры.ЭлектроннаяПочтаКонтрагента) Тогда 
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Области.ОбластьЭлектроннаяПочтаКонтрагента,
			ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(ОбластьПраво.Параметры.СайтКонтрагента) Тогда 
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Области.ОбластьСайтКонтрагента,
			ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли; 

	// Область Картинка.	
	ОбластьКартинка = Макет.ПолучитьОбласть("Картинка");
	ВывестиИзображения(ПараметрыВывода.АдресаКартинок, 
		ОбластьКартинка, ТабличныйДокумент, ПараметрыВывода.ДанныеИзображений);
		
	// Область Свойства.
	Если ПараметрыВывода.Свойства <> Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент,
			Макет.ПолучитьОбласть("СвойстваШапка"), "СвойстваШапка");
		ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
		Для каждого Свойство Из ПараметрыВывода.Свойства Цикл
			СвойстваСтрока = Макет.ПолучитьОбласть("СвойстваСтрока");
			ЗаполнитьЗначенияСвойств(СвойстваСтрока.Параметры, Свойство);
			ЭлектронноеВзаимодействиеСлужебный.ВывестиОбластьВТабличныйДокумент(
				ТабличныйДокумент, СвойстваСтрока, "СвойстваСтрока",, 1);
		КонецЦикла;
		ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
	КонецЕсли;
	
	ТабличныйДокумент.ПоказатьУровеньГруппировокСтрок(0);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Вывод картинки в табличный документ.
//
// Параметры:
//  Изображения			 - Массив из Строка - коллекция URL картинок в сервисе.
//  ОбластьКартинка		 - ОбластьТаблицы - область размещения картинки.
//  ТабличныйДокумент	 - ТабличныйДокумент - таблица вывода картинки.
//  ДанныеИзображений	 - Массив из ДвоичныеДанные - все картинки в двоичных данных.
//
Процедура ВывестиИзображения(Изображения, ОбластьКартинка, ТабличныйДокумент, ДанныеИзображений)
	
	Если Не ЗначениеЗаполнено(Изображения) Тогда
		Возврат;
	КонецЕсли;

	Для каждого ЭлементКоллекции Из Изображения Цикл
		
		ДвоичныеДанныеИзображения = ДвоичныеДанныеПоАдресуURL(ЭлементКоллекции);
		
		Если ДвоичныеДанныеИзображения <> Неопределено Тогда
			ДанныеИзображений.Добавить(ДвоичныеДанныеИзображения);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеИзображений.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьКартинка.Рисунки.ИзображениеПредложения.Картинка = Новый Картинка(ДанныеИзображений[0].Значение);
	
	Если Изображения.Количество() > 1 Тогда
		
		ОбластьКартинка.Области.ЗаголовокИзображения.Текст = 
			СтрШаблон("Изображение (%1/%2)", 1, Изображения.Количество());

	Иначе
		
		ОбластьКартинка.Рисунки.ПредыдущееИзображение.Картинка    = БиблиотекаКартинок.Пустая;
		ОбластьКартинка.Рисунки.ПредыдущееИзображение.Гиперссылка = Ложь;
		ОбластьКартинка.Рисунки.СледующееИзображение.Картинка     = БиблиотекаКартинок.Пустая;
		ОбластьКартинка.Рисунки.СледующееИзображение.Гиперссылка  = Ложь;
		
	КонецЕсли;
		
	ТабличныйДокумент.Вывести(ОбластьКартинка);	
		
КонецПроцедуры

// Создание прайс-листа.
//
// Параметры:
//  ПрайсЛист	 - Структура - параметры прайс-листа.
//  Контрагенты				 - ТаблицаЗначений - контрагенты для публикации.
//  ИдентификаторПрайсЛиста			 - Строка - возвращаемое значение идентификатора прайс-листа.
//  Отказ							 - Булево - результат выполнения метода.
//
Процедура СоздатьОбновитьПрайсЛист(ПрайсЛист, Отказ)
	
	ВнутреннийИдентификатор = Строка(ПрайсЛист.Ссылка.УникальныйИдентификатор());
	
	Если Не ЗначениеЗаполнено(ПрайсЛист.Идентификатор) Тогда
		// Получение прайс-листа по внутреннему идентификатору.
		Результат = ИдентификаторПрайсЛистаПоВнутреннемуИдентификатору(ВнутреннийИдентификатор, Отказ);
		Если Отказ Тогда 
			Возврат
		ИначеЕсли Не ЗначениеЗаполнено(Результат) Тогда
			ПрайсЛист.Идентификатор = Неопределено;
		Иначе
			ПрайсЛист.Идентификатор = Результат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗапроса = НовыеПараметрыСозданияПрайсЛиста(ПрайсЛист.Организация, ВнутреннийИдентификатор);
	ПараметрыЗапроса.НачалоДействия    = ПрайсЛист.ДатаНачалаДействия;
	ПараметрыЗапроса.ОкончаниеДействия = ПрайсЛист.ДатаОкончанияДействия;
	ПараметрыЗапроса.Наименование      = ПрайсЛист.Наименование;
	ПараметрыЗапроса.Валюта            = ПрайсЛист.Валюта;
	ПараметрыЗапроса.Контрагенты       = ПрайсЛист.Контрагенты;
	ПараметрыЗапроса.Ссылка            = ПрайсЛист.Ссылка;
	
	Если ПрайсЛист.Свойство("ПредставлениеКонтакта") Тогда 
		ПараметрыЗапроса.ПредставлениеКонтакта = ПрайсЛист.ПредставлениеКонтакта;
		ПараметрыЗапроса.Телефон           = ПрайсЛист.Телефон;
		ПараметрыЗапроса.ЭлектроннаяПочта  = ПрайсЛист.ЭлектроннаяПочта;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаСозданиеОбновленияПрайсЛиста(ПараметрыЗапроса, ПрайсЛист.Идентификатор, Отказ);
	Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ И Результат = 404 Тогда // Не найден прайс-лист с таким идентификатором 
		
		// Попробуем идентификатор прайс-листа получить по внутреннему идентификатору
		ПрайсЛист.Идентификатор = "";
		Отказ = Ложь;
		ИдентификаторПрайсЛиста = ИдентификаторПрайсЛистаПоВнутреннемуИдентификатору(ВнутреннийИдентификатор, Отказ);
		ЗапросСервиса = ЗапросСервисаСозданиеОбновленияПрайсЛиста(ПараметрыЗапроса, ИдентификаторПрайсЛиста, Отказ); // Если получили идентификатор, то обновим, иначе создадим новый прайс-лист
		Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
		Если ЗначениеЗаполнено(ИдентификаторПрайсЛиста) Тогда
			Результат = ИдентификаторПрайсЛиста;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ И Не ЗначениеЗаполнено(ПрайсЛист.Идентификатор) Тогда
		ПрайсЛист.Идентификатор = Результат;
	КонецЕсли;
	
КонецПроцедуры

// Удаление прайс листа по идентификатору
//
// Параметры:
//  ПрайсЛист	 - Структура - параметры прайс-листа.
//
Процедура УдалитьПрайсЛист(Знач ПрайсЛист, Отказ)
	
	// Получение прайс-листа по идентификатору.
	ПараметрыЗапроса = НовыеПараметрыПолученияПрайсЛистов(ПрайсЛист.Идентификатор);
	ЗапросСервиса = ЗапросСервисаПолучениеПрайсЛистов(ПараметрыЗапроса);
	Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Не Отказ И ЗначениеЗаполнено(Результат) Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			// Удаление торговых предложений прайс-листа в информационной базе.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ТорговыеПредложенияТорговойПлощадки");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("ПрайсЛист", ПрайсЛист.Ссылка);
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ТорговыеПредложенияТорговойПлощадки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПрайсЛист.Установить(ПрайсЛист.Ссылка);
			НаборЗаписей.Записать(Истина);
			
			// Удаление прайс-листа в сервисе.
			ЗапросСервиса = ЗапросСервисаУдалениеПрайсЛиста(ПараметрыЗапроса);
			ВыполнитьЗапрос(ЗапросСервиса, Отказ);
			
			Если Отказ Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			Отказ = Истина;
			ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "БизнесСеть");
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Дополнение запроса служебными таблицами и дополнительными полями.
//
// Параметры:
//  Запрос	 - Запрос - запрос, полученный в методе ТорговыеПредложенияПереопределяемый.ИнициализацияЗапросаПубликуемыхТоваров()
// 
// В тексте запроса определяются временные таблицы возвращаемые в переопределяемом методе.
// Для временных таблиц добавляются служебные поля.
//
// Например, таблица ПрайсЛисты (ПрайсЛистыСлужебный)
//  * Идентификатор - Строка - идентификатор прайс-листа в сервисе.
//  * ПубликоватьЦены - Булево - признак публикации цен.
//  * ПубликоватьСрокиПоставки - Булево - признак публикации сроков поставки.
//  * ПубликоватьОстатки - Булево - признак публикации остатков (наличия товаров на складе).
//
Процедура ДополнитьЗапросСлужебнымиТаблицами(Запрос)
	
	// Новый текст запроса
	ТекстЗапросаСлужебный =
	"ВЫБРАТЬ
	|	ПрайсЛисты.Ссылка КАК Ссылка,
	|	ПрайсЛисты.Наименование КАК Наименование,
	|	ПрайсЛисты.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	ПрайсЛисты.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	ПрайсЛисты.Организация КАК Организация,
	|	ПрайсЛисты.Валюта КАК Валюта,
	|	СостоянияСинхронизацииТорговыеПредложения.Идентификатор КАК Идентификатор,
	|	СостоянияСинхронизацииТорговыеПредложения.ПубликоватьЦены КАК ПубликоватьЦены,
	|	СостоянияСинхронизацииТорговыеПредложения.ПубликоватьСрокиПоставки КАК ПубликоватьСрокиПоставки,
	|	СостоянияСинхронизацииТорговыеПредложения.ПубликоватьОстатки КАК ПубликоватьОстатки,
	|	СостоянияСинхронизацииТорговыеПредложения.ДополнительноеОписание КАК ДополнительноеОписание
	|ПОМЕСТИТЬ ПрайсЛистыСлужебный
	|ИЗ
	|	ПрайсЛисты КАК ПрайсЛисты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
	|		ПО ПрайсЛисты.Ссылка = СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ПрайсЛист КАК ПрайсЛист,
	|	ПрайсЛистыСлужебный.Организация КАК Организация,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	Товары.Артикул КАК Артикул,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.НаименованиеУпаковки КАК НаименованиеУпаковки,
	|	Товары.ЧислительУпаковки КАК ЧислительУпаковки,
	|	Товары.ЗнаменательУпаковки КАК ЗнаменательУпаковки,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ПрайсЛистыСлужебный.ПубликоватьЦены
	|			ТОГДА Товары.Цена
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ПрайсЛистыСлужебный.ПубликоватьСрокиПоставки
	|			ТОГДА Товары.СрокПоставки
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СрокПоставки,
	|	ВЫБОР
	|		КОГДА ПрайсЛистыСлужебный.ПубликоватьОстатки
	|			ТОГДА Товары.Наличие
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Наличие,
	|	ЕСТЬNULL(СоответствиеПоНоменклатуре.ОбъектСопоставления, ЕСТЬNULL(СоответствиеПоВидам.ОбъектСопоставления, СоответствиеПоИерархии.ОбъектСопоставления)) КАК ОбъектСопоставления,
	|	ЕСТЬNULL(СоответствиеПоНоменклатуре.ИдентификаторКатегории, ЕСТЬNULL(СоответствиеПоВидам.ИдентификаторКатегории, СоответствиеПоИерархии.ИдентификаторКатегории)) КАК ИдентификаторКатегории,
	|	ЕСТЬNULL(СоответствиеПоНоменклатуре.ПредставлениеКатегории, ЕСТЬNULL(СоответствиеПоВидам.ПредставлениеКатегории, СоответствиеПоИерархии.ПредставлениеКатегории)) КАК КатегорияНаименование,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ПредставлениеНоменклатурыСервиса КАК ПредставлениеНоменклатурыСервиса,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ПредставлениеХарактеристикиСервиса КАК ПредставлениеХарактеристикиСервиса,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторХарактеристикиСервиса КАК ИдентификаторХарактеристикиСервиса,
	|	НоменклатураТорговойПлощадки.Идентификатор КАК ИдентификаторНоменклатуры,
	|	ТорговыеПредложенияТорговойПлощадки.Идентификатор КАК ИдентификаторПредложения,
	|	НоменклатураТорговойПлощадки.Хеш КАК ХешНоменклатуры,
	|	ТорговыеПредложенияТорговойПлощадки.Хеш КАК ХешПредложения,
	|	ТорговыеПредложенияТорговойПлощадки.ХешНоменклатуры КАК ХешНоменклатурыПредложения,
	|	ПрайсЛистыСлужебный.Идентификатор КАК ИдентификаторПрайсЛиста,
	|	ТорговыеПредложенияТорговойПлощадки.Публикуется КАК Публикуется
	|ПОМЕСТИТЬ ТоварыСлужебный
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрайсЛистыСлужебный КАК ПрайсЛистыСлужебный
	|		ПО Товары.ПрайсЛист = ПрайсЛистыСлужебный.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыБизнесСеть КАК СоответствиеПоНоменклатуре
	|		ПО Товары.Номенклатура = СоответствиеПоНоменклатуре.ОбъектСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыБизнесСеть КАК СоответствиеПоВидам
	|		ПО Товары.ВидНоменклатуры = СоответствиеПоВидам.ОбъектСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыБизнесСеть КАК СоответствиеПоИерархии
	|		ПО Товары.Родитель = СоответствиеПоИерархии.ОбъектСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|		ПО (СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = ЗНАЧЕНИЕ(Перечисление.СтатусыСопоставленияРаботаСНоменклатурой.Сопоставлено))
	|			И Товары.Номенклатура = СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура
	|			И (Товары.Характеристика = СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика
	|				ИЛИ (СоответствиеНоменклатурыРаботаСНоменклатурой.РежимЗагрузкиХарактеристик = ЗНАЧЕНИЕ(Перечисление.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.НеЗагружатьХарактеристики)
	|					ИЛИ СоответствиеНоменклатурыРаботаСНоменклатурой.РежимЗагрузкиХарактеристик = ЗНАЧЕНИЕ(Перечисление.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ЗагружатьХарактеристикиКакНоменклатуру)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураТорговойПлощадки КАК НоменклатураТорговойПлощадки
	|		ПО Товары.Номенклатура = НоменклатураТорговойПлощадки.Номенклатура
	|			И Товары.Характеристика = НоменклатураТорговойПлощадки.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
	|		ПО Товары.Номенклатура = ТорговыеПредложенияТорговойПлощадки.Номенклатура
	|			И Товары.Характеристика = ТорговыеПредложенияТорговойПлощадки.Характеристика
	|			И Товары.Упаковка = ТорговыеПредложенияТорговойПлощадки.Упаковка
	|			И (ПрайсЛистыСлужебный.Ссылка = ТорговыеПредложенияТорговойПлощадки.ПрайсЛист)
	|			И (НЕ СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса ЕСТЬ NULL
	|					И СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура = ТорговыеПредложенияТорговойПлощадки.Номенклатура
	|					И СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика = ТорговыеПредложенияТорговойПлощадки.Характеристика
	|					И Товары.Упаковка = ТорговыеПредложенияТорговойПлощадки.Упаковка
	|					И ПрайсЛистыСлужебный.Ссылка = ТорговыеПредложенияТорговойПлощадки.ПрайсЛист
	|				ИЛИ СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса ЕСТЬ NULL
	|					И НоменклатураТорговойПлощадки.Номенклатура = ТорговыеПредложенияТорговойПлощадки.Номенклатура
	|					И НоменклатураТорговойПлощадки.Характеристика = ТорговыеПредложенияТорговойПлощадки.Характеристика)
	|ГДЕ
	|	(Товары.Цена <> 0
	|			ИЛИ НЕ ПрайсЛистыСлужебный.ПубликоватьЦены)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТорговыеПредложенияТорговойПлощадки.ПрайсЛист КАК ПрайсЛист,
	|	ТорговыеПредложенияТорговойПлощадки.Идентификатор КАК ИдентификаторПредложения,
	|	ТорговыеПредложенияТорговойПлощадки.Номенклатура КАК Номенклатура,
	|	ТорговыеПредложенияТорговойПлощадки.Характеристика КАК Характеристика,
	|	ТорговыеПредложенияТорговойПлощадки.Публикуется КАК Публикуется
	|ПОМЕСТИТЬ УстаревшиеПредложения
	|ИЗ
	|	РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрайсЛистыСлужебный КАК ПрайсЛистыСлужебный
	|		ПО ТорговыеПредложенияТорговойПлощадки.ПрайсЛист = ПрайсЛистыСлужебный.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСлужебный КАК ТоварыСлужебный
	|		ПО ТорговыеПредложенияТорговойПлощадки.Номенклатура = ТоварыСлужебный.Номенклатура
	|			И ТорговыеПредложенияТорговойПлощадки.Характеристика = ТоварыСлужебный.Характеристика
	|ГДЕ
	|	ТорговыеПредложенияТорговойПлощадки.Публикуется
	|	И ТоварыСлужебный.Номенклатура ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПрайсЛисты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Свойства.Номенклатура КАК Номенклатура,
	|	Свойства.Характеристика КАК Характеристика,
	|	Свойства.Свойство КАК Свойство,
	|	Свойства.Значение КАК Значение,
	|	ТоварыСлужебный.ОбъектСопоставления КАК ОбъектСопоставления,
	|	СоответствиеРеквизитовБизнесСеть.ПредставлениеРеквизитаКатегории КАК Наименование,
	|	СоответствиеРеквизитовБизнесСеть.ИдентификаторРеквизитаКатегории КАК ИдентификаторРеквизита,
	|	Значения.ИдентификаторЗначенияРеквизитаКатегории КАК ИдентификаторЗначения
	|ПОМЕСТИТЬ СвойстваСлужебный
	|ИЗ
	|	Свойства КАК Свойства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСлужебный КАК ТоварыСлужебный
	|		ПО Свойства.Номенклатура = ТоварыСлужебный.Номенклатура
	|			И Свойства.Характеристика = ТоварыСлужебный.Характеристика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовБизнесСеть КАК СоответствиеРеквизитовБизнесСеть
	|		ПО (ТоварыСлужебный.ОбъектСопоставления = СоответствиеРеквизитовБизнесСеть.ОбъектСопоставления)
	|			И (СоответствиеРеквизитовБизнесСеть.РеквизитОбъекта = Свойства.Свойство)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитовБизнесСеть КАК Значения
	|		ПО (ТоварыСлужебный.ОбъектСопоставления = Значения.ОбъектСопоставления)
	|			И Свойства.Свойство = Значения.РеквизитОбъекта
	|			И Свойства.Значение = Значения.Значение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Свойства";
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + ТекстЗапросаСлужебный;
	
КонецПроцедуры

// Получение идентификатора прайс-листа по внутреннему идентификатору.
//
// Параметры:
//  ВнутреннийИдентификатор	 - Строка - идентификатор прайс-листа в информационной базе.
//  Отказ					 - Булево - результат выполнения.
// 
// Возвращаемое значение:
//  Строка - идентификатор прайс-листа в сервисе.
//
Функция ИдентификаторПрайсЛистаПоВнутреннемуИдентификатору(Знач ВнутреннийИдентификатор, Отказ)
	
	ПараметрыЗапроса = НовыеПараметрыПолученияПрайсЛистов();
	ПараметрыЗапроса.ВнутреннийИдентификатор = ВнутреннийИдентификатор;
	ЗапросСервиса = ЗапросСервисаПолучениеПрайсЛистов(ПараметрыЗапроса);
	Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	Если Отказ ИЛИ Не ЗначениеЗаполнено(Результат) Тогда
		Возврат Неопределено;
	ИначеЕсли Результат.Список.Количество() Тогда
		Возврат Результат.Список[0].Идентификатор;
	КонецЕсли;
	
КонецФункции

// Поиск торговых предложения по отбору.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. НовыеПараметрыПоискаТорговыхПредложенийСОтборами.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПоискТорговыхПредложенийПоОтборуВФоне(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Результат = ПоискТорговыхПредложенийПоОтбору(ПараметрыЗапроса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПредставлениеЕдиницИзмерения(Результат.Список, "КодЕдиницыИзмерения", "ЕдиницаИзмерения");
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Поиск торговых предложений по списку.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. НовыеПараметрыПоискаТорговыхПредложенийПоСписку.
//  АдресРезультата	 - Строка - адрес хранилища с результатом, см. ПоискТорговыхПредложенийПоСписку.
//
Процедура ПоискТорговыхПредложенийПоСпискуВФоне(ПараметрыЗапроса, АдресРезультата) Экспорт
	
	Отказ = Ложь;
	Результат = ПоискТорговыхПредложенийПоСписку(ПараметрыЗапроса, Отказ);
	Если Отказ Или Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);

КонецПроцедуры

#КонецОбласти

#Область Конструкторы

// Параметры запроса получения прайс-листов.
Функция НовыеПараметрыПолученияПрайсЛистов(Идентификатор = "") Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор",           Идентификатор);
	Результат.Вставить("ВнутреннийИдентификатор", "");
	Результат.Вставить("Страница",       0);
	Результат.Вставить("РазмерСтраницы", 0);
	Результат.Вставить("Сортировка",     "");
	
	Возврат Результат;
	
КонецФункции

// Конструктор параметров страниц сервиса.
//
// Параметры:
//  РазмерСтраницы	 - Число - количество записей на одной странице для запроса.
//  Страница		 - Число - номер страницы для запроса.
// 
// Возвращаемое значение:
//  Структура - 
//    * Страница - Число - установленное значение.
//    * РазмерСтраницы - Число - установленное значение.
//    * КоличествоСтрок - Число - количество строк в ответе.
//    * КоличествоСтраниц - Число - количество страниц в ответе.
//
Функция НовыеПараметрыСтраницСервиса(РазмерСтраницы = 0, Страница = 0) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Страница",          Страница); // Номер страницы для запроса.
	Результат.Вставить("РазмерСтраницы",    РазмерСтраницы); // Количество записей на одной странице для запроса.
	Результат.Вставить("КоличествоСтрок",   0); // Количество строк в сервисе.
	Результат.Вставить("КоличествоСтраниц", 0); // Количество страниц в сервисе.
	
	Возврат Результат;
	
КонецФункции

// Описание запроса сервиса.
// 
// Возвращаемое значение:
//  Структура - данные для запроса.
//
Функция НовыйЗапросСервиса()
	
	ЗапросСервиса = Новый Структура;
	ЗапросСервиса.Вставить("Наименование", ""); // Полное наименование метода.
	ЗапросСервиса.Вставить("Адрес",        ""); // Адрес URI метода.
	ЗапросСервиса.Вставить("Метод",        ""); // Метод HTTP соединения, например POST. См. МетодыСоединения().
	ЗапросСервиса.Вставить("Таймаут",      0);  // Длительность ожидания ответа.
	ЗапросСервиса.Вставить("Данные");           // Двоичные данные или строка.
	ЗапросСервиса.Вставить("Аутентификация", Ложь);                // Требуется аутентификация.
	ЗапросСервиса.Вставить("БлокироватьСообщенияОбОшибках", Ложь); // Не выводить сообщения об ошибках.
	ЗапросСервиса.Вставить("Результат");        // Свойство возврата результата, например "path[0].cat".
	ЗапросСервиса.Вставить("Обработка");        // Описание обработки данных результата, см. ОбработатьОтветСервиса.
	ЗапросСервиса.Вставить("ДополнительныеПараметры");          // Дополнительные параметры.
	ЗапросСервиса.Вставить("Ошибки",       Новый Соответствие); // Соответствие ошибок, например: (404, "Не найдено").
	ЗапросСервиса.Вставить("РазрешенныеСостояния", Новый Массив);
	ЗапросСервиса.Вставить("Обработка");        // Строка, ТаблицаЗначений
	ЗапросСервиса.Вставить("Контент", ""); // Описание контента (передается в заголовке).
	ЗапросСервиса.Вставить("РасширятьКонтент", Истина); // Включать "application/json" в заголовок Accept GET-запросов.
	ЗапросСервиса.Вставить("Детализация",  ""); // Дополнительная информация для описания деталей запроса.
	ЗапросСервиса.Вставить("ВозвращатьЗаголовки", Ложь); // Возвращать заголовки ответа.
	ЗапросСервиса.Вставить("ОтветДвоичныеДанные", Ложь); // Получать тело ответа, как двоичные данные.
	
	
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Параметры запроса создания прайс-листа.
Функция НовыеПараметрыСозданияПрайсЛиста(Организация, ВнутреннийИдентификатор) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НачалоДействия",    Дата(1,1,1));  // dateActualFrom
	Результат.Вставить("ОкончаниеДействия", Дата(1,1,1));  // dateActualTo
	Результат.Вставить("Наименование",      "");           // name
	Результат.Вставить("Валюта",            Неопределено); // currencyCode
	Результат.Вставить("ВнутреннийИдентификатор", ВнутреннийИдентификатор);     // externalCode
	Результат.Вставить("Контрагенты",       Новый Массив); // audience
	Результат.Вставить("Организация",       Организация);  // supplierPartyId
	Результат.Вставить("ПредставлениеКонтакта",     "");  // personName
	Результат.Вставить("Телефон",           "");  // phone
	Результат.Вставить("ЭлектроннаяПочта",  "");  // email
	Результат.Вставить("Ссылка"); // Основание прайс-листа.
	
	Возврат Результат;
	
КонецФункции

// Параметры запроса получения товаров.
Функция НовыеПараметрыПолученияТорговыхПредложений(ВнутреннийИдентификатор = "")
	
	Результат = Новый Структура;
	Результат.Вставить("ВнутреннийИдентификатор", КодироватьСтроку(ВнутреннийИдентификатор, СпособКодированияСтроки.КодировкаURL)); // code Внутренний идентификатор
	Результат.Вставить("ВнутреннийИдентификаторПрайсЛиста", ""); // priceListExternalCode
	Результат.Вставить("Идентификатор",  ""); // id
	Результат.Вставить("Страница",       0);  // page
	Результат.Вставить("РазмерСтраницы", 0);  // size
	Результат.Вставить("Сортировка",     ""); // sort
	
	Возврат Результат;
	
КонецФункции

// Параметры запроса поиска торговых предложений с отборами.
Функция НовыеПараметрыПоискаТорговыхПредложенийСОтборами() Экспорт
	
	// productSpecificationIds
	ТаблицаНоменклатурыСервиса = Новый ТаблицаЗначений;
	ТаблицаНоменклатурыСервиса.Колонки.Добавить("ИдентификаторНоменклатуры",
		Новый ОписаниеТипов("Строка")); // nomenclatureId
	ТаблицаНоменклатурыСервиса.Колонки.Добавить("ИдентификаторХарактеристики",
		Новый ОписаниеТипов("Строка")); // nomenclatureCharacteristicId
	
	// categoryRequisitesFilter
	ТаблицаСвойств = Новый ТаблицаЗначений;
	ТаблицаСвойств.Колонки.Добавить("Идентификатор", Типы().Строка); // requisiteId
	ТаблицаСвойств.Колонки.Добавить("Значение",      Типы().Строка); // value
	
	// Таблица контрагентов.
	ТаблицаКонтрагентов = Новый ТаблицаЗначений;
	ТаблицаКонтрагентов.Колонки.Добавить("Ссылка");
	ТаблицаКонтрагентов.Колонки.Добавить("Наименование", Типы().Строка);
	ТаблицаКонтрагентов.Колонки.Добавить("ИНН", Типы().Строка);
	ТаблицаКонтрагентов.Колонки.Добавить("КПП", Типы().Строка);
	
	Результат = Новый Структура;
	
	// Страничный отбор.
	Результат.Вставить("Страница",       0);  // page
	Результат.Вставить("РазмерСтраницы", 0);  // size
	Результат.Вставить("Сортировка",     ""); // sort, например: СортировкаНаименованиеВозрастание,
	// СортировкаНаименованиеУбывание, СортировкаЦенаВозрастание, СортировкаЦенаУбывание
	
	// Отборы для поиска.
	Результат.Вставить("Наименование",  ""); // query
	Результат.Вставить("Производитель", ""); // manufacturerOrBrand
	Результат.Вставить("Валюта");            // priceCurrencyCode (ссылка)
	Результат.Вставить("ЦенаОт",        0);  // priceFrom
	Результат.Вставить("ЦенаДо",        0);  // priceTo
	Результат.Вставить("ЕдиницаИзмерения");  // unitOkeiCode (ссылка)
	Результат.Вставить("Количество", 0);     // demandedUnitsNumber
	Результат.Вставить("Артикулы",    Новый Массив); // partNumbers (строки)
	Результат.Вставить("Штрихкоды",   Новый Массив); // barCodes (строки)
	Результат.Вставить("Контрагенты", ТаблицаКонтрагентов); // suppliers (ссылки контрагенты)
	Результат.Вставить("КодСтраны",   "");
	Результат.Вставить("РегионыПоиска",   Новый Массив);  // deliveryRegionFiasCodes
	Результат.Вставить("ИдентификаторКатегории", "");       // categoryId
	Результат.Вставить("Свойства", ТаблицаСвойств);         // categoryRequisitesFilter
	Результат.Вставить("НоменклатураСервиса", ТаблицаНоменклатурыСервиса); // productSpecificationIds
	Результат.Вставить("ПорядокСортировки",   "");                   // resultSorting
	
	Возврат Результат;
	
КонецФункции

// Параметры открытия формы формирования заказов
//
Функция НовыеПараметрыФормированияЗаказов() Экспорт
	
	Результат = Новый Структура;
	
	// Общие параметры.
	Результат.Вставить("РежимЗапросаЦен", Типы().Булево);
	Результат.Вставить("Организация");
	Результат.Вставить("ЗапросКоммерческихПредложений");
	Результат.Вставить("Валюта");
	Результат.Вставить("ТаблицаТоваров", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияСервиса

// Получение тикета в сервисе, в том числе из кэша.
//
Функция ПолучитьКлючТикета(Соединение, ПараметрыСоединения, ЗапросСервиса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	Тикет = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Пользователи.ТекущийПользователь(), "ТорговыеПредложенияТикет");
	УстановитьПривилегированныйРежим(Ложь);
	
	// Проверка ключа в кэше и его срока действия.
	Если Тикет = Неопределено ИЛИ ТекущаяУниверсальнаяДатаВМиллисекундах() > Тикет.СрокЖизни Тогда
		
		// Подготовка и получение нового ключа.
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("ИдентификаторПрограммы", ПараметрыСоединения.ИдентификаторПрограммы);
		
		Если ЗапросСервиса.Свойство("БлокироватьСообщенияОбОшибках") Тогда
			ПараметрыМетода.Вставить("БлокироватьСообщенияОбОшибках", ЗапросСервиса.БлокироватьСообщенияОбОшибках);
		КонецЕсли;
		
		ЗапросСервисаТикета = ЗапросСервисаПолучениеТикета(ПараметрыМетода, Отказ);
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ЗапросСервиса.Свойство("БлокироватьСообщенияОбОшибках") Тогда
			ЗапросСервисаТикета.Вставить("БлокироватьСообщенияОбОшибках", ЗапросСервиса.БлокироватьСообщенияОбОшибках);
		КонецЕсли;
		
		ПолучитьНовыйТикет(Тикет, Соединение, ПараметрыСоединения, ЗапросСервисаТикета, Отказ);
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Тикет) Тогда
		Возврат Тикет.Ключ;
	КонецЕсли;
	
КонецФункции

// Получение нового временного тикета в сервисе.
//
Функция ПолучитьНовыйТикет(Тикет, Соединение, ПараметрыСоединения, ЗапросСервисаТикета, Отказ)
	
	ИдентификаторПрограммы = Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(ПараметрыСоединения.ИдентификаторПрограммы + ":"));
	
	ТикетИТС = Новый Структура("authToken", ЗапросСервисаТикета.Пароль);
	Попытка
		
		ЗапросСервиса = Новый HTTPЗапрос(ЗапросСервисаТикета.Адрес);
		ЗапросСервиса.Заголовки.Вставить("vnd-1cbn-endpoint-id", ИдентификаторПрограммы);
		ЗапросСервиса.Заголовки.Вставить("Content-Type", ЗапросСервисаТикета.Контент);
		ЗапросСервиса.УстановитьТелоИзСтроки(БизнесСеть.ЗначениеВJSON(ТикетИТС));
		
		Ответ = Соединение.ВызватьHTTPМетод("POST", ЗапросСервиса);
		
	Исключение
		
		Отказ = Истина;
		ВидОперации = НСтр("ru = 'Получение тикета'");
		ТекстОшибки = НСтр("ru = 'Ошибка соединения с сервисом 1С:Бизнес-сеть.'");
		Подробности = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, Подробности, ТекстОшибки, "БизнесСеть");
		
	КонецПопытки;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ЗначениеИзСтрокиJSON(Ответ.ПолучитьТелоКакСтроку());
	
	Если Ответ.КодСостояния <> 200 Тогда
		Отказ = Истина;
		ВидОперации = НСтр("ru = 'Аутентификация'");
		ТекстОшибки = НСтр("ru = 'Ошибка аутентификации в сервисе 1С:Бизнес-сеть.'");
		Подробности = ТекстОшибки + Символы.ПС + "POST " + БизнесСеть.АдресСоединенияURL(Соединение.Сервер,
			Соединение.Порт, ЗапросСервиса.АдресРесурса, Соединение.Защищенное);
		Подробности = Подробности + Символы.ПС + СтрШаблон(НСтр("ru = 'Код ответа: %1.'"), Ответ.КодСостояния);

		Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("detail") Тогда
			Подробности = Подробности + Символы.ПС + Результат.detail;
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, Подробности, ТекстОшибки, "БизнесСеть");
		Возврат Неопределено;
	КонецЕсли;
	
	Тикет = Новый Структура;
	Тикет.Вставить("Ключ", Результат.access_token);
	Тикет.Вставить("СрокЖизни", ТекущаяУниверсальнаяДатаВМиллисекундах() + Результат.expires * 1000);
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Пользователи.ТекущийПользователь(), Тикет, "ТорговыеПредложенияТикет");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Тикет;
	
КонецФункции

// Обработка ответа сервиса.
//
// Параметры:
//  ЗапросСервиса - Структура - данные запроса, см. БизнесСеть.ОписаниеПараметровКомандыСервиса.
//  КодСостояния	 - Строка - код ответа HTTP-соединения.
//  Данные			 - Структура, Строка - возвращаемые данные сервиса.
//  Отказ			 - Булево - результат проверки.
// 
// Возвращаемое значение:
//  Произвольный - возвращаемый результат обработки.
//
Функция ОбработатьОтветСервиса(Соединение, ЗапросСервиса, HTTPОтвет, Данные, Ошибка, Отказ)
	
	// Инициализация возврата ошибки.
	Результат = Неопределено;
	КодСостояния = HTTPОтвет.КодСостояния;
	
	Если ЗапросСервиса.Ошибки.Получить(КодСостояния) = Неопределено
		И КодСостояния <> 200
		И ЗапросСервиса.РазрешенныеСостояния.Найти(КодСостояния) = Неопределено Тогда
		Если КодСостояния >= 500 Тогда
			ЗапросСервиса.Ошибки.Вставить(КодСостояния, НСтр("ru = 'Внутренняя ошибка сервиса'"));
		ИначеЕсли КодСостояния >= 400 Тогда
			ЗапросСервиса.Ошибки.Вставить(КодСостояния, НСтр("ru = 'Ошибка параметров запроса'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗапросСервиса.Ошибки.Получить(КодСостояния) <> Неопределено Тогда
		Возврат ОбработатьОшибкуСервиса(Соединение, ЗапросСервиса, КодСостояния, Данные, Ошибка, Отказ);
	КонецЕсли;
	
	Если ЗапросСервиса.ОтветДвоичныеДанные Тогда
		Результат = Данные;
	Иначе
		
		Если ЗначениеЗаполнено(ЗапросСервиса.Результат) Тогда
			Данные = ПолучитьЗначенияДанныеСтруктурыПоАбсолютномуПути(ЗначениеИзСтрокиJSON(Данные),
			ЗапросСервиса.Результат, Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат КодСостояния;
		КонецЕсли;
		
		Если ЗапросСервиса.Обработка <> Неопределено Тогда
			Результат = ОбработатьОтветСервисаПродолжение(ЗапросСервиса.Обработка, КодСостояния, Данные, Отказ);
		Иначе
			Результат = ЗначениеИзСтрокиJSON(Данные);
		КонецЕсли;
		
		// Для метода POST идентификатор созданного объекта возвращается в заголовке.
		Если ЗапросСервиса.Метод = "POST"
			И Не ЗначениеЗаполнено(Результат) И ЗначениеЗаполнено(HTTPОтвет.Заголовки["Location"]) Тогда
			СсылкаСервиса = HTTPОтвет.Заголовки["Location"];
			Результат = Сред(СсылкаСервиса, СтрНайти(СсылкаСервиса, "/", НаправлениеПоиска.СКонца) +1);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обработка ответа сервиса.
//
// Параметры:
//  ЗапросСервиса - Структура - данные запроса, см. БизнесСеть.ОписаниеПараметровКомандыСервиса.
//  КодСостояния	 - Строка - код ответа HTTP-соединения.
//  Данные			 - Структура, Строка - возвращаемые данные сервиса.
//  Отказ			 - Булево - результат проверки.
// 
// Возвращаемое значение:
//  Произвольный - возвращаемый результат обработки.
//
Функция ОбработатьОтветСервисаПродолжение(Обработка, КодСостояния, Данные, Отказ)
	
	ЗначениеДанных = ЗначениеИзСтрокиJSON(Данные);
	
	Если ТипЗнч(Обработка) = Тип("ТаблицаЗначений") Тогда
		Если ТипЗнч(ЗначениеДанных) = Тип("Массив") Тогда
			Результат = ПреобразоватьКоллекциюПоТаблицеЗначений(ЗначениеДанных, Обработка);
		ИначеЕсли ТипЗнч(ЗначениеДанных) = Тип("Структура") Тогда
			Результат = ПреобразоватьКоллекциюПоТаблицеЗначений(ЗначениеДанных, Обработка);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Обработка) = Тип("Строка") Тогда
		КонвертироватьЗначениеСервиса(ЗначениеДанных, Неопределено, Обработка);
		Результат = ЗначениеДанных;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обработка ошибки сервиса.
//
// Параметры:
//  ЗапросСервиса - Структура - данные запроса, см. БизнесСеть.ОписаниеПараметровКомандыСервиса.
//  КодСостояния	 - Строка - код ответа HTTP-соединения.
//  Данные			 - Структура, Строка - возвращаемые данные сервиса.
//  Отказ			 - Булево - результат проверки.
// 
Функция ОбработатьОшибкуСервиса(Соединение, ЗапросСервиса, КодСостояния, Данные, Ошибка, Отказ)

	ТекстОшибки = ЗапросСервиса.Ошибки.Получить(КодСостояния);
	
	Если ТекстОшибки = Ложь Тогда
		Возврат КодСостояния;
	ИначеЕсли ПустаяСтрока(ТекстОшибки) Тогда
		ТекстОшибки = НСтр("ru = 'Торговые предложения.Ошибка'");
	КонецЕсли;
	
	Отказ = Истина;
	
	Если Не ПустаяСтрока(ЗапросСервиса.Наименование) Тогда
		ТекстОшибки = ТекстОшибки + " (" + ЗапросСервиса.Наименование + ")";
	КонецЕсли;
	
	ОшибкаСервиса = "";
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		
		// Ошибка токена.
		Если Данные.Свойство("error") И Данные.error = "invalid_token" Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Попробуйте выполнить операцию еще раз.'");
			// Сброс токена пользователя.
			УстановитьПривилегированныйРежим(Истина);
			ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Пользователи.ТекущийПользователь(), "ТорговыеПредложенияТикет");
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		Если Данные.Свойство("title") Тогда
			ОшибкаСервиса = Данные.title;
		КонецЕсли;
		Если Данные.Свойство("requestTraceId") Тогда
			ОшибкаСервиса = ?(ПустаяСтрока(ОшибкаСервиса), "", ОшибкаСервиса + Символы.ПС)
				+ НСтр("ru = 'Идентификатор ошибки'") + ": " + Данные.requestTraceId;
		КонецЕсли;
		Если Данные.Свойство("detail") Тогда
			ОшибкаСервиса = ?(ПустаяСтрока(ОшибкаСервиса), "", ОшибкаСервиса + Символы.ПС) + Данные.detail;
		КонецЕсли;
		Если Данные.Свойство("message") Тогда
			ОшибкаСервиса = ?(ПустаяСтрока(ОшибкаСервиса), "", ОшибкаСервиса + Символы.ПС) + Данные.message;
		ИначеЕсли Данные.Свойство("error_description") Тогда
			ОшибкаСервиса = Данные.error_description;
		ИначеЕсли Данные.Свойство("ПодробныйТекстОшибки") Тогда
			ОшибкаСервиса = Данные.ПодробныйТекстОшибки;
		ИначеЕсли Данные.Свойство("validationError") И ТипЗнч(Данные.validationError) = Тип("Массив") Тогда
			ОшибкиВложенные = "";
			Для каждого СтрокаОшибки Из Данные.validationError Цикл
				ОшибкиВложенные = ОшибкиВложенные + ?(ПустаяСтрока(ОшибкиВложенные), "", Символы.ПС)
					+ " - " + СтрокаОшибки.message + " (" + СтрокаОшибки.field + ")";
			КонецЦикла;
			ОшибкаСервиса = ?(ПустаяСтрока(ОшибкаСервиса), "", ОшибкаСервиса + ":" + Символы.ПС) + ОшибкиВложенные;
		КонецЕсли;
	КонецЕсли;
	
	АдресСоединенияURL = БизнесСеть.АдресСоединенияURL(Соединение.Сервер, Соединение.Порт, ЗапросСервиса.Адрес,
		Соединение.Защищенное);
	
	ПодробныйТекстОшибки = ТекстОшибки
		+ Символы.ПС + ЗапросСервиса.Метод + " " +АдресСоединенияURL
		+ ?(КодСостояния > 200, Символы.ПС + НСтр("ru = 'Код ответа:'") + " " + КодСостояния, "")
		+ ?(ОшибкаСервиса = "", "", Символы.ПС + ОшибкаСервиса)
		+ ?(ПустаяСтрока(ЗапросСервиса.Детализация), "", Символы.ПС 
			+ НСтр("ru = 'Детализация'") + ": " + ЗапросСервиса.Детализация);
	
	Если Не (ЗапросСервиса.Свойство("БлокироватьСообщенияОбОшибках")
		И ЗапросСервиса.БлокироватьСообщенияОбОшибках = Истина) Тогда
		Если Пользователи.ЭтоПолноправныйПользователь() Тогда
			ТекстОшибки = ТекстОшибки + БизнесСетьКлиентСервер.ПодробностиВЖурналеРегистрации();
		КонецЕсли;
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Ошибка.Вставить("ТекстОшибки", ТекстОшибки);
	Ошибка.Вставить("ПодробныйТекстОшибки", ПодробныйТекстОшибки);
	
	ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
		ПодробныйТекстОшибки, "ТорговыеПредложения");
	
	Возврат КодСостояния;
	
КонецФункции

// Формирование строки параметров для HTTP запроса в формате "?Параметр1=Значение1&Параметр2...".
//
// Параметры:
//  Адрес	 - Строка - адрес ресурса.
//  Имя		 - Строка - имя параметра.
//  Значение - Строка - значение параметра.
//
Процедура ДобавитьПараметрАдресаHTML(Адрес, Имя, Знач Значение) Экспорт
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Значение = Формат(Значение, "ЧГ=");
	КонецЕсли;
	
	Адрес = Адрес + ?(СтрНайти(Адрес, "?") = 0, "?", "&") + Имя + "=" + Значение;
	
КонецПроцедуры

// Получение двоичных данных по адресу URL, например изображения.
//
// Параметры:
//  АдресURL - Строка - адрес хранения данных.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - полученные данные.
//
Функция ДвоичныеДанныеПоАдресуURL(АдресURL) 
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресURL);
	
	ПараметрыСоединения = Новый Структура("Протокол, ИмяСервера, АдресРесурса, Порт, Таймаут, ЗащищенноеСоединение, Прокси");
	ПараметрыСоединения.Протокол     = СтруктураURI.Схема;
	ПараметрыСоединения.ИмяСервера   = СтруктураURI.Хост;
	ПараметрыСоединения.АдресРесурса = СтруктураURI.ПутьНаСервере;
	ПараметрыСоединения.Порт         = СтруктураURI.Порт;
	ПараметрыСоединения.Таймаут      = 30;
	ПараметрыСоединения.ЗащищенноеСоединение = ПараметрыСоединения.Протокол = "https";
	ПараметрыСоединения.Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(ПараметрыСоединения.Протокол);
	
	ЗащищенноеСоединение = Неопределено;
	Если ПараметрыСоединения.ЗащищенноеСоединение Тогда
		ЗащищенноеСоединение = 
			ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, Новый СертификатыУдостоверяющихЦентровОС);
	КонецЕсли;
	
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.ИмяСервера,
			ПараметрыСоединения.Порт,,,,ПараметрыСоединения.Таймаут, ЗащищенноеСоединение);
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка установки соединения при получении изображения'");
	КонецПопытки;
	
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыСоединения.АдресРесурса);
	Попытка
		
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка получения изображения'");
	КонецПопытки;
	
	Возврат HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
	
КонецФункции

#КонецОбласти

#Область КонвертацияДанных

Процедура ДобавитьКолонкиТаблицыОписания(ТаблицаИсточник, Имя, Префикс = "")
	
	Таблица = Новый ТаблицаЗначений;
	
	Если Имя = "PageParameters" Тогда
		
		Таблица.Колонки.Добавить("Страница",          Типы().Число, "number");
		Таблица.Колонки.Добавить("РазмерСтраницы",    Типы().Число, "size");
		Таблица.Колонки.Добавить("КоличествоСтрок",   Типы().Число, "totalElements");
		Таблица.Колонки.Добавить("КоличествоСтраниц", Типы().Число, "totalPages");
		
	ИначеЕсли Имя = "Placement/TradeOffersPageV1" Тогда
		
		Таблица.Колонки.Добавить("Страницы", Типы().Структура, "page|PageParameters");
		Таблица.Колонки.Добавить("Список",   Типы().Таблица,   "_embedded.items|Placement/TradeOffersPageV1_ListItem");
		
	ИначеЕсли Имя = "Placement/PriceListPageV1" Тогда
		
		Таблица.Колонки.Добавить("Страницы", Типы().Структура, "page|PageParameters");
		Таблица.Колонки.Добавить("Список",   Типы().Таблица,   "_embedded.items|Placement/PriceListV1");
		
	ИначеЕсли Имя = "Placement/PriceListV1" Тогда
		
		Таблица.Колонки.Добавить("Идентификатор", Типы().Строка, "id");
		Таблица.Колонки.Добавить("ДатаНачала",    Типы().Дата,   "dateActualFrom*ДесериализацияДаты");
		Таблица.Колонки.Добавить("ДатаОкончания", Типы().Дата,   "dateActualTo*ДесериализацияДаты");
		Таблица.Колонки.Добавить("Наименование",  Типы().Строка, "name");
		Таблица.Колонки.Добавить("КодВалюты",     Типы().Строка, "currencyCode");
		Таблица.Колонки.Добавить("ВнутреннийИдентификатор", Типы().Строка, "externalCode");
		Таблица.Колонки.Добавить("КонтактноеЛицо",   Типы().Строка, "contacts.personName");
		Таблица.Колонки.Добавить("Телефон",          Типы().Строка, "contacts.phone");
		Таблица.Колонки.Добавить("ЭлектроннаяПочта", Типы().Строка, "contacts.email");
		Таблица.Колонки.Добавить("Контрагенты",      Типы().Строка, "audience*audience");
		Таблица.Колонки.Добавить("ИдентификаторОрганизации", Типы().Строка, "supplierPartyId");
		
	ИначеЕсли Имя = "Placement/TradeOfferV1" Тогда
		
		Таблица.Колонки.Добавить("ИдентификаторПрайса", Типы().Строка, "priceListId");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Placement/TradeOfferDescriptionV1_Product", "product");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Placement/TradeOfferDescriptionV1_TermsOfSale", "termsOfSale");
		Таблица.Колонки.Добавить("Наличие", Типы().Число, "stock.stockBalanceSummary.level*ДесериализацияНаличие"); // LOW, ENOUGH, HIGH // Складские остатки.
		Таблица.Колонки.Добавить("ВнутреннийИдентификатор", Типы().Строка, "externalCode");
		Таблица.Колонки.Добавить("Идентификатор", Типы().Строка, "id");
	
	ИначеЕсли Имя = "Placement/TradeOffersPageV1_ListItem" Тогда
		
		Таблица.Колонки.Добавить("Идентификатор", Типы().Строка,  "id");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Placement/TradeOfferDescriptionV1_Product", "product");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Placement/TradeOfferDescriptionV1_TermsOfSale", "termsOfSale");
		
	ИначеЕсли Имя = "Placement/TradeOfferDescriptionV1_Product" Тогда
		
		ДобавитьКолонкиТаблицыОписания(Таблица, "Placement/TradeOfferDescriptionV1_Product_1CNomenclature",       "ref1cNomenclature");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Placement/TradeOfferDescriptionV1_Product_SupplierNomenclature", "supplierNomenclature");
		
	ИначеЕсли Имя = "Placement/TradeOfferDescriptionV1_Product_1CNomenclature" Тогда
		
		// Данные сервиса 1С:Номенклатура
		Таблица.Колонки.Добавить("ИдентификаторНоменклатурыСервиса",   Типы().Строка,  "productSpecificationId");
		Таблица.Колонки.Добавить("ИдентификаторХарактеристикиСервиса", Типы().Строка,  "productCharacteristicId");
		
	ИначеЕсли Имя = "Placement/TradeOfferDescriptionV1_Product_SupplierNomenclature" Тогда
		
		// Данные контрагента.
		Таблица.Колонки.Добавить("ИдентификаторНоменклатурыПоставщика", Типы().Строка,  "productSpecificationId");
		
	ИначеЕсли Имя = "Placement/TradeOfferDescriptionV1_TermsOfSale" Тогда
		
		// Условия поставки.
		Таблица.Колонки.Добавить("НаименованиеУпаковки", Типы().Строка, "packaging.description");
		Таблица.Колонки.Добавить("ЧислительУпаковки",    Типы().Число,  "packaging.unitsNumerator");
		Таблица.Колонки.Добавить("ЗнаменательУпаковки",  Типы().Число,  "packaging.unitsDenominator");
		Таблица.Колонки.Добавить("СтавкаНДС",         Типы().Ссылка,    "price.vat*ДесериализацияСтавкиНДС");
		Таблица.Колонки.Добавить("Цены",              Типы().Таблица,   "price.matrix|Placement/TradeOfferDescriptionV1_TermsOfSale_PriceMatrixRow");
		Таблица.Колонки.Добавить("КратностьУпаковки", Типы().Число,     "packageMultiplicity");
		Таблица.Колонки.Добавить("ЦенаВключаетНДС",   Типы().Булево,    "includesVAT");
		Таблица.Колонки.Добавить("СрокПоставки",      Типы().Число,     "maxDaysForShipment");
		Таблица.Колонки.Добавить("НеПубликуется",     Типы().Булево,    "temporarilyOutOfSales");
		
	ИначеЕсли Имя = "Placement/TradeOfferDescriptionV1_TermsOfSale_PriceMatrixRow" Тогда
		
		Таблица.Колонки.Добавить("Количество",  Типы().Число,  "fromPackages");
		Таблица.Колонки.Добавить("Цена",        Типы().Число,  "price");
		Таблица.Колонки.Добавить("Комментарий", Типы().Строка, "notes");
		
	ИначеЕсли Имя = "Search/TradeOfferV1" Тогда
			
		Таблица.Колонки.Добавить("Идентификатор", Типы().Строка, "id");
		Таблица.Колонки.Добавить("ВнутреннийИдентификатор", Типы().Строка, "externalCode");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_Product_1CNomenclature", "product.ref1cNomenclature"); // Описание товара в ТП в по схеме 1СН.
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_Product_SupplierSpecificNomenclature", "product.supplierNomenclature"); // Номенклатура контрагента.
		Таблица.Колонки.Добавить("Заголовок", Типы().Строка, "offerDescription.title");
		Таблица.Колонки.Добавить("ДополнительноеОписание", Типы().Строка, "offerDescription.description");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_Supplier", "supplier"); // Контрагент (поставщик).
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_TermsOfSale", "termsOfSale"); // Условия поставки.
		Таблица.Колонки.Добавить("Наличие", Типы().Число, "stock.stockBalanceSummary.level*ДесериализацияНаличие"); // LOW, ENOUGH, HIGH // Складские остатки.
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_DeliveryDescription", "deliveryDescription"); // Условия доставки.
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_RequestedPriceMatrixProjection", "requestedPriceProjection"); // Цены.
		
	ИначеЕсли Имя = "Search/TradeOfferSummaryV1" Тогда
		
		Таблица.Колонки.Добавить("Идентификатор",            Типы().Строка, "id");
		Таблица.Колонки.Добавить("НаименованиеНоменклатуры", Типы().Строка, "productName");
		Таблица.Колонки.Добавить("ИдентификаторКатегории",   Типы().Строка, "ref1cNomenclatureCategoryId");
		Таблица.Колонки.Добавить("НаименованиеКатегории",    Типы().Строка, "ref1cNomenclatureCategoryName");
		Таблица.Колонки.Добавить("КодЕдиницыИзмерения",      Типы().Строка, "baseUnitOkeiCode*ЕдиницаИзмеренияПоКоду");
		Таблица.Колонки.Добавить("СрокПоставки",             Типы().Число,  "maxDaysForShipment");
		Таблица.Колонки.Добавить("КратностьУпаковки",        Типы().Число,  "packageMultiplicity");
		Таблица.Колонки.Добавить("ЧислительУпаковки",        Типы().Число,  "packaging.unitsNumerator");
		Таблица.Колонки.Добавить("ЗнаменательУпаковки",      Типы().Число,  "packaging.unitsDenominator");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_Supplier", "supplier"); // Контрагент (поставщик).
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_RequestedPriceProjection", "priceProjection"); // Цены
		
	ИначеЕсли Имя = "Search/TradeOfferGroupsListV1_Item_Summary" Тогда
		
		Таблица.Колонки.Добавить("Идентификатор",            Типы().Строка, "id");
		Таблица.Колонки.Добавить("НаименованиеНоменклатуры", Типы().Строка, "productName");
		Таблица.Колонки.Добавить("ИдентификаторКатегории",   Типы().Строка, "ref1cNomenclatureCategoryId");
		Таблица.Колонки.Добавить("НаименованиеКатегории",    Типы().Строка, "ref1cNomenclatureCategoryName");
		Таблица.Колонки.Добавить("КодЕдиницыИзмерения",      Типы().Строка, "baseUnitOkeiCode*ЕдиницаИзмеренияПоКоду");
		Таблица.Колонки.Добавить("СрокПоставки",             Типы().Число,  "maxDaysForShipment");
		Таблица.Колонки.Добавить("КратностьУпаковки",        Типы().Число,  "packageMultiplicity");
		Таблица.Колонки.Добавить("ЧислительУпаковки",        Типы().Число,  "packaging.unitsNumerator");
		Таблица.Колонки.Добавить("ЗнаменательУпаковки",      Типы().Число,  "packaging.unitsDenominator");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_Supplier", "supplier"); // Контрагент (поставщик).
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_RequestedPriceProjection", "priceProjection"); // Цены
		
	ИначеЕсли Имя = "Search/TradeOffersListPageV1" Тогда
		
		Таблица.Колонки.Добавить("Страницы", Типы().Структура, "page|PageParameters");
		Таблица.Колонки.Добавить("Список",   Типы().Таблица,   "_embedded.items|Search/TradeOffersListPageV1_Item");
	ИначеЕсли Имя = "Search/TradeOfferV1_PriceMatrix" Тогда
		
		Таблица.Колонки.Добавить("ВалютаПредложения",, "CurrencyCode*ДесериализацияВалюты");
		Таблица.Колонки.Добавить("ЦеныВВалютеПредложения", Типы().Таблица, "matrix|Search/PriceMatrixRow"); // PriceMatrixRow
		
	ИначеЕсли Имя = "Search/TradeOffersListPageV1_Item" Тогда
		
		Таблица.Колонки.Добавить("Идентификатор",            Типы().Строка, "id");
		Таблица.Колонки.Добавить("НаименованиеНоменклатуры", Типы().Строка, "productName");
		Таблица.Колонки.Добавить("Заголовок",                Типы().Строка, "offerTitle");
		Таблица.Колонки.Добавить("ИдентификаторКатегории",   Типы().Строка, "ref1cNomenclatureCategoryId");
		Таблица.Колонки.Добавить("НаименованиеКатегории",    Типы().Строка, "ref1cNomenclatureCategoryName");
		Таблица.Колонки.Добавить("КодЕдиницыИзмерения",      Типы().Строка, "baseUnitOkeiCode");
		Таблица.Колонки.Добавить("АртикулПроизводителя",     Типы().Строка, "productPartNumber");
		Таблица.Колонки.Добавить("АртикулПоставщика",        Типы().Строка, "supplierPartNumber");
		Таблица.Колонки.Добавить("СрокПоставки",             Типы().Число,  "maxDaysForShipment");
		Таблица.Колонки.Добавить("НаименованиеУпаковки",     Типы().Строка, "packaging.description");
		Таблица.Колонки.Добавить("ЧислительУпаковки",        Типы().Число,  "packaging.unitsNumerator");
		Таблица.Колонки.Добавить("ЗнаменательУпаковки",      Типы().Число,  "packaging.unitsDenominator");
		Таблица.Колонки.Добавить("КратностьУпаковки",        Типы().Число,  "packageMultiplicity");
		Таблица.Колонки.Добавить("Наличие",                  Типы().Число,  "stock.stockBalanceSummary.level*ДесериализацияНаличие");
		Таблица.Колонки.Добавить("СтавкаНДС",                Типы().Ссылка, "price.vat*ДесериализацияСтавкиНДС");
		Таблица.Колонки.Добавить("ЦенаВключаетНДС",          Типы().Булево, "price.includesVAT");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_Supplier", "supplier"); // Контрагент (поставщик).
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_RequestedPriceProjection", "priceProjection"); // Цены
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_PriceMatrix", "price"); // Цены
		
	ИначеЕсли Имя = "Search/TradeOfferV1_RequestedPriceProjection" Тогда
		
		Таблица.Колонки.Добавить("Валюта",, "requestedCurrencyCode*ДесериализацияВалюты");
		Таблица.Колонки.Добавить("Цена",   Типы().Число, "price*ДесериализацияЦены");
		
	ИначеЕсли Имя = "Search/TradeOfferV1_Product_1CNomenclature" Тогда
		
		Таблица.Колонки.Добавить("ИдентификаторКатегорииСервиса", Типы().Строка,  "categoryId");
		Таблица.Колонки.Добавить("НаименованиеКатегорииСервиса",  Типы().Строка,  "categoryName");
		Таблица.Колонки.Добавить("ИдентификаторНоменклатурыСервиса",   Типы().Строка, "productSpecificationId");
		Таблица.Колонки.Добавить("ПредставлениеНоменклатурыСервиса",   Типы().Строка, "productName");
		Таблица.Колонки.Добавить("ОписаниеСервиса",                    Типы().Строка, "productDescription");
		Таблица.Колонки.Добавить("ИдентификаторХарактеристикиСервиса", Типы().Строка, "productCharacteristicId");
		Таблица.Колонки.Добавить("ПредставлениеХарактеристикиСервиса", Типы().Строка, "productCharacteristicName");
		Таблица.Колонки.Добавить("ШтрихкодыСервиса",           Типы().Массив,  "productBarCodes");
		Таблица.Колонки.Добавить("АртикулПроизводителя",       Типы().Строка,  "productPartNumber");
		Таблица.Колонки.Добавить("АдресаКартинокСервиса",      Типы().Строка,  "imageUrls");
		Таблица.Колонки.Добавить("КодЕдиницыИзмеренияСервиса", Типы().Строка,  "baseUnitOkeiCode");
		Таблица.Колонки.Добавить("ИдентификаторПроизводителя", Типы().Строка,  "manufacturer.Id");
		Таблица.Колонки.Добавить("НаименованиеПроизводителя",  Типы().Строка,  "manufacturer.name");
		Таблица.Колонки.Добавить("ИдентификаторМаркиСервиса",  Типы().Строка,  "manufacturer.tradeMarkId");
		Таблица.Колонки.Добавить("НаименованиеМаркаСервиса",   Типы().Строка,  "manufacturer.tradeMark");
		Таблица.Колонки.Добавить("СвойстваСервиса",            Типы().Таблица, "requisites|Свойства-Товара");
		
	ИначеЕсли Имя = "Search/TradeOfferV1_Product_SupplierSpecificNomenclature" Тогда
		
		Таблица.Колонки.Добавить("ИдентификаторНоменклатуры", Типы().Строка, "productSpecificationId");
		Таблица.Колонки.Добавить("НаименованиеНоменклатуры",  Типы().Строка, "productName");
		Таблица.Колонки.Добавить("Описание",      Типы().Строка, "productDescription");
		Таблица.Колонки.Добавить("Марка",         Типы().Строка, "manufacturer.tradeMark");
		Таблица.Колонки.Добавить("Производитель", Типы().Строка, "manufacturer.name");
		Таблица.Колонки.Добавить("Артикул",       Типы().Массив, "productPartNumber");
		Таблица.Колонки.Добавить("Штрихкоды",     Типы().Массив, "productBarCodes");
		Таблица.Колонки.Добавить("КодЕдиницыИзмерения", Типы().Строка, "baseUnitOkeiCode");
		Таблица.Колонки.Добавить("ИдентификаторКатегории", Типы().Строка,  "ref1Cn.categoryId");
		Таблица.Колонки.Добавить("НаименованиеКатегории",  Типы().Строка,  "ref1Cn.categoryName");
		Таблица.Колонки.Добавить("Свойства",      Типы().Массив, "ref1Cn.requisites|Свойства-Товара");
		
	ИначеЕсли Имя = "Search/TradeOfferV1_Supplier" Тогда
		
		Таблица.Колонки.Добавить("ИдентификаторКонтрагента",    Типы().Строка, "bnetInternalId");
		Таблица.Колонки.Добавить("ИННКонтрагента",              Типы().Строка, "inn");
		Таблица.Колонки.Добавить("КППКонтрагента",              Типы().Строка, "kpp");
		Таблица.Колонки.Добавить("НаименованиеКонтрагента",     Типы().Строка, "name");
		Таблица.Колонки.Добавить("ПредставлениеКонтакта",   Типы().Строка, "contactPerson.name");
		Таблица.Колонки.Добавить("Телефон",          Типы().Строка, "contactPerson.phone");
		Таблица.Колонки.Добавить("ЭлектроннаяПочта", Типы().Строка, "contactPerson.email");

	ИначеЕсли Имя = "Search/TradeOfferV1_TermsOfSale" Тогда
		
		Таблица.Колонки.Добавить("УпаковкаНаименование", Типы().Строка,  "packaging.description");
		Таблица.Колонки.Добавить("ЧислительУпаковки",    Типы().Число,   "packaging.unitsNumerator");
		Таблица.Колонки.Добавить("ЗнаменательУпаковки",  Типы().Число,   "packaging.unitsDenominator");
		Таблица.Колонки.Добавить("КоличествоЕдиниц",     Типы().Число,   "packaging.units");
		Таблица.Колонки.Добавить("СрокПоставки",         Типы().Число,   "maxDaysForShipment");
		Таблица.Колонки.Добавить("Валюта",               Типы().Ссылка,  "price.currencyCode*ДесериализацияВалюты");
		Таблица.Колонки.Добавить("СтавкаНДС",            Типы().Ссылка,  "price.vat*ДесериализацияСтавкиНДС");
		Таблица.Колонки.Добавить("ЦенаВключаетНДС",      Типы().Булево,  "price.includesVAT");
		Таблица.Колонки.Добавить("Цены",                 Типы().Таблица, "price.matrix|Search/PriceMatrixRow");
		Таблица.Колонки.Добавить("КратностьУпаковки",    Типы().Число,   "packageMultiplicity");
		
	ИначеЕсли Имя = "Search/TradeOfferV1_DeliveryDescription" Тогда
		
		Таблица.Колонки.Добавить("РегионыДоставки",  Типы().Массив, "deliveryRegions*get-TradeOfferV1_DeliveryDescription"); // Список регионов доставки
		Таблица.Колонки.Добавить("АдресаСамовывоза", Типы().Массив, "pickupFrom*get-fias"); // Список адресов самовывоза
		
	ИначеЕсли Имя = "Search/TradeOfferV1_RequestedPriceMatrixProjection" Тогда
		
		Таблица.Колонки.Добавить("ВалютаПоиска",, "requestedCurrencyCode*ДесериализацияВалюты");
		Таблица.Колонки.Добавить("ЦеныПоВалюте", Типы().Таблица, "matrix|Search/PriceMatrixRow"); // PriceMatrixRow
		
	ИначеЕсли Имя = "Search/TradeOfferGroupsListV1" Тогда
		
		Таблица.Колонки.Добавить("Контрагенты", Типы().Таблица, "groups|Search/TradeOfferGroupsListV1-groups");
		Таблица.Колонки.Добавить("Статистика",  Типы().Таблица, "tradeOffersStatisticsByGroup|Search/TradeOfferGroupsListV1_Statistics");
		
	ИначеЕсли Имя = "Search/TradeOfferGroupsListV1-groups" Тогда
		
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_Supplier", "supplier"); // Контрагенты
		Таблица.Колонки.Добавить("НайденныеСтроки", Типы().Таблица, "supplierTradeOffersByNomenclatures|Search/supplierTradeOffersByNomenclatures");
		
	ИначеЕсли Имя = "Search/supplierTradeOffersByNomenclatures" Тогда
		
		Таблица.Колонки.Добавить("НомерСтроки", Типы().Число,   "searchRequestNomenclatureCorrelationIndex");
		Таблица.Колонки.Добавить("Товары",      Типы().Таблица, "tradeOffers|Search/TradeOfferGroupsListV1_Item_Summary");
		
	ИначеЕсли Имя = "Search/PriceMatrixRow" Тогда
		
		Таблица.Колонки.Добавить("Количество",  Типы().Число,  "fromPackages");
		Таблица.Колонки.Добавить("Цена",        Типы().Число,  "price*ДесериализацияЦены");
		Таблица.Колонки.Добавить("Комментарий", Типы().Строка, "notes");
		
	ИначеЕсли Имя = "Search/TradeOfferGroupsListV1_Statistics" Тогда
		
		// Статистика поиска торговых предложений по списку.
		Таблица.Колонки.Добавить("НомерСтроки",             Типы().Число,  "searchRequestNomenclatureCorrelationIndex");
		Таблица.Колонки.Добавить("МинимальнаяЦена",         Типы().Число,  "minPriceProjection.price");
		Таблица.Колонки.Добавить("МинимальнаяЦенаВалюта",   Типы().Ссылка, "minPriceProjection.requestedCurrencyCode*ДесериализацияВалюты");
		Таблица.Колонки.Добавить("МаксимальнаяЦена",        Типы().Число,  "maxPriceProjection.price");
		Таблица.Колонки.Добавить("МаксимальнаяЦенаВалюта",  Типы().Ссылка, "maxPriceProjection.requestedCurrencyCode*ДесериализацияВалюты");
		Таблица.Колонки.Добавить("МинимальныйСрокПоставки", Типы().Число,  "minDaysForShipment");
		Таблица.Колонки.Добавить("МаксимальныйСрокПоставки",Типы().Число,  "maxDaysForShipment");
		Таблица.Колонки.Добавить("КоличествоПредложений",   Типы().Число,  "totalTradeOffers");
		
	ИначеЕсли Имя = "Свойства-Товара" Тогда
		
		// Используется для спецификаций Search и Placement.
		Таблица.Колонки.Добавить("Идентификатор", Типы().Строка, "id");
		Таблица.Колонки.Добавить("Наименование",  Типы().Строка, "name");
		Таблица.Колонки.Добавить("Значение",      Типы().Строка, "value*ДесериализацияЗначенийСвойств");
		Таблица.Колонки.Добавить("Представление", Типы().Строка, "valueName");
		Таблица.Колонки.Добавить("Тип",           Типы().Строка, "valueType");
		
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найдено описание данных сервиса %1'"), Имя);
		
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаИсточник) <> Тип("ТаблицаЗначений") Тогда
		ТаблицаИсточник = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Если Префикс <> "" Тогда
		Префикс = Префикс + ".";
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из Таблица.Колонки Цикл
		ТаблицаИсточник.Колонки.Добавить(ЭлементКоллекции.Имя, ЭлементКоллекции.ТипЗначения, Префикс + ЭлементКоллекции.Заголовок);
	КонецЦикла;
	
КонецПроцедуры

// Преобразовать значение полученное из сервиса.
//
// Параметры:
//  Значение		- Произвольный - данные, полученные из сервиса.
//  Свойство		- Строка - имя свойства, если значением является ТаблицаЗначений.
//  Правило			- Строка - имя обработчика значения.
// 
// Возвращаемое значение:
//  Произвольный - возвращаемое значение разбора.
//
Процедура КонвертироватьЗначениеСервиса(Значение, Свойство, Правило)
	
	Если Правило = "ДесериализацияСтавкиНДС" Тогда
		
		Если ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
			Для каждого ЭлементКоллекции Из Значение Цикл
				Если ЗначениеЗаполнено(ЭлементКоллекции[Свойство]) Тогда
					Если ЭлементКоллекции[Свойство] = "VAT_WITHOUT" Тогда
						СтавкаСтрокой = "БезНДС";
					Иначе
						СтавкаСтрокой = СтрЗаменить(ЭлементКоллекции[Свойство], "VAT_", "НДС");
					КонецЕсли;
					СтавкаНДС = ТорговыеПредложенияПовтИсп.ПолучитьСтавкуНДС(СтавкаСтрокой);
				Иначе
					СтавкаНДС = ТорговыеПредложенияПовтИсп.ПолучитьСтавкуНДС(Неопределено);
				КонецЕсли;
				ЭлементКоллекции[Свойство] = СтавкаНДС;
			КонецЦикла;
		КонецЕсли
		
	ИначеЕсли Правило = "ДесериализацияДаты" Тогда
		
		Если ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
			Для каждого ЭлементКоллекции Из Значение Цикл
				Если ЗначениеЗаполнено(ЭлементКоллекции[Свойство]) Тогда
					ЭлементКоллекции[Свойство] = ДатаИзСтроки(ЭлементКоллекции[Свойство]);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Значение = ДатаИзСтроки(Значение);
		КонецЕсли;
		
	ИначеЕсли Правило = "ДесериализацияВалюты" Тогда
		
		Для каждого ЭлементКоллекции Из Значение Цикл
			Если ЗначениеЗаполнено(ЭлементКоллекции[Свойство]) Тогда
				ЭлементКоллекции[Свойство] = ТорговыеПредложенияПовтИсп.ПолучитьВалюту(ЭлементКоллекции[Свойство], Истина);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Правило = "ДесериализацияЦены" Тогда
		
		Для каждого ЭлементКоллекции Из Значение Цикл
			Если ЗначениеЗаполнено(ЭлементКоллекции[Свойство]) Тогда
				ЭлементКоллекции[Свойство] = ЭлементКоллекции[Свойство]/100;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Правило = "ДесериализацияНаличие" Тогда
		
		Для каждого ЭлементКоллекции Из Значение Цикл
			
			Если Не ЗначениеЗаполнено(ЭлементКоллекции[Свойство]) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеСвойства = ЭлементКоллекции[Свойство];
			Если ЗначениеСвойства = "LOW" Тогда
				НовоеЗначение = 1;
			ИначеЕсли ЗначениеСвойства = "MEDIUM" Тогда
				НовоеЗначение = 2;
			ИначеЕсли ЗначениеСвойства = "HIGH" Тогда
				НовоеЗначение = 3;
			Иначе
				Продолжить;
			КонецЕсли;
			ЭлементКоллекции[Свойство] = НовоеЗначение;
			
		КонецЦикла;
		
	ИначеЕсли Правило = "ДесериализацияЗначенийСвойств" Тогда
		
		Для каждого ЭлементКоллекции Из Значение Цикл
			
			Если Не ЗначениеЗаполнено(ЭлементКоллекции[Свойство]) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементКоллекции.valueType = "number" Тогда
				ЭлементКоллекции[Свойство] = Типы().Число.ПривестиЗначение(ЭлементКоллекции[Свойство]);
			ИначеЕсли ЭлементКоллекции.valueType= "boolean" Тогда
				ЭлементКоллекции[Свойство] = Типы().Булево.ПривестиЗначение(ЭлементКоллекции[Свойство]);
			ИначеЕсли ЭлементКоллекции.valueType = "date" Тогда
				ЭлементКоллекции[Свойство] = ДатаИзСтроки(ЭлементКоллекции[Свойство]);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Правило = "get-TradeOfferV1_DeliveryDescription" Или  Правило = "get-fias" Тогда
		
		// Преобразование не выполняется.
		
	ИначеЕсли ТипЗнч(Правило) = Тип("Строка") Тогда
		
		Если ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
			ВложенныеСвойства = СтрРазделить(Правило, ".");
			Для каждого ЭлементКоллекции Из Значение Цикл
				ЭлементКоллекции[Свойство] = ЗначениеСвойстваСтруктурыВРекурсии(ЭлементКоллекции[Свойство], ВложенныеСвойства);
			КонецЦикла;
		Иначе
			Значение = ЗначениеСвойстваСтруктурыВРекурсии(Значение, СтрРазделить(Правило, "."));
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Ошибка десериализации значения'");
		
	КонецЕсли;
	
КонецПроцедуры

// Получение данных из строки в формате JSON.
//
Функция ЗначениеИзСтрокиJSON(Значение)
	
	Если ТипЗнч(Значение) <> Тип("Строка")
		Или ПустаяСтрока(Значение)
		Или Лев(Значение, 1) = "<" Тогда
		Возврат Значение;
	КонецЕсли;
	
	Результат = Неопределено;
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(Значение);
		Результат = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
	Исключение
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "ТорговыеПредложения");
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Получение структуры данных по абсолютному пути.
// Параметры:
//  Путь - Строка - например, "pathToRoot[0].categories".
//
// Возвращаемое значение:
//  Произвольный - возвращаемые данные.
//
Функция ПолучитьЗначенияДанныеСтруктурыПоАбсолютномуПути(Значение, Путь, Отказ)
	
	СвойстваПути = СтрРазделить(Путь, ".");
	Результат = ЗначениеСвойстваСтруктурыВРекурсии(Значение, СвойстваПути, Отказ);
	Возврат Результат;
	
КонецФункции

// Получить значение данных структуры в рекурсии.
//
// Параметры:
//  Значение - Произвольный - значения обработки.
//  СвойстваПути - Массив из Строка - элементы пути, например pathToRoot[0]; categories.
//  Отказ - Булево - признак ошибки при разборе.
//
Функция ЗначениеСвойстваСтруктурыВРекурсии(Знач Значение, Знач СвойстваПути, Отказ = Ложь)
	
	Свойство = СвойстваПути[0];
	МеткаКоллекции = СтрНайти(Свойство, "[");
	ИндексКоллекции = Неопределено;
	Если МеткаКоллекции <> 0 Тогда
		ИндексКоллекции = Сред(Свойство, МеткаКоллекции + 1);
		ИндексКоллекции = Лев(ИндексКоллекции, СтрДлина(ИндексКоллекции) - 1);
		Свойство = Лев(Свойство, МеткаКоллекции - 1);
	КонецЕсли;
	
	// Проверка свойства структуры.
	Если ТипЗнч(Значение) <> Тип("Структура")
		ИЛИ Значение.Свойство(Свойство) = Ложь Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	// Поиск нового элемента
	Если МеткаКоллекции = 0 Тогда
		Значение = Значение[Свойство];
	Иначе
		Значение = Значение[Свойство][Число(ИндексКоллекции)];
	КонецЕсли;
	
	Если СвойстваПути.Количество() = 1 Тогда
		// Последний элемент пути.
		Возврат Значение;
	Иначе
		СвойстваПути.Удалить(0);
		Возврат ЗначениеСвойстваСтруктурыВРекурсии(Значение, СвойстваПути, Отказ);
	КонецЕсли;
	
КонецФункции

// Преобразование массива структур в таблицу значений, структуры в структуру.
//
// Параметры:
//  Коллекция				 - Массив из Структура - коллекция преобразования.
//  ОписаниеТаблицыЗначений	 - ТаблицаЗначений - описание результирующей таблицы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - результат преобразования.
//
Функция ПреобразоватьКоллекциюПоТаблицеЗначений(Знач Источник, Знач ОписаниеТаблицыЗначений, ТипРезультата = Неопределено)
	
	Если ТипЗнч(Источник) = Тип("Массив") И Источник.Количество() = 0 Тогда
		Возврат ОписаниеТаблицыЗначений;
	ИначеЕсли ТипЗнч(Источник) = Тип("Структура") И НЕ ЗначениеЗаполнено(Источник) Тогда
		ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ОписаниеТаблицыЗначений.Скопировать().Добавить());
	КонецЕсли;
	
	Если ТипРезультата = Неопределено Тогда
		Если ТипЗнч(Источник) = Тип("Массив") Тогда
			ТипРезультата = Тип("ТаблицаЗначений");
		Иначе
			ТипРезультата = ТипЗнч(Источник);
		КонецЕсли;
	КонецЕсли;
	
	РеквизитыЧерезТочку = Новый Соответствие; // Реквизиты, получаемые через точку.
	ПравилаКонвертации  = Новый Соответствие; // Список конвертаций значений "*".
	ВложенныеКоллекции  = Новый Соответствие; // Список вложенных коллекций "|".
	
	// Создание колонок без типов.
	ВременнаяТаблица = Новый ТаблицаЗначений;
	Для каждого КолонкаТаблицыОписания Из ОписаниеТаблицыЗначений.Колонки Цикл
		
		// Поиск правил преобразования.
		ИмяСвойстваИсточника = КолонкаТаблицыОписания.Заголовок;
		
		РазделительПравила = СтрНайти(ИмяСвойстваИсточника, "*");
		Если РазделительПравила <> 0 Тогда
			ИмяСвойстваИсточника = СокрП(Лев(ИмяСвойстваИсточника, РазделительПравила - 1));
			ИмяПравила = Сред(КолонкаТаблицыОписания.Заголовок, РазделительПравила + 1);
		КонецЕсли;
		
		РазделительОписание = СтрНайти(ИмяСвойстваИсточника, "|");
		Если РазделительОписание <> 0 Тогда
			ИмяСвойстваИсточника = СокрП(Лев(ИмяСвойстваИсточника, РазделительОписание - 1));
			ИмяОписания = Сред(КолонкаТаблицыОписания.Заголовок, РазделительОписание + 1);
		КонецЕсли;
		
		НовоеИмяСвойстваИсточника = ИмяСвойстваИсточника;
		
		// Поиск реквизитов в структуре.
		Если СтрНайти(ИмяСвойстваИсточника, ".") Тогда
			НовоеИмяСвойстваИсточника = СтрЗаменить(ИмяСвойстваИсточника, ".", "_");
			РеквизитыЧерезТочку.Вставить(ИмяСвойстваИсточника, НовоеИмяСвойстваИсточника);
		КонецЕсли;
		
		// Добавления правила конвертации.
		Если РазделительПравила <> 0 Тогда
			ПравилаКонвертации.Вставить(НовоеИмяСвойстваИсточника, ИмяПравила);
		КонецЕсли;
		
		// Добавления описание вложенной коллекции.
		Если РазделительОписание <> 0 Тогда
			ВложенныеКоллекции.Вставить(НовоеИмяСвойстваИсточника, ИмяОписания);
		КонецЕсли;
		
		ВременнаяТаблица.Колонки.Добавить(НовоеИмяСвойстваИсточника,, КолонкаТаблицыОписания.Имя);
		
	КонецЦикла;
	
	// Заполнение данных таблицы обработки.
	Если ТипЗнч(Источник) = Тип("Массив") Тогда
		
		// Источником данных является массив структур.
		
		Для каждого СтрокаИсточника Из Источник Цикл
			НоваяСтрока = ВременнаяТаблица.Добавить();
			Если СтрокаИсточника <> Неопределено Тогда // Возможно значение неопределено.
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
			КонецЕсли;
			
			// Заполнение реквизитов в структуре.
			Для каждого Реквизит Из РеквизитыЧерезТочку Цикл
				СоставСтруктурыРеквизита = СтрРазделить(Реквизит.Ключ, ".", Ложь);
				НоваяСтрока[Реквизит.Значение] = ЗначениеСвойстваСтруктурыВРекурсии(СтрокаИсточника, СоставСтруктурыРеквизита);
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("Структура") Тогда
		
		// Источником данных является структура.
		
		НоваяСтрока = ВременнаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
		
		// Заполнение реквизитов в структуре.
		Для каждого Реквизит Из РеквизитыЧерезТочку Цикл
			СоставСтруктурыРеквизита = СтрРазделить(Реквизит.Ключ, ".", Ложь);
			НоваяСтрока[Реквизит.Значение] = ЗначениеСвойстваСтруктурыВРекурсии(Источник, СоставСтруктурыРеквизита);
		КонецЦикла;
		
	КонецЕсли;
	
	// Обработка по правилам преобразования "*".
	Для каждого ЭлементПреобразования Из ПравилаКонвертации Цикл
		КонвертироватьЗначениеСервиса(ВременнаяТаблица, ЭлементПреобразования.Ключ, ЭлементПреобразования.Значение);
	КонецЦикла;
	
	// Обработка по описаниям вложенных коллекций "|".
	Для каждого ЭлементОписания Из ВложенныеКоллекции Цикл
		
		ТаблицаОписанияДанных = Неопределено;
		ДобавитьКолонкиТаблицыОписания(ТаблицаОписанияДанных, ЭлементОписания.Значение);
		Для каждого ЭлементКоллекции Из ВременнаяТаблица Цикл
			ОбработанныеЗначения = ПреобразоватьКоллекциюПоТаблицеЗначений(
				ЭлементКоллекции[ЭлементОписания.Ключ], ТаблицаОписанияДанных);
			ЭлементКоллекции[ЭлементОписания.Ключ] = ОбработанныеЗначения;
		КонецЦикла;
		
	КонецЦикла;
	
	// Обратное переименование колонок.
	Для каждого КолонкаТаблицыОбработки Из ВременнаяТаблица.Колонки Цикл
		КолонкаТаблицыОбработки.Имя = КолонкаТаблицыОбработки.Заголовок;
	КонецЦикла;
	
	// Финальная подготовка результата преобразования.
	Если ТипРезультата = Тип("ТаблицаЗначений") Тогда
		
		// Заполнение таблицы результата.
		Результат = ОписаниеТаблицыЗначений.Скопировать();
		Для каждого СтрокаТаблицы Из ВременнаяТаблица Цикл
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), СтрокаТаблицы);
		КонецЦикла;
		
	ИначеЕсли ТипРезультата = Тип("Структура") И ВременнаяТаблица.Количество() = 1 Тогда
		
		// Заполнение структуры
		Результат = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ВременнаяТаблица[0]);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДатаИзСтроки(СтрокаДанных)
	
	Результат = Дата(1,1,1);
	
	Если Не ЗначениеЗаполнено(СтрокаДанных) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если СтрЧислоВхождений(СтрокаДанных, "-") > 1 Тогда // ожидается формат "YYYY-MM-DDThh:mm:ss" или "YYYY-MM-DD"
		Результат = ПрочитатьДатуJSON(СтрокаДанных, ФорматДатыJSON.ISO);
	Иначе
		
		ЧислоИзСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаДанных);
		
		Если ЧислоИзСтроки <> Неопределено Тогда
			Результат = МестноеВремя(Дата(1970, 1, 1, 0 ,0, 0) + ЧислоИзСтроки / 1000);
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Добавление значение в структуру с учетом обязательности заполнения.
//
// Параметры:
//  Результат			 - Структура - переменная для добавления значения.
//  Поле				 - Строка	 - имя добавляемого поля.
//  Значение			 - Произвольный	 - добавляемое значение
//  ОбязательныйРеквизит - Булево		 - признак обязательности значения.
//
Процедура ДобавитьЗначение(Результат, Знач Поле, Знач Значение, ОбязательныйРеквизит = Ложь)
	
	Если Не ОбязательныйРеквизит И Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
	КонецЕсли;
	
	ПозицияРазделителя = СтрНайти(Поле, ".");
	Если ПозицияРазделителя > 0 Тогда
		МассивПолей = СтрРазделить(Поле, ".");
		ИмяСвойства = МассивПолей[0];
		Результат.Вставить(ИмяСвойства);
		ДобавитьЗначение(Результат[ИмяСвойства], Сред(Поле, ПозицияРазделителя + 1), Значение, ОбязательныйРеквизит);
		Возврат;
	КонецЕсли;
	
	Результат.Вставить(Поле, Значение);
	
КонецПроцедуры

// Преобразование запрос по временным таблицам.
//
// Параметры:
//  Запрос						 - Запрос - запрос для преобразования.
//  РезультирующиеТаблицы		 - Структура - ключи определяют возвращаемые временные таблицы.
//  УдаляемыеТаблицы			 - Структура - ключи определяют удаляемые временные таблицы.
//  ИспользоватьВременныеТаблицы - Булево - если Истина, то помещение во временные таблицы не выполняется.
//
Процедура ПреобразоватьЗапросПоВременнымТаблицам(Запрос, РезультирующиеТаблицы, УдаляемыеТаблицы = Неопределено,
	ИспользоватьВременныеТаблицы = Ложь)
	
	Если УдаляемыеТаблицы = Неопределено Тогда
		УдаляемыеТаблицы = Новый Структура;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	ВременныеТаблицы = ОбщегоНазначения.СкопироватьРекурсивно(РезультирующиеТаблицы);
	СтрокиРезультатов = ОбщегоНазначения.СкопироватьРекурсивно(РезультирующиеТаблицы);
	ИндексыУдаляемыхТаблиц = Новый Массив;
	Для каждого ЭлементКоллекции Из СхемаЗапроса.ПакетЗапросов Цикл
		
		Если ТипЗнч(ЭлементКоллекции) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			Продолжить;
		ИначеЕсли ВременныеТаблицы.Свойство(ЭлементКоллекции.ТаблицаДляПомещения) Тогда
			// Сохранение строки коллекции для определения индекса.
			СтрокиРезультатов[ЭлементКоллекции.ТаблицаДляПомещения] = ЭлементКоллекции;
			// Очистка кэша.
			ВременныеТаблицы.Удалить(ЭлементКоллекции.ТаблицаДляПомещения);
			// Если не требуются временные таблицы очистка признака.
			Если Не ИспользоватьВременныеТаблицы Тогда
				ЭлементКоллекции.ТаблицаДляПомещения = "";
			КонецЕсли;
		Иначе
			Если ВременныеТаблицы.Количество() = 0
				ИЛИ Не ИспользоватьВременныеТаблицы И ПустаяСтрока(ЭлементКоллекции.ТаблицаДляПомещения)
				ИЛИ (Не ПустаяСтрока(ЭлементКоллекции.ТаблицаДляПомещения)
					И УдаляемыеТаблицы.Свойство(ЭлементКоллекции.ТаблицаДляПомещения)) Тогда
				ИндексыУдаляемыхТаблиц.Вставить(0, СхемаЗапроса.ПакетЗапросов.Индекс(ЭлементКоллекции))
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаление неиспользуемых таблиц.
	Для каждого ЭлементКоллекции Из ИндексыУдаляемыхТаблиц Цикл
		СхемаЗапроса.ПакетЗапросов.Удалить(ЭлементКоллекции);
	КонецЦикла;
	
	// Получение индексов результатов для последующего обращения к выборкам.
	Для каждого ЭлементКоллекции Из СтрокиРезультатов Цикл
		РезультирующиеТаблицы[ЭлементКоллекции.Ключ] = СхемаЗапроса.ПакетЗапросов.Индекс(ЭлементКоллекции.Значение);
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
КонецПроцедуры

#КонецОбласти

#Область Идентификаторы

Процедура ОбработатьВыгрузкуПрайсЛиста(Знач ПрайсЛист, ТекстОшибки, Отказ)
	
	Если ПрайсЛист.Товары.Количество() = 0 Тогда
		Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Отсутствует товар для публикации.'");
		Возврат;
	КонецЕсли;
	
	// Создание или обновить прайс-листа.
	СоздатьОбновитьПрайсЛист(ПрайсЛист, Отказ);
	Если Отказ Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка публикации прайс-листа.'");
		Возврат;
	КонецЕсли;
	
	Если ПрайсЛист.Отключено Тогда
		// Снятие с публикации торговых-предложений, так как прайс-лист отключен.
		ОбработатьСнятиеСПубликацииТорговыеПредложения(ПрайсЛист, Отказ);
	Иначе
		// Обработка и публикация торговых предложений.
		ОбработатьТорговыеПредложения(ПрайсЛист, ТекстОшибки, Отказ);
	КонецЕсли;
	Если Отказ Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка публикации торговых предложений.'");
		Возврат;
	КонецЕсли;
	
	// Снятие с публикации непубликуемых торговых предложений
	ОтменитьПубликациюНеактуальныхТорговыхПредложений(ПрайсЛист);
	
	// Очистка устаревших данных торговых предложений.
	ОчиститьУстаревшиеИдентификаторыТорговыхПредложений(Отказ);
	Если Отказ Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка удаления устаревших данных торговых предложений.'");
		Возврат;
	КонецЕсли;
	
	// Очистка устаревших данных номенклатуры.
	ОчиститьУстаревшуюНоменклатуруПоставщика(Отказ);
	Если Отказ Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка удаления устаревшей номенклатуры поставщика.'");
		Возврат;
	КонецЕсли;
	
	// Удаление неиспользуемых торговых предложений в сервисе.
	ОчиститьНеиспользуемыеТорговыеПредложенияВСервисе(ПрайсЛист, Отказ);
	Если Отказ Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка удаления устаревших торговых предложений.'");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСнятиеСПубликацииТорговыеПредложения(ПрайсЛист, Отказ)
	
	Для каждого ЭлементКоллекции Из ПрайсЛист.Товары Цикл
		
		// Снятие с публикации торгового предложения.
		ЗапросСервиса = ЗапросСервисаУдалениеТорговогоПредложения(ЭлементКоллекции.ИдентификаторПредложения, Истина);
		Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
		Если Отказ И Не Результат = 404 Тогда
			Возврат;
		Иначе
			Отказ = Ложь;
		КонецЕсли;
		
		Если ЭлементКоллекции.Публикуется = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		// Снятие с публикации в регистре.
		Запись = РегистрыСведений.ТорговыеПредложенияТорговойПлощадки.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, ЭлементКоллекции);
		Запись.Прочитать();
		Запись.Публикуется = Ложь;
		Запись.Хеш = Неопределено;
		Запись.ДатаИзменения = ТекущаяУниверсальнаяДата();
		Запись.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьТорговыеПредложения(ПрайсЛист, ТекстОшибки, Отказ)
	
	ДатаПубликации = ДатаПубликацииИдентификаторовТорговойПлощадки();
	
	// Получение манифеста изменений торговых предложений в сервисе.
	МанифестИзмененныхПредложений = Новый Массив;
	МанифестУдаленныхПредложений  = Новый Массив;
	ЗагрузитьМанифестТорговыхПредложений(ДатаПубликации, МанифестИзмененныхПредложений, МанифестУдаленныхПредложений);
	
	// Получение манифеста изменений номенклатуры поставщика в сервисе.
	МанифестИзмененийНоменклатуры = Новый Массив;
	МанифестУдаленнойНоменклатуры = Новый Массив;
	ЗагрузитьМанифестНоменклатуры(ДатаПубликации, МанифестИзмененийНоменклатуры, МанифестУдаленнойНоменклатуры);
	
	Для каждого СтрокаТовары Из ПрайсЛист.Товары Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТовары.ИдентификаторНоменклатурыСервиса) Тогда
			
			Обновлено = Ложь;
			ПроверитьНоменклатуруПоставщика(СтрокаТовары, ПрайсЛист.Штрихкоды, ПрайсЛист.Свойства,
				МанифестИзмененийНоменклатуры, Обновлено, ТекстОшибки, Отказ);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
				
			// Установка хеша для всех аналогичных товаров.
			СтрокиПоНоменклатуре = ПрайсЛист.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения",
				СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика, СтрокаТовары.ЕдиницаИзмерения));
			Если СтрокиПоНоменклатуре.Количество() > 1 Тогда
				Для каждого СтрокаОдинаковойНоменклатуры Из СтрокиПоНоменклатуре Цикл
					СтрокаОдинаковойНоменклатуры.ХешНоменклатуры = СтрокаТовары.ХешНоменклатуры;
					СтрокаОдинаковойНоменклатуры.ИдентификаторНоменклатуры = СтрокаТовары.ИдентификаторНоменклатуры;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		ПроверитьТорговоеПредложение(ПрайсЛист, СтрокаТовары, МанифестИзмененныхПредложений, ТекстОшибки, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка, если остались записи в манифестах изменения.
	Для каждого ЭлементКоллекции Из МанифестИзмененийНоменклатуры Цикл
		МанифестУдаленнойНоменклатуры.Добавить(ЭлементКоллекции);
	КонецЦикла;
	Если МанифестУдаленнойНоменклатуры.Количество() Тогда
		ОчиститьИдентификаторыНоменклатуры(МанифестУдаленнойНоменклатуры);
	КонецЕсли;
	
	// Проверка, если остались записи в манифестах изменения.
	Для каждого ЭлементКоллекции Из МанифестИзмененныхПредложений Цикл
		МанифестУдаленныхПредложений.Добавить(ЭлементКоллекции);
	КонецЦикла;
	Если МанифестУдаленныхПредложений.Количество() Тогда
		ОчиститьИдентификаторыТорговыхПредложений(МанифестУдаленныхПредложений);
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ИдентификаторыТорговойПлощадки", "ДатаПубликации",
		ТекущаяУниверсальнаяДата());
	
КонецПроцедуры

Процедура ЗагрузитьМанифестТорговыхПредложений(ДатаПубликации, МанифестИзмененныхПредложений, МанифестУдаленныхПредложений)
	
	// Загрузка манифеста временно не поддерживается в сервисе.
	Возврат;
	
КонецПроцедуры

Процедура ЗагрузитьМанифестНоменклатуры(ДатаПубликации, МанифестИзмененийНоменклатуры, МанифестУдаленнойНоменклатуры)
	
	// Загрузка манифеста временно не поддерживается в сервисе.
	Возврат;
	
КонецПроцедуры

Функция ДатаПубликацииИдентификаторовТорговойПлощадки()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТорговыеПредложенияТорговойПлощадки.ДатаИзменения КАК ДатаИзменения
	|ИЗ
	|	РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаИзменения УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	МинимальнаяДатаПубликации = Дата(1, 1, 1);
	Если Выборка.Следующий() Тогда
		МинимальнаяДатаПубликации = Выборка.ДатаИзменения;
	КонецЕсли;

	ДатаПубликации = Макс(МинимальнаяДатаПубликации,
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ИдентификаторыТорговойПлощадки",
			"ДатаПубликации", Дата(1,1,1)));
	
	Возврат ДатаПубликации;
	
КонецФункции

Процедура ПроверитьНоменклатуруПоставщика(СтрокаТовары, Штрихкоды, Свойства, МанифестИзмененийНоменклатуры,
	Обновлено, ТекстОшибки, Отказ)
	
	ДанныеНоменклатуры = НоваяНоменклатураПоставщика();
	ЗаполнитьЗначенияСвойств(ДанныеНоменклатуры, СтрокаТовары);
	
	// Заполнение штрихкодов.
	СтрокиШтрихкода = Штрихкоды.НайтиСтроки(Новый Структура("Номенклатура, Характеристика",
		СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика));
	Для каждого ЭлементКоллекции Из СтрокиШтрихкода Цикл
		ДанныеНоменклатуры.Штрихкоды.Добавить(ЭлементКоллекции.Значение);
	КонецЦикла;
	
	// Заполнение свойств.
	СтрокиСвойства = Свойства.НайтиСтроки(Новый Структура("Номенклатура, Характеристика",
		СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика));
	Для каждого ЭлементКоллекции Из СтрокиСвойства Цикл
		ЗаполнитьЗначенияСвойств(ДанныеНоменклатуры.Свойства.Добавить(), ЭлементКоллекции);
	КонецЦикла;
	
	ХешНоменклатуры = СтрокаТовары.ХешНоменклатуры;
	ХешНовый = Неопределено;
	ТребуетсяОбновление = Ложь;
	
	Если ЗначениеЗаполнено(СтрокаТовары.ИдентификаторНоменклатуры)
		И МанифестИзмененийНоменклатуры.Найти(СтрокаТовары.ИдентификаторНоменклатуры) <> Неопределено Тогда
		ТребуетсяОбновление = Истина;
		МанифестИзмененийНоменклатуры.Удалить(СтрокаТовары.ИдентификаторНоменклатуры);
	КонецЕсли;
	
	
	ЗапросСервиса = ЗапросСервисаСозданиеОбновлениеНоменклатурыПоставщика(ДанныеНоменклатуры, Неопределено, Отказ);
	ХешНовый = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ЗапросСервиса.Данные);
	Если ХешНовый <> ХешНоменклатуры Тогда
		ТребуетсяОбновление = Истина;
	КонецЕсли;
	
	Если ТребуетсяОбновление Тогда
		СохранитьНоменклатуруПоставщика(СтрокаТовары.ИдентификаторНоменклатуры, ХешНовый, ДанныеНоменклатуры,
			ТекстОшибки, Отказ);
		Если Не Отказ Тогда
			СтрокаТовары.ХешНоменклатуры = ХешНовый;
			Обновлено = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьНоменклатуруПоставщика(Идентификатор, ХешНовый, ДанныеНоменклатуры, ТекстОшибки, Отказ)
	
	Результат = Неопределено;
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		// Запрос к сервису обновления номенклатуры поставщика.
		ЗапросСервиса = ЗапросСервисаСозданиеОбновлениеНоменклатурыПоставщика(ДанныеНоменклатуры,
			Идентификатор, Отказ);
		Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
		НовыйИдентификатор = Идентификатор;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Идентификатор) ИЛИ Результат = 404 Тогда
		// Запрос к сервису создания новой номенклатуры поставщика.
		ЗапросСервиса = ЗапросСервисаСозданиеОбновлениеНоменклатурыПоставщика(ДанныеНоменклатуры, Неопределено, Отказ);
		НовыйИдентификатор = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
		Если Не Отказ И НЕ ЗначениеЗаполнено(Идентификатор) Тогда
			Идентификатор = НовыйИдентификатор;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка публикации номенклатуры поставщика'");
		Возврат;
	КонецЕсли;
	
	// Обновление данных в регистре
	Запись = РегистрыСведений.НоменклатураТорговойПлощадки.СоздатьМенеджерЗаписи();
	Запись.Идентификатор = Идентификатор;
	Запись.Прочитать();
	
	Идентификатор = НовыйИдентификатор;
	Запись.Идентификатор  = Идентификатор;
	Запись.Номенклатура   = ДанныеНоменклатуры.Номенклатура;
	Запись.Характеристика = ДанныеНоменклатуры.Характеристика;
	Запись.Хеш = ХешНовый;
	
	Запись.Записать(Истина);
	
КонецПроцедуры

Процедура ОчиститьИдентификаторыНоменклатуры(МассивИдентификаторовНоменклатуры)
	
	Для каждого ЭлементКоллекции Из МассивИдентификаторовНоменклатуры Цикл
		
		Запись = РегистрыСведений.НоменклатураТорговойПлощадки.СоздатьМенеджерЗаписи();
		Запись.Идентификатор = ЭлементКоллекции;
		Запись.Прочитать();
		Запись.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьИдентификаторыТорговыхПредложений(МассивИдентификаторовПредложений)
	
	Для каждого ЭлементКоллекции Из МассивИдентификаторовПредложений Цикл
		
		Запись = РегистрыСведений.ТорговыеПредложенияТорговойПлощадки.СоздатьМенеджерЗаписи();
		Запись.Идентификатор = ЭлементКоллекции;
		Запись.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

Функция НоваяНоменклатураПоставщика()
	
	// Свойства.
	Свойства = Новый ТаблицаЗначений;
	Свойства.Колонки.Добавить("Наименование",           Типы().Строка);
	Свойства.Колонки.Добавить("Значение",               Неопределено);
	Свойства.Колонки.Добавить("ИдентификаторРеквизита", Типы().Строка);
	Свойства.Колонки.Добавить("ИдентификаторЗначения",  Типы().Строка);
	
	Результат = Новый Структура;
	Результат.Вставить("Номенклатура",               Неопределено);
	Результат.Вставить("НаименованиеНоменклатуры",   "");           // productName
	Результат.Вставить("Характеристика",             Неопределено);
	Результат.Вставить("НаименованиеХарактеристики", "");           // productName
	Результат.Вставить("ЕдиницаИзмерения",           Неопределено);
	Результат.Вставить("Артикул",                    "");           // partNumber
	Результат.Вставить("ТорговаяМарка",              Неопределено); // manufacturer.tradeMark
	Результат.Вставить("Производитель",              Неопределено); // manufacturer.name
	Результат.Вставить("ИдентификаторКатегории",     ""); // categoryId
	Результат.Вставить("ИдентификаторПроизводителя", ""); // manufacturerId
	Результат.Вставить("ИдентификаторТорговойМарки", ""); // tradeMarkId
	Результат.Вставить("Штрихкоды", Новый Массив);        // barCodes
	Результат.Вставить("Свойства",  Свойства);            // ref1cNomenclature.requisiteValues
	Результат.Вставить("ПодробноеОписание",          ""); // productDescription
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьТорговоеПредложение(ПрайсЛист, СтрокаТовары, МанифестИзмененныхПредложений, ТекстОшибки, Отказ)
	
	ДанныеПредложения = НовоеТорговоеПредложение();
	ЗаполнитьЗначенияСвойств(ДанныеПредложения, СтрокаТовары);
	ДанныеПредложения.ИдентификаторПрайсЛиста = ПрайсЛист.Идентификатор;
	ДанныеПредложения.ДополнительноеОписание  = ПрайсЛист.ДополнительноеОписание;
	
	ИдентификаторПредложения   = СтрокаТовары.ИдентификаторПредложения;
	ХешПредложения             = СтрокаТовары.ХешПредложения;
	ХешНоменклатуры            = СтрокаТовары.ХешНоменклатуры;
	ХешНоменклатурыПредложения = СтрокаТовары.ХешНоменклатурыПредложения;
	
	ХешНовый = Неопределено;
	ТребуетсяОбновление = Ложь;
	
	Если Не ЗначениеЗаполнено(ИдентификаторПредложения) ИЛИ Не ЗначениеЗаполнено(ХешПредложения) Тогда
		ТребуетсяОбновление= Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторПредложения)
		И МанифестИзмененныхПредложений.Найти(ИдентификаторПредложения) <> Неопределено Тогда
		ТребуетсяОбновление= Истина;
		МанифестИзмененныхПредложений.Удалить(ИдентификаторПредложения);
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаСозданиеОбновлениеТорговогоПредложения(ДанныеПредложения, Неопределено, Отказ);
	ХешНовый = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ЗапросСервиса.Данные);
	Если ХешНовый <> ХешПредложения 
		Или Не ЗначениеЗаполнено(ИдентификаторПредложения)
		Или ХешНоменклатуры <> ХешНоменклатурыПредложения Тогда
		
		ТребуетсяОбновление = Истина;
	КонецЕсли;
	
	ХешиПредложения = Новый Структура();
	ХешиПредложения.Вставить("ХешПредложенияНовый", ХешНовый);
	ХешиПредложения.Вставить("ХешНоменклатурыПредложенияНовый", ХешНоменклатуры);
	ХешиПредложения.Вставить("ХешПредложения", ХешПредложения);
	ХешиПредложения.Вставить("ХешНоменклатурыПредложения", ХешНоменклатурыПредложения); 
	
	Если ТребуетсяОбновление Тогда
		ДанныеПредложения.ВнутреннийИдентификатор = СтрШаблон("%1#%2#%3#%4",
			ПрайсЛист.Ссылка.УникальныйИдентификатор(),
			СтрокаТовары.Номенклатура.УникальныйИдентификатор(),
			?(ЗначениеЗаполнено(СтрокаТовары.Характеристика), СтрокаТовары.Характеристика.УникальныйИдентификатор(), ""),
			?(ЗначениеЗаполнено(СтрокаТовары.Упаковка), СтрокаТовары.Упаковка.УникальныйИдентификатор(), ""));
			
		
		СохранитьОбновитьТорговоеПредложение(ДанныеПредложения, ИдентификаторПредложения, ХешиПредложения, ТекстОшибки, Отказ);
		СтрокаТовары.ИдентификаторПредложения = ИдентификаторПредложения;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьОбновитьТорговоеПредложение(ДанныеПредложения, Идентификатор, ХешиПредложения, ТекстОшибки, Отказ)
	
	Если ХешиПредложения.ХешПредложенияНовый <> ХешиПредложения.ХешПредложения 
		Или Не ЗначениеЗаполнено(Идентификатор) Тогда 
		
		НовыйИдентификатор = ПолучитьИдентификаторТорговогоПредложения(ДанныеПредложения,
			Идентификатор, ХешиПредложения, ТекстОшибки, Отказ);
			
	ИначеЕсли ХешиПредложения.ХешНоменклатурыПредложенияНовый <> ХешиПредложения.ХешНоменклатурыПредложения Тогда 
		
		АктуализироватьДанныеТорговогоПредложения(Идентификатор, ТекстОшибки, Отказ);
		
	КонецЕсли;	
		
	Если Не Отказ И Не ЗначениеЗаполнено(НовыйИдентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	// Обновление данных в регистре
	Запись = РегистрыСведений.ТорговыеПредложенияТорговойПлощадки.СоздатьМенеджерЗаписи();
	Запись.Идентификатор = Идентификатор;
	Запись.Прочитать();
	
	Если ЗначениеЗаполнено(НовыйИдентификатор) Тогда
		Идентификатор = НовыйИдентификатор;
	Иначе
		Идентификатор = Идентификатор;
	КонецЕсли;
	Запись.Идентификатор = Идентификатор;
	
	// Объектная модель хранения данных о товаре.
	Запись.ПрайсЛист       = ДанныеПредложения.ПрайсЛист;
	Запись.Номенклатура    = ДанныеПредложения.Номенклатура;
	Запись.Характеристика  = ДанныеПредложения.Характеристика;
	Запись.Упаковка        = ДанныеПредложения.Упаковка;
	Запись.Хеш             = ХешиПредложения.ХешПредложенияНовый;
	Запись.ХешНоменклатуры = ХешиПредложения.ХешНоменклатурыПредложенияНовый;
	Запись.Публикуется     = Истина;
	Запись.ДатаИзменения   = ТекущаяУниверсальнаяДата();
	
	Если Отказ Тогда
		Запись.ЕстьОшибки = Истина;
		Запись.ОписаниеОшибки = ТекстОшибки;
		Запись.Хеш = "";
		Запись.ХешНоменклатуры = "";
	Иначе
		Запись.ЕстьОшибки = Ложь;
		Запись.ОписаниеОшибки = "";
	КонецЕсли;
	
	Запись.Записать(Истина);
	
КонецПроцедуры

Функция ПолучитьИдентификаторТорговогоПредложения(ДанныеПредложения, Идентификатор, ХешиПредложения, ТекстОшибки, Отказ)
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		
		// Запрос к сервису создания нового торгового предложения.
		Ошибка = Неопределено;
		ЗапросСервиса = ЗапросСервисаСозданиеОбновлениеТорговогоПредложения(ДанныеПредложения, Неопределено, Отказ);
		ЗапросСервиса.БлокироватьСообщенияОбОшибках = Истина;
		Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ, Ошибка);
		
		Если Отказ И Результат = 422 Тогда
			
			// Если при создании получена ошибка 422, возможно существует предложение с таким внутренним идентификатором.
			
			// Проверка существующего торгового предложения.
			Отказ = Ложь;
			ПараметрыЗапроса = НовыеПараметрыПолученияТорговыхПредложений(ДанныеПредложения.ВнутреннийИдентификатор);
			ЗапросСервиса = ЗапросСервисаПолучениеТорговыхПредложений(ПараметрыЗапроса);
			РезультатПоиска = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
			Если Не Отказ И ЗначениеЗаполнено(РезультатПоиска) Тогда
				
				Если РезультатПоиска.Список.Количество() Тогда
					// Обновление торгового предложения.
					Идентификатор = РезультатПоиска.Список[0].Идентификатор;
					СохранитьОбновитьТорговоеПредложение(ДанныеПредложения,
						Идентификатор, ХешиПредложения, ТекстОшибки, Отказ);
				Иначе
					Если ЗначениеЗаполнено(Ошибка) Тогда 
						ОбщегоНазначения.СообщитьПользователю(Ошибка.ТекстОшибки);
					КонецЕсли;
					ТекстОшибки = НСтр("ru = 'Ошибка данных при публикации торговых предложений'");
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
			Возврат Неопределено;
		ИначеЕсли Отказ Тогда
			Если ЗначениеЗаполнено(Ошибка) Тогда 
				ОбщегоНазначения.СообщитьПользователю(Ошибка.ТекстОшибки);
			КонецЕсли;
			ТекстОшибки = НСтр("ru = 'Ошибка публикации торговых предложений'");
			Возврат Неопределено;
		КонецЕсли;
		
		НовыйИдентификатор = Результат;
		
	Иначе
		
		// Запрос к сервису обновления торгового предложения.
		ЗапросСервиса = ЗапросСервисаСозданиеОбновлениеТорговогоПредложения(ДанныеПредложения, Идентификатор, Отказ);
		Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
		Если Отказ И Результат = 404 Тогда
			// Торговое предложение отсутствует, создание нового.
			ЗапросСервиса = ЗапросСервисаСозданиеОбновлениеТорговогоПредложения(ДанныеПредложения, Неопределено, Отказ);
			Отказ = Ложь;
			Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
			Если Отказ Тогда
				Возврат Неопределено;
			КонецЕсли;
			НовыйИдентификатор = Результат;
		ИначеЕсли Отказ Тогда
			Возврат Неопределено;
		Иначе
			НовыйИдентификатор = Идентификатор;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовыйИдентификатор;
	
КонецФункции

Процедура АктуализироватьДанныеТорговогоПредложения(Идентификатор, ТекстОшибки, Отказ)
	
	ЗапросСервиса = ЗапросСервисаАктуализацияДанныхТорговогоПредложения(Идентификатор, Отказ);
	Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	Если Отказ Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка публикации торговых предложений'");
	КонецЕсли;
	
КонецПроцедуры

Функция НовоеТорговоеПредложение()
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор",           "");
	Результат.Вставить("ИдентификаторПрайсЛиста", "");
	Результат.Вставить("НаименованиеУпаковки",    "");
	Результат.Вставить("ЧислительУпаковки",       1);
	Результат.Вставить("ЗнаменательУпаковки",     1);
	Результат.Вставить("КратностьУпаковки",       1);
	Результат.Вставить("СтавкаНДС",               Неопределено);
	Результат.Вставить("ЦенаВключаетНДС",         Неопределено);
	Результат.Вставить("Цена",                    0);
	Результат.Вставить("СрокПоставки",            0);
	Результат.Вставить("Наличие",                 Неопределено);
	Результат.Вставить("ДополнительноеОписание",  "");
	Результат.Вставить("Заголовок",               "");
	Результат.Вставить("ИдентификаторНоменклатуры",          "");
	Результат.Вставить("ИдентификаторНоменклатурыСервиса",   "");
	Результат.Вставить("ИдентификаторХарактеристикиСервиса", "");
	Результат.Вставить("ХешНоменклатуры",            "");
	Результат.Вставить("ВнутреннийИдентификатор",    "");
	Результат.Вставить("НаименованиеНоменклатуры",   "");
	Результат.Вставить("НаименованиеХарактеристики", "");
	
	// Объектная модель хранения данных.
	Результат.Вставить("ПрайсЛист",      Неопределено);
	Результат.Вставить("Номенклатура",   Неопределено);
	Результат.Вставить("Характеристика", Неопределено);
	Результат.Вставить("Упаковка",       Неопределено);

	Возврат Результат;
	
КонецФункции

Процедура ОтменитьПубликациюНеактуальныхТорговыхПредложений(ПрайсЛист)
	
	// Получение неактуальных торговых предложений, по которым не публикуются товары.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.ПрайсЛист КАК ПрайсЛист,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТорговыеПредложенияТорговойПлощадки.ПрайсЛист КАК ПрайсЛист,
	|	ТорговыеПредложенияТорговойПлощадки.Номенклатура КАК Номенклатура,
	|	ТорговыеПредложенияТорговойПлощадки.Характеристика КАК Характеристика,
	|	ТорговыеПредложенияТорговойПлощадки.Упаковка КАК Упаковка
	|ИЗ
	|	РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО ТорговыеПредложенияТорговойПлощадки.Номенклатура = Товары.Номенклатура
	|			И ТорговыеПредложенияТорговойПлощадки.Характеристика = Товары.Характеристика
	|			И ТорговыеПредложенияТорговойПлощадки.Упаковка = Товары.Упаковка
	|			И ТорговыеПредложенияТорговойПлощадки.ПрайсЛист = Товары.ПрайсЛист
	|ГДЕ
	|	Товары.Номенклатура ЕСТЬ NULL
	|	И ТорговыеПредложенияТорговойПлощадки.ПрайсЛист = &ПрайсЛист
	|	И ТорговыеПредложенияТорговойПлощадки.Публикуется";
	
	Запрос.УстановитьПараметр("Товары",    ПрайсЛист.Товары);
	Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛист.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Снятие с публикации торговых предложений.
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.ТорговыеПредложенияТорговойПлощадки.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Прочитать();
		Запись.Публикуется   = Ложь;
		Запись.Хеш           = "";
		Запись.ДатаИзменения = ТекущаяУниверсальнаяДата();
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьУстаревшиеИдентификаторыТорговыхПредложений(Отказ) Экспорт
	
	КоличествоМесяцевХранения = 6;
	
	// Получение устаревших идентификаторов торговых предложений.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТорговыеПредложенияТорговойПлощадки.ПрайсЛист КАК ПрайсЛист,
	|	ТорговыеПредложенияТорговойПлощадки.Номенклатура КАК Номенклатура,
	|	ТорговыеПредложенияТорговойПлощадки.Характеристика КАК Характеристика,
	|	ТорговыеПредложенияТорговойПлощадки.Упаковка КАК Упаковка,
	|	ТорговыеПредложенияТорговойПлощадки.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
	|		ПО ТорговыеПредложенияТорговойПлощадки.ПрайсЛист = СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение
	|ГДЕ
	|	(НЕ ТорговыеПредложенияТорговойПлощадки.Публикуется
	|				И ТорговыеПредложенияТорговойПлощадки.ДатаИзменения < &ПериодХранения
	|			ИЛИ СостоянияСинхронизацииТорговыеПредложения.Состояние ЕСТЬ NULL)";
	Запрос.УстановитьПараметр("ПериодХранения", ДобавитьМесяц(НачалоДня(ТекущаяУниверсальнаяДата()), - КоличествоМесяцевХранения));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Запрос к сервису удаления торговых предложений.
		ЗапросСервиса = ЗапросСервисаУдалениеТорговогоПредложения(Выборка.Идентификатор, Ложь);
		ЗапросСервиса.БлокироватьСообщенияОбОшибках = Истина;
		Ответ = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
		
		Если Ответ = 404 Тогда
			Отказ = Ложь;
		ИначеЕсли Отказ Тогда
			Возврат;
		КонецЕсли;
		
		// Удаление записи в регистре сведений.
		Запись = РегистрыСведений.ТорговыеПредложенияТорговойПлощадки.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеТорговыеПредложенияВСервисе(ПрайсЛист, Отказ)
	
	ПараметрыЗапроса = НовыеПараметрыПолученияТорговыхПредложений();
	ПараметрыЗапроса.ВнутреннийИдентификаторПрайсЛиста = Строка(ПрайсЛист.Ссылка.УникальныйИдентификатор());
	РазмерСтраницы = 1000;
	ПараметрыЗапроса.РазмерСтраницы = РазмерСтраницы;
	
	// Удаление всех торговых предложений в цикле.
	НомерСтраницы = 0;
	Пока НомерСтраницы < 100 Цикл
		
		ПараметрыЗапроса.Страница = НомерСтраницы;
		
		ЗапросСервиса = ЗапросСервисаПолучениеТорговыхПредложений(ПараметрыЗапроса);
		Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
		
		Если Отказ Или Не ЗначениеЗаполнено(Результат) Тогда
			Возврат;
		КонецЕсли;
		
		Если Результат.Список.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Для каждого ЭлементКоллекции Из Результат.Список Цикл
			Если ПрайсЛист.Товары.Найти(ЭлементКоллекции.Идентификатор, "ИдентификаторПредложения") = Неопределено Тогда
				
				// Удаление торгового предложения.
				ЗапросСервиса = ЗапросСервисаУдалениеТорговогоПредложения(ЭлементКоллекции.Идентификатор, Истина);
				ВыполнитьЗапрос(ЗапросСервиса, Отказ);
				Если Отказ Тогда
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Если Результат.Список.Количество() < РазмерСтраницы Тогда
			Прервать;
		КонецЕсли;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьУстаревшуюНоменклатуруПоставщика(Отказ)
	
	КоличествоМесяцевХранения = 6;
	
	// Получение устаревшей номенклатуры поставщика.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодХранения", КоличествоМесяцевХранения);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураТорговойПлощадки.Номенклатура КАК Номенклатура,
	|	НоменклатураТорговойПлощадки.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.НоменклатураТорговойПлощадки КАК НоменклатураТорговойПлощадки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
	|		ПО НоменклатураТорговойПлощадки.Номенклатура = ТорговыеПредложенияТорговойПлощадки.Номенклатура
	|			И НоменклатураТорговойПлощадки.Характеристика = ТорговыеПредложенияТорговойПлощадки.Характеристика
	|ГДЕ
	|	(НЕ ТорговыеПредложенияТорговойПлощадки.Публикуется
	|				И ТорговыеПредложенияТорговойПлощадки.ДатаИзменения < &ПериодХранения
	|			ИЛИ ТорговыеПредложенияТорговойПлощадки.Идентификатор ЕСТЬ NULL)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Удаление записи в регистре сведений
		Запись = РегистрыСведений.НоменклатураТорговойПлощадки.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьИдентификаторыПрайсЛиста(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	Если Не ТорговыеПредложения.ПравоНастройкиТорговыхПредложений(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписиПрайсЛиста = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.СоздатьМенеджерЗаписи();
	МенеджерЗаписиПрайсЛиста.Организация = ПараметрыПроцедуры.Организация;
	МенеджерЗаписиПрайсЛиста.ТорговоеПредложение = ПараметрыПроцедуры.ТорговоеПредложение;
	МенеджерЗаписиПрайсЛиста.Прочитать();
	
	Если Не ЗначениеЗаполнено(МенеджерЗаписиПрайсЛиста.Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	// Удаление всех торговых предложений в сервисе.
	ПустаяТаблицаТовары = Новый ТаблицаЗначений;
	ПустаяТаблицаТовары.Колонки.Добавить("ИдентификаторПредложения");
	
	ПрайсЛист = Новый Структура;
	ПрайсЛист.Вставить("Ссылка", ПараметрыПроцедуры.ТорговоеПредложение);
	ПрайсЛист.Вставить("Товары", ПустаяТаблицаТовары);
	ОчиститьНеиспользуемыеТорговыеПредложенияВСервисе(ПрайсЛист, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТорговыеПредложенияТорговойПлощадки.ПрайсЛист КАК ПрайсЛист,
	|	ТорговыеПредложенияТорговойПлощадки.Номенклатура КАК Номенклатура,
	|	ТорговыеПредложенияТорговойПлощадки.Характеристика КАК Характеристика,
	|	ТорговыеПредложенияТорговойПлощадки.Упаковка КАК Упаковка
	|ИЗ
	|	РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
	|ГДЕ
	|	ТорговыеПредложенияТорговойПлощадки.ПрайсЛист = &ПрайсЛист";
	Запрос.УстановитьПараметр("ПрайсЛист", ПараметрыПроцедуры.ТорговоеПредложение);
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Попытка
		Пока Выборка.Следующий() Цикл
			ЗаписьПредложение = РегистрыСведений.ТорговыеПредложенияТорговойПлощадки.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьПредложение, Выборка);
			ЗаписьПредложение.Удалить();
			
			ЗаписьНоменклатура = РегистрыСведений.НоменклатураТорговойПлощадки.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьНоменклатура, Выборка);
			ЗаписьНоменклатура.Удалить();
		КонецЦикла;
		МенеджерЗаписиПрайсЛиста.Идентификатор = "";
		МенеджерЗаписиПрайсЛиста.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

// Изменение состояний публикации торговых предложений.
//
// Параметры:
//  ПараметрыМетода	 - Структура:
//    * ВыделенныеСтроки        - ДанныеФормыЭлементКоллекции - коллекция прайс-листов.
//    * ЭтоУдаление             - Булево - режим удаления прайс-листов.
//    * ЭтоОтменаУдаления       - Булево - режим отмена удаления прайс-листов.
//    * ЭтоОтключениеПубликации - Булево - режим отключения публикации прайс-листов.
//    * ЭтоВключениеПубликации  - Булево - режим включения публикации прайс-листов.
//
Процедура ИзменитьСостояниеПубликацииПрайсЛистов(ПараметрыМетода) Экспорт
	
	Для каждого ЭлементКоллекции Из ПараметрыМетода.ВыделенныеСтроки Цикл
		
		Отбор = Новый Структура("ТорговоеПредложение", ЭлементКоллекции);
		
		Выборка = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.Выбрать(Отбор);
		
		Если Выборка.Следующий() Тогда
			
			МенеджерЗаписи = Выборка.ПолучитьМенеджерЗаписи();
			
			Если ПараметрыМетода.ЭтоУдаление Тогда
				МенеджерЗаписи.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Удаление;
			ИначеЕсли ПараметрыМетода.ЭтоОтменаУдаления Тогда
				МенеджерЗаписи.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Изменение;
			ИначеЕсли ПараметрыМетода.ЭтоОтключениеПубликации Тогда
				МенеджерЗаписи.Отключено = Истина;
			ИначеЕсли ПараметрыМетода.ЭтоВключениеПубликации Тогда
				МенеджерЗаписи.Отключено = Ложь;
			КонецЕсли;
			МенеджерЗаписи.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация;
			МенеджерЗаписи.ДатаСинхронизации = '00010101';
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьИдентификаторОрганизации(Организация, Отказ)
	
	Выборка = РегистрыСведений.ОрганизацииБизнесСеть.Выбрать(Новый Структура("Организация", Организация));
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
		Возврат Выборка.Идентификатор;
	КонецЕсли;
	
	// Получение идентификатора и сохранение.
	ЗапросСервиса = ЗапросСервисаПолучениеИдентификатораОрганизации(Организация);
	Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	Если Результат = 404 Тогда
		Отказ = Истина;
	КонецЕсли;

	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ОрганизацииБизнесСеть.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.Идентификатор = Результат;
	МенеджерЗаписи.Записать(Истина);
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьИдентификаторыНоменклатурыСервиса(Список) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		Возврат;
	КонецЕсли;
	
	МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
	ДанныеСервиса = МодульРаботаСНоменклатурой.ИдентификаторыНоменклатурыИХарактеристикПоСсылкам(Список.Скопировать(,"Номенклатура, Характеристика"));
	
	Для каждого СтрокаДанныхСервиса Из ДанныеСервиса Цикл
		Строки = Список.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", 
			СтрокаДанныхСервиса.Номенклатура, СтрокаДанныхСервиса.Характеристика));
		Для каждого ЭлементКоллекции Из Строки Цикл
			ЭлементКоллекции.ИдентификаторНоменклатурыСервиса = СтрокаДанныхСервиса.ИдентификаторНоменклатуры;
			ЭлементКоллекции.ИдентификаторХарактеристикиСервиса = СтрокаДанныхСервиса.ИдентификаторХарактеристики;
		КонецЦикла;	
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Инициализация отчета публикуемых товаров.
//
// Параметры:
//  СхемаКомпоновкиДанных	 - СхемаКомпоновкиДанных - схема для формирования отчета.
//
Процедура ИнициализацияОтчетаПубликуемыхТоваров(СхемаКомпоновкиДанных) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьПараметрыЗапросаПубликуемыхТоваров(Запрос.Параметры);
	ТорговыеПредложенияПереопределяемый.ИнициализацияЗапросаПубликуемыхТоваров(Запрос);
	
	// Дополнение служебными данными.
	ДополнитьЗапросСлужебнымиТаблицами(Запрос);
	
	РезультирующиеТаблицы = Новый Структура("ТоварыСлужебный");
	УдаляемыеТаблицы = Новый Структура("Контакты, Контрагенты, СвойстваСлужебный, Штрихкоды");
	ПреобразоватьЗапросПоВременнымТаблицам(Запрос, РезультирующиеТаблицы, УдаляемыеТаблицы, Ложь);
	
	СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = Запрос.Текст;
	
	Для каждого ЭлементКоллекции Из Запрос.Параметры Цикл
		Если СхемаКомпоновкиДанных.Параметры.Найти(ЭлементКоллекции.Ключ) = Неопределено Тогда
			НовыйПараметр = СхемаКомпоновкиДанных.Параметры.Добавить();
			НовыйПараметр.Имя = ЭлементКоллекции.Ключ;
			НовыйПараметр.Значение = ЭлементКоллекции.Значение;
			НовыйПараметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обновление статистики по синхронизации торговых предложений.
//
Процедура ОбновитьСтатистикуСинхронизации(Знач Параметры, Знач АдресРезультата) Экспорт
	
	// Получение данных
	ИспользоватьСопоставление1СНоменклатура = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой")
		И ПолучитьФункциональнуюОпцию("ИспользоватьСервисРаботаСНоменклатурой");
	
	Запрос = Новый Запрос;
	ИнициализироватьПараметрыЗапросаПубликуемыхТоваров(Запрос.Параметры);
	ТорговыеПредложенияПереопределяемый.ИнициализацияЗапросаПубликуемыхТоваров(Запрос);
	
	// Дополнение служебными данными.
	ДополнитьЗапросСлужебнымиТаблицами(Запрос);
	
	РезультирующиеТаблицы = Новый Структура("ТоварыСлужебный");
	УдаляемыеТаблицы = Новый Структура("Штрихкоды, СвойстваСлужебный");
	ПреобразоватьЗапросПоВременнымТаблицам(Запрос, РезультирующиеТаблицы, УдаляемыеТаблицы, Истина);
	
	Если ИспользоватьСопоставление1СНоменклатура Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	ЕСТЬNULL(Товары.ИдентификаторНоменклатурыСервиса, """") КАК ИдентификаторНоменклатурыСервиса,
		|	ЕСТЬNULL(Товары.ИдентификаторКатегории, """") КАК ИдентификаторКатегории
		|ПОМЕСТИТЬ УникальныеПозиции
		|ИЗ
		|	ТоварыСлужебный КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(1), 0) КАК КоличествоПозиций,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА УникальныеПозиции.ИдентификаторНоменклатурыСервиса <> &ПустойИдентификатор
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК КоличествоСопоставлено1СНоменклатура,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА УникальныеПозиции.ИдентификаторКатегории <> &ПустойИдентификатор
		|					ТОГДА ВЫБОР
		|							КОГДА НЕ &ИспользоватьСопоставление1СНоменклатура
		|								ТОГДА 1
		|							ИНАЧЕ ВЫБОР
		|									КОГДА УникальныеПозиции.ИдентификаторНоменклатурыСервиса = &ПустойИдентификатор
		|										ТОГДА 1
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						КОНЕЦ
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК КоличествоСопоставленоБизнесСеть
		|ИЗ
		|	УникальныеПозиции КАК УникальныеПозиции";
		
		Запрос.УстановитьПараметр("ИспользоватьСопоставление1СНоменклатура", ИспользоватьСопоставление1СНоменклатура);
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	ЕСТЬNULL(Товары.ИдентификаторКатегории, """") КАК ИдентификаторКатегории
		|ПОМЕСТИТЬ УникальныеПозиции
		|ИЗ
		|	ТоварыСлужебный КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(1), 0) КАК КоличествоПозиций,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА УникальныеПозиции.ИдентификаторКатегории <> &ПустойИдентификатор
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК КоличествоСопоставленоБизнесСеть
		|ИЗ
		|	УникальныеПозиции КАК УникальныеПозиции";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "; " + ТекстЗапроса;
	Запрос.УстановитьПараметр("ПустойИдентификатор", "");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Статистика = Новый Структура;
	Статистика.Вставить("КоличествоПозиций", 0);
	Статистика.Вставить("КоличествоСопоставлено1СНоменклатура", 0);
	Статистика.Вставить("КоличествоСопоставленоБизнесСеть", 0);
	Статистика.Вставить("ДатаОбновления", УниверсальноеВремя(ТекущаяДатаСеанса()));
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Статистика, Выборка);
	КонецЕсли;
	
	// Сохранение статистики
	ПоместитьВоВременноеХранилище(Статистика, АдресРезультата);
	
КонецПроцедуры

Процедура ИнициализироватьПараметрыЗапросаПубликуемыхТоваров(Параметры)
	
	Параметры.Вставить("ПрайсЛист", Неопределено);
	Параметры.Вставить("Период",    Дата(1,1,1));
	
КонецПроцедуры

Процедура СоздатьЗаписиТорговыхПредложенийДляПоискаСоответствия()
	
	// Получение несопоставленной номенклатуры.
	Запрос = Новый Запрос;
	ИнициализироватьПараметрыЗапросаПубликуемыхТоваров(Запрос.Параметры);
	ТорговыеПредложенияПереопределяемый.ИнициализацияЗапросаПубликуемыхТоваров(Запрос);
	
	// Дополнение служебными данными.
	ДополнитьЗапросСлужебнымиТаблицами(Запрос);
	
	РезультирующиеТаблицы = Новый Структура("ТоварыСлужебный");
	УдаляемыеТаблицы = Новый Структура("СвойстваСлужебный");
	ПреобразоватьЗапросПоВременнымТаблицам(Запрос, РезультирующиеТаблицы, УдаляемыеТаблицы, Истина);
	
	// Добавить запрос для отбора по уже созданным ТП
	ТекстЗапросаТорговыеПредложения =
	"ВЫБРАТЬ
	|	ТоварыСлужебный.Номенклатура КАК Номенклатура,
	|	ТоварыСлужебный.Характеристика КАК Характеристика,
	|	ТоварыСлужебный.ПрайсЛист КАК ПрайсЛист,
	|	ТоварыСлужебный.Упаковка КАК Упаковка,
	|	ТоварыСлужебный.Публикуется КАК Публикуется
	|ИЗ
	|	ТоварыСлужебный КАК ТоварыСлужебный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
	|		ПО ТоварыСлужебный.ПрайсЛист = ТорговыеПредложенияТорговойПлощадки.ПрайсЛист
	|			И ТоварыСлужебный.Номенклатура = ТорговыеПредложенияТорговойПлощадки.Номенклатура
	|			И ТоварыСлужебный.Характеристика = ТорговыеПредложенияТорговойПлощадки.Характеристика
	|			И ТоварыСлужебный.Упаковка = ТорговыеПредложенияТорговойПлощадки.Упаковка
	|ГДЕ
	|	ТорговыеПредложенияТорговойПлощадки.Номенклатура ЕСТЬ NULL
	|			И ТоварыСлужебный.ИдентификаторНоменклатурыСервиса ЕСТЬ NULL";
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + ТекстЗапросаТорговыеПредложения;
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДатаОбновления = ТекущаяДатаСеанса();
	
	НачатьТранзакцию();
	
	Попытка
		СчетчикТранзакции = 0;
		Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.ТорговыеПредложенияТорговойПлощадки.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.ДатаИзменения = ДатаОбновления;
			Запись.Публикуется = Истина;
			Запись.Записать(Истина);
			Если СчетчикТранзакции > 1000 Тогда
				СчетчикТранзакции = 0;
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
			Иначе
				СчетчикТранзакции = СчетчикТранзакции + 1;
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

// Типы получаемых данных.
// 
// Возвращаемое значение:
//  Структура - описание типов:
//   * Простой          - простой тип (Строка, Булево, Число, Дата).
//   * Строка           - тип Строка.
//   * Число            - тип Число.
//   * Булево           - тип Булево.
//   * Структура        - тип Структура.
//   * Дата             - тип Дата.
//   * Таблица          - тип ТаблицаЗначений.
//   * Цена             - денежный тип Число.
//   * Номенклатура     - ОпределяемыеТипы.НоменклатураБЭД.
//   * Характеристика   - ОпределяемыеТипы.ХарактеристикаНоменклатурыБЭД.
//   * Упаковка         - ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.
//   * ПрайсЛист        - ОпределяемыеТипы.ТорговоеПредложение.
//   * Организация      - ОпределяемыеТипы.Организация.
//   * ЕдиницаИзмерения - СправочникСсылка.
//
Функция Типы()
	
	Возврат ТорговыеПредложенияПовтИсп.ТипыДанных();
	
КонецФункции

#КонецОбласти

#КонецОбласти
