
#Область ПрограммныйИнтерфейс

Функция Подключен() Экспорт
	
	ПользовательАссистент = ПользовательАссистент();
	
	Если ПользовательАссистент = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПользовательАссистентИдентификаторСВ = Неопределено;
	Попытка
		ПользовательАссистентИдентификаторСВ = ПользовательАссистентИдентификаторСВ();
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	КонецПопытки;
	
	Если ПользовательАссистентИдентификаторСВ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура Подключить() Экспорт
	
	ПользовательАссистент = ПользовательАссистент();
	Если ПользовательАссистент = Неопределено Тогда
		НовыйСлужебныйПользовательАссистента();
		ОбновитьПовторноИспользуемыеЗначения();
		СоздатьОбсуждениеЖурналРаботыАссистента();
		Возврат;
	КонецЕсли;
	
	ПользовательАссистентИдентификаторСВ = Неопределено;
	Попытка
		ПользовательАссистентИдентификаторСВ = ПользовательАссистентИдентификаторСВ();
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	КонецПопытки;
	
	Если ПользовательАссистентИдентификаторСВ = Неопределено Тогда
		НовыйСлужебныйПользовательСВАссистента();
		ОбновитьУчастниковЖурналРаботыАссистента(ПользовательАссистент);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет актуальные (в работе) задачи ассистента в очередь выполнения.
//
// Параметры:
//  Предмет                  - Ссылка - См. определяемый тип АссистентУправленияПредметЗадачи.
//  СобытиеИдентификатор     - Строка - Идентификатор сработавшего события (см. ПриОпределенииСобытий).
//  Источник                 - Ссылка - См. определяемый тип АссистентУправленияИсточникЗадачи.
//  ДополнительныеПараметры  - Структура - Дополнительные параметры.
//                                         Например, дополнительные параметры для формирования сообщения по шаблону (см. Справочник.ШаблоныСообщений).
//
Процедура ПриСрабатыванииСобытия(Предмет, СобытиеИдентификатор, Источник = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользованиеЗадачАссистентаУправления") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("АссистентУправления.ПриСрабатыванииСобытия", "Предмет", Предмет, Метаданные.ОпределяемыеТипы.АссистентУправленияПредметЗадачи.Тип);
	
	Если Источник <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("АссистентУправления.ПриСрабатыванииСобытия", "Источник", Источник, Метаданные.ОпределяемыеТипы.АссистентУправленияИсточникЗадачи.Тип);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиАссистентаУправления.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЗадачиАссистентаУправления КАК ЗадачиАссистентаУправления
	|ГДЕ
	|	ЗадачиАссистентаУправления.Используется
	|	И ЗадачиАссистентаУправления.События.СобытиеИдентификатор = &Событие
	|	И НЕ ЗадачиАссистентаУправления.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Событие", СобытиеИдентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.ОчередьЗадачАссистентаУправления.СоздатьМенеджерЗаписи();
		Запись.Предмет  = Предмет;
		Запись.Событие  = СобытиеИдентификатор;
		Запись.Источник = Источник;
		Запись.Задача   = Выборка.Ссылка;
		Запись.Дата     = ТекущаяДатаСеанса();
		Если ДополнительныеПараметры <> Неопределено Тогда
			Запись.ДополнительныеПараметры = Новый ХранилищеЗначения(ДополнительныеПараметры);
		КонецЕсли;
		Запись.Записать();
	КонецЦикла;
	
	Если Выборка.Количество() <> 0 Тогда
		УстановитьИспользованиеРегламентногоЗаданияВыполнениеЗадач(Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступныеТипыПредметов() Экспорт
	
	ТипыПредметов = Новый Соответствие;
	
	Источники = Новый Массив;
	АссистентУправленияПереопределяемый.ПриОпределенииИсточников(Источники);
	
	Для каждого Источник Из Источники Цикл
		
		Модуль = ОбщегоНазначения.ОбщийМодуль(Источник);
		Модуль.ПриОпределенииТиповПредметовСобытий(ТипыПредметов);
		
	КонецЦикла;
	
	Возврат ТипыПредметов;
	
КонецФункции

Процедура ПриОпределенииСобытий(События) Экспорт
	
	Источники = Новый Массив;
	АссистентУправленияПереопределяемый.ПриОпределенииИсточников(Источники);
	
	Для каждого Источник Из Источники Цикл
		
		МодульИсточника = ОбщегоНазначения.ОбщийМодуль(Источник);
		
		ТипыПредметов = Новый Соответствие;
		МодульИсточника.ПриОпределенииТиповПредметовСобытий(ТипыПредметов);
		
		Для каждого ТипПредмета Из ТипыПредметов Цикл
			МодульИсточника.ПриОпределенииСобытий(События, ТипПредмета.Ключ);
		КонецЦикла;
		
		Для каждого Событие Из События Цикл
			Если НЕ ЗначениеЗаполнено(Событие.Предмет) Тогда
				Событие.Предмет = ТипПредмета.Ключ;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Событие.Модуль) Тогда
				Событие.Модуль = Источник;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриОпределенииДействий(Действия) Экспорт
	
	АссистентУправленияПереопределяемый.ПриОпределенииДействий(Действия);
	
	Источники = Новый Массив;
	АссистентУправленияПереопределяемый.ПриОпределенииИсточников(Источники);
	
	Для каждого Источник Из Источники Цикл
		МодульИсточника = ОбщегоНазначения.ОбщийМодуль(Источник);
		МодульИсточника.ПриОпределенииДействий(Действия);
		
		Для каждого Действие Из Действия Цикл
			Если НЕ ЗначениеЗаполнено(Действие.Модуль) Тогда
				Действие.Модуль = Источник;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВыполненыУсловияЗадачи(Источник, Задача, Предмет)
	
	ПараметрыУсловия = Справочники.ЗадачиАссистентаУправления.ПараметрыУсловия(Задача);
	
	Если ПараметрыУсловия.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	УсловиеВыполнено = ИсточникПредмета(Задача.ТипПредмета).ВыполненыУсловия(Предмет, ПараметрыУсловия);
	
	Если УсловиеВыполнено = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучателиПредметаСообщения(ТипПредмета) Экспорт
	
	Получатели = Новый ТаблицаЗначений;
	Получатели.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Получатели.Колонки.Добавить("Путь", Новый ОписаниеТипов("Строка"));
	Получатели.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Получатели.Колонки.Добавить("Тип");
	
	ИсточникПредмета(ТипПредмета).ПриОпределенииПолучателейСообщения(Получатели);
	
	Возврат Получатели;
	
КонецФункции

Процедура ПроверитьНаличиеОбязательныхПараметров(СтруктураПараметров, ОбязательныеПараметры) Экспорт
	
	МассивПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОбязательныеПараметры);
	
	ОтсутствующиеПараметры = Новый Массив;
	
	Для Каждого ОбязательныйПараметр Из МассивПараметров Цикл
		Если НЕ СтруктураПараметров.Свойство(ОбязательныйПараметр) Тогда
			ОтсутствующиеПараметры.Добавить(ОбязательныйПараметр);
		КонецЕсли;
	КонецЦикла;
	
	Если ОтсутствующиеПараметры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = СтрШаблон(НСтр("ru='Отсутствуют обязательные параметры: %1'"), СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ОтсутствующиеПараметры));
	ВызватьИсключение ТекстОшибки;
	
КонецПроцедуры

Функция ПользовательАссистент() Экспорт
	
	Возврат Пользователи.НайтиПоИмени(ИмяПользователяАссистента());
	
КонецФункции

Функция ПолучитьОтветственного(Объект) Экспорт
	
	РеквизитОтветственный = Объект.Метаданные().Реквизиты.Найти("Ответственный");
	
	Если РеквизитОтветственный = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ РеквизитОтветственный.Тип.СодержитТип(Тип("СправочникСсылка.Сотрудники")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Ответственный");
	
КонецФункции

Функция ВыполненоУсловиеСравнения(ЛевоеЗначение, ВидСравнения, ПравоеЗначение) Экспорт
	
	Если ВидСравнения = Перечисления.ВидСравненияЗначений.Равно Тогда
		Возврат ЛевоеЗначение = ПравоеЗначение;
	КонецЕсли;
	
	Если ВидСравнения = Перечисления.ВидСравненияЗначений.ВСписке Тогда
		Возврат ПравоеЗначение.Найти(ЛевоеЗначение) <> Неопределено;
	КонецЕсли;
	
	Если ВидСравнения = Перечисления.ВидСравненияЗначений.Больше Тогда
		Возврат ЛевоеЗначение > ПравоеЗначение;
	ИначеЕсли ВидСравнения = Перечисления.ВидСравненияЗначений.БольшеИлиРавно Тогда
		Возврат ЛевоеЗначение >= ПравоеЗначение;
	ИначеЕсли ВидСравнения = Перечисления.ВидСравненияЗначений.Меньше Тогда
		Возврат ЛевоеЗначение < ПравоеЗначение;
	ИначеЕсли ВидСравнения = Перечисления.ВидСравненияЗначений.МеньшеИлиРавно Тогда
		Возврат ЛевоеЗначение <= ПравоеЗначение;
	КонецЕсли;
	
	Если ВидСравнения = Перечисления.ВидСравненияЗначений.ВИнтервале Тогда
		Возврат ЛевоеЗначение > ПравоеЗначение[0] И ЛевоеЗначение < ПравоеЗначение[1];
	ИначеЕсли ВидСравнения = Перечисления.ВидСравненияЗначений.ВИнтервалеВключая Тогда
		Возврат ЛевоеЗначение >= ПравоеЗначение[0] И ЛевоеЗначение <= ПравоеЗначение[1];
	ИначеЕсли ВидСравнения = Перечисления.ВидСравненияЗначений.ВИнтервалеВключаяЛево Тогда
		Возврат ЛевоеЗначение >= ПравоеЗначение[0] И ЛевоеЗначение < ПравоеЗначение[1];
	ИначеЕсли ВидСравнения = Перечисления.ВидСравненияЗначений.ВИнтервалеВключаяПраво Тогда
		Возврат ЛевоеЗначение > ПравоеЗначение[0] И ЛевоеЗначение <= ПравоеЗначение[1];
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьСообщениеВРезультат(Результат, Объект, Текст, Действия = Неопределено) Экспорт
	
	ДанныеСообщения = ОбсужденияСервер.НовыйДанныеСообщения();
	ДанныеСообщения.Объект = Объект;
	ДанныеСообщения.Текст = Текст;
	
	Если Действия <> Неопределено Тогда
		ДанныеСообщения.Действия = Действия;
	КонецЕсли;
	
	Результат.ДанныеСообщений.Добавить(ДанныеСообщения);
	
КонецПроцедуры

Функция ПредложениеВыполнитьЗадачуИнтерактивно(Предмет, Событие, Действие, ЗначенияЗаполнения, ДополнительныеПараметры) Экспорт
	
	ДанныеСообщения = ОбсужденияСервер.НовыйДанныеСообщения();
	ДанныеСообщения.Текст = СтрШаблон(НСтр("ru='Выполнить задачу %1?'"), ДополнительныеПараметры.ЗадачаАссистентаУправления);
	ДанныеСообщения.Получатель = АссистентУправления.ПолучитьОтветственного(Предмет);
	
	ДанныеСообщения.Действия.Добавить(АссистентУправленияКлиентСервер.КодДействияСообщенияВыполнитьДействие(), НСтр("ru='Да'"));
	ДанныеСообщения.Действия.Добавить(АссистентУправленияКлиентСервер.КодДействияСообщенияОтмена(), НСтр("ru='Нет'"));
	
	ДанныеСообщенияДанные = Новый Структура;
	ДанныеСообщенияДанные.Вставить("Действие", Действие);
	ДанныеСообщенияДанные.Вставить("Источник", ДополнительныеПараметры.Источник);
	ДанныеСообщенияДанные.Вставить("Событие", Событие);
	ДанныеСообщенияДанные.Вставить("Предмет", Предмет);
	ДанныеСообщенияДанные.Вставить("Задача", ДополнительныеПараметры.ЗадачаАссистентаУправления);
	ДанныеСообщения.Данные = Новый ХранилищеЗначения(Новый ФиксированнаяСтруктура(ДанныеСообщенияДанные));
	
	Возврат ДанныеСообщения;
	
КонецФункции

// Обработчик регламентного задания ВыполнениеЗадачАссистентаУправления.
//
Процедура ВыполнениеЗадачАссистентаУправления() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбработкаПравилРабочихПроцессов);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередьЗадачАссистентаУправления.Предмет КАК Предмет,
	|	ОчередьЗадачАссистентаУправления.Событие КАК СобытиеИдентификатор,
	|	ОчередьЗадачАссистентаУправления.Источник КАК Источник,
	|	ОчередьЗадачАссистентаУправления.Задача КАК Задача,
	|	ОчередьЗадачАссистентаУправления.Дата КАК Дата,
	|	ОчередьЗадачАссистентаУправления.ДополнительныеПараметры КАК ДополнительныеПараметры
	|ИЗ
	|	РегистрСведений.ОчередьЗадачАссистентаУправления КАК ОчередьЗадачАссистентаУправления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		УстановитьИспользованиеРегламентногоЗаданияВыполнениеЗадач(Ложь);
		Возврат;
	КонецЕсли;
	
	ОтразитьХодВыполнения(,
		СтрШаблон(НСтр("ru='Старт обработки очереди задач. Количество к обработке: %1'"), Выборка.Количество()),,
		Метаданные.РегламентныеЗадания.ВыполнениеЗадачАссистентаУправления);
	
	Пока Выборка.Следующий() Цикл
		
		ОтразитьХодВыполнения(, СтрШаблон(НСтр("ru='Старт выполнения Задачи (%1)'"), Выборка.Задача), Выборка.Задача, Выборка.Задача.Метаданные());
		
		Попытка
			
			Если НЕ ВыполненыУсловияЗадачи(Выборка.Источник, Выборка.Задача, Выборка.Предмет) Тогда
				УдалитьЗадачуИзОчередиВыполнения(Выборка.Источник, Выборка.Предмет, Выборка.СобытиеИдентификатор, Выборка.Задача);
				Продолжить;
			КонецЕсли;
			
			ВыполнитьДействияЗадачи(Выборка.Источник, Выборка.СобытиеИдентификатор, Выборка.Предмет, Выборка.Задача, Выборка.ДополнительныеПараметры.Получить());
			
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОтразитьОшибкуВыполнения(ИнформацияОбОшибке, Выборка.Предмет, Выборка.СобытиеИдентификатор, Выборка.Задача, Выборка.Источник);
			
		КонецПопытки;
		
		ОтразитьХодВыполнения(, СтрШаблон(НСтр("ru='Конец выполнения Задачи (%1)'"), Выборка.Задача), Выборка.Задача, Выборка.Задача.Метаданные());
		
	КонецЦикла;
	
	ОтразитьХодВыполнения(, НСтр("ru='Завершена обработка очереди задач.'"),, Метаданные.РегламентныеЗадания.ВыполнениеЗадачАссистентаУправления);
	
	Если РегистрыСведений.ОчередьЗадачАссистентаУправления.КоличествоЗадач() = 0 Тогда
		УстановитьИспользованиеРегламентногоЗаданияВыполнениеЗадач(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает описание общего или частного действия из таблицы действий.
//
// Параметры:
//  Действия				 - ТаблицаЗначений, ДанныеФормыКоллекция - См. функцию НовыйТаблицаДействий.
//  Предмет					 - Строка
//  ДействиеИдентификатор	 - Строка
// 
// Возвращаемое значение:
//   - СтрокаТаблицыЗначений, ДанныеФормыЭлементКоллекции
//
Функция НайтиОписаниеДействия(Действия, Предмет, ДействиеИдентификатор) Экспорт
	
	ОписаниеДействия = ОписаниеОбщегоДействия(Действия, ДействиеИдентификатор);
	
	Если ОписаниеДействия <> Неопределено Тогда
		Возврат ОписаниеДействия;
	КонецЕсли;
	
	Возврат ОписаниеДействияПоПредмету(Действия, ДействиеИдентификатор, Предмет);
	
КонецФункции

#Область ОписаниеТаблиц

Функция НовыйТаблицаСобытий() Экспорт
	
	События = Новый ТаблицаЗначений;
	События.Колонки.Добавить("Предмет", Новый ОписаниеТипов("Строка"));
	События.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	События.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
	События.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	События.Колонки.Добавить("ОписаниеПредставление", Новый ОписаниеТипов("Строка"));
	События.Колонки.Добавить("ОписаниеШаблонТекста", Новый ОписаниеТипов("Строка"));
	События.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	События.Колонки.Добавить("Модуль", Новый ОписаниеТипов("Строка"));
	
	Возврат События;
	
КонецФункции

Функция НовыйТаблицаДействий() Экспорт
	
	Действия = Новый ТаблицаЗначений;
	Действия.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Действия.Колонки.Добавить("Предмет", Новый ОписаниеТипов("Строка"));
	Действия.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Действия.Колонки.Добавить("Общее", Новый ОписаниеТипов("Булево"));
	Действия.Колонки.Добавить("Модуль", Новый ОписаниеТипов("Строка"));
	Действия.Колонки.Добавить("ОписаниеПолей", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Возврат Действия;
	
КонецФункции

Функция НовыйОписаниеПолейДействия()
	
	Описание = Новый ТаблицаЗначений;
	Описание.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	Описание.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Описание.Колонки.Добавить("ОписаниеТипов", Новый ОписаниеТипов("ОписаниеТипов"));
	Описание.Колонки.Добавить("Значение");
	Описание.Колонки.Добавить("ОбязательноеЗаполнение", Новый ОписаниеТипов("Булево"));
	Описание.Колонки.Добавить("ВариантЗаполнения", Новый ОписаниеТипов("Строка"));
	
	Возврат Описание;
	
КонецФункции

Процедура ДобавитьОписаниеПолейДействия(Действие) Экспорт
	
	Если ТипЗнч(Действие.ОписаниеПолей) = Тип("ТаблицаЗначений") Тогда
		Действие.ОписаниеПолей = НовыйОписаниеПолейДействия();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияСистемаВзаимодействия

Процедура ОбработатьДействиеОтменаСообщенияАссистента(ОписаниеСообщения, ОтразитьРезультатСообщением = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СообщениеСВ = ОбсужденияСервер.ПолучитьСообщение(ОписаниеСообщения.ОбсуждениеИдентификатор, ОписаниеСообщения.СообщениеИдентификатор);
	СообщениеСВ.Действия.Очистить();
	СообщениеСВ.Записать();
	
	Если ОтразитьРезультатСообщением Тогда
		СообщениеПодтверждение = СистемаВзаимодействия.СоздатьСообщение(ОписаниеСообщения.ОбсуждениеИдентификатор);
		СообщениеПодтверждение.Текст = Новый ФорматированнаяСтрока("#" + НСтр("ru='Нет'"));
		СообщениеПодтверждение.Дата = СообщениеСВ.Дата + 1;
		СообщениеПодтверждение.Автор = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
		СообщениеПодтверждение.Получатели.Добавить(ПользовательАссистентИдентификаторСВ());
		СообщениеПодтверждение.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеОбработкиДействияСообщенияАссистента(ОписаниеСообщения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СообщениеСДействием = ОбсужденияСервер.ПолучитьСообщение(ОписаниеСообщения.ОбсуждениеИдентификатор, ОписаниеСообщения.СообщениеИдентификатор);
	СообщениеСДействием.Действия.Очистить();
	СообщениеСДействием.Записать();
	
КонецПроцедуры

Функция СоздатьОбсуждениеЖурналРаботыАссистента() Экспорт
	
	ОбсуждениеЖурнал = ПолучитьОбсуждениеЖурналРаботыАссистента();
	
	Если ОбсуждениеЖурнал <> Неопределено Тогда
		Возврат ОбсуждениеЖурнал;
	КонецЕсли;
	
#Если НЕ ВнешнееСоединение Тогда
	
	Если НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		Возврат ОбсуждениеЖурнал;
	КонецЕсли;
	
	Ключ = КлючОбсуждениеЖурналРаботыАссистента();
	
	ОбсуждениеЖурнал = СистемаВзаимодействия.СоздатьОбсуждение();
	ОбсуждениеЖурнал.Ключ = Ключ;
	ОбсуждениеЖурнал.Отображаемое = Истина;
	ОбсуждениеЖурнал.Заголовок = НСтр("ru='Монитор ассистента УНФ'");
	ОбсуждениеЖурнал.Участники.Добавить(ПользовательАссистентИдентификаторСВ());
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗадачиАссистентаУправления.Автор КАК Автор
	|ИЗ
	|	Справочник.ЗадачиАссистентаУправления КАК ЗадачиАссистентаУправления
	|ГДЕ
	|	НЕ ЗадачиАссистентаУправления.ЭтоГруппа";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовыйУчастник = Неопределено;
		Попытка
			НовыйУчастник = ОбсужденияСервер.ИдентификаторПользователя(Выборка.Автор);
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецПопытки;
		Если НовыйУчастник <> Неопределено Тогда
			ОбсуждениеЖурнал.Участники.Добавить(НовыйУчастник);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	ОбсуждениеЖурнал.Записать();
	УстановитьПривилегированныйРежим(Ложь);
#КонецЕсли
	
	Возврат ОбсуждениеЖурнал;
	
КонецФункции

Функция ПолучитьОбсуждениеЖурналРаботыАссистента() Экспорт
	
	Обсуждение = Неопределено;
	
#Если НЕ ВнешнееСоединение Тогда
	Ключ = КлючОбсуждениеЖурналРаботыАссистента();
	
	Если НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		Возврат Обсуждение;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(Ключ);
	УстановитьПривилегированныйРежим(Ложь);
#КонецЕсли
	
	Возврат Обсуждение;
	
КонецФункции

Функция КлючОбсуждениеЖурналРаботыАссистента()
	
	Возврат "АссистентУправления";
	
КонецФункции

Процедура ОбновитьУчастниковЖурналРаботыАссистента(АвторЗадачи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("АссистентУправления.ОбновитьУчастниковЖурналРаботыАссистента", "АвторЗадачи", АвторЗадачи, Тип("СправочникСсылка.Пользователи"));
	
	Обсуждение = ПолучитьОбсуждениеЖурналРаботыАссистента();
	
	Если Обсуждение = Неопределено Тогда
		Обсуждение = СоздатьОбсуждениеЖурналРаботыАссистента();
	КонецЕсли;
	
	Если Обсуждение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АвторЗадачиПользовательСВ = ОбсужденияСервер.ИдентификаторПользователя(АвторЗадачи);
	Если АвторЗадачиПользовательСВ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Обсуждение.Участники.Содержит(АвторЗадачиПользовательСВ) Тогда
		Возврат;
	КонецЕсли;
	
	Обсуждение.Участники.Добавить(АвторЗадачиПользовательСВ);
	
	Попытка
		Обсуждение.Записать();
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Функция ПользовательАссистентИдентификаторСВ() Экспорт
	
	Возврат ОбсужденияСервер.ИдентификаторПользователя(ПользовательАссистент());
	
КонецФункции

Процедура ОтветитьНаСообщениеПользователя(ОписаниеСообщения, ОбрабатываемоеСообщение) Экспорт
	
	НовоеСообщениеПользователя = ОбсужденияСервер.ПолучитьСообщение(ОписаниеСообщения.ОбсуждениеИдентификатор, ОписаниеСообщения.СообщениеИдентификатор);
	
	РаспознанноеДействиеНадСообщением = РаспознатьДействиеНадСообщением(НовоеСообщениеПользователя.Текст);
	
	ИсходноеСообщениеАссистента = Неопределено;
	Если РаспознанноеДействиеНадСообщением <> Неопределено Тогда
		ИсходноеСообщениеАссистента = ОбрабатываемоеСообщениеСВопросомАссистента(НовоеСообщениеПользователя, РаспознанноеДействиеНадСообщением);
	КонецЕсли;
	
	СообщениеОбработано = Ложь;
	Если ИсходноеСообщениеАссистента <> Неопределено Тогда
		ОбрабатываемоеСообщение = НовыйОписаниеСообщенияСВ(ИсходноеСообщениеАссистента);
		
		Если РаспознанноеДействиеНадСообщением = АссистентУправленияКлиентСервер.КодДействияСообщенияОтмена() Тогда
			ОбработатьДействиеОтменаСообщенияАссистента(ОбрабатываемоеСообщение);
			СообщениеОбработано = Истина;
		КонецЕсли;
		
		Если РаспознанноеДействиеНадСообщением = АссистентУправленияКлиентСервер.КодДействияСообщенияВыполнитьДействие() Тогда
			РазыменоватьДанныеСообщенияСВ(ОбрабатываемоеСообщение);
			ОбрабатываемоеСообщение.ВыбранноеДействие = РаспознанноеДействиеНадСообщением;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если СообщениеОбработано Тогда
		ОбрабатываемоеСообщение = Неопределено;
		Возврат;
	КонецЕсли;
	
	ДанныеСообщения = ОбсужденияСервер.НовыйДанныеСообщения();
	ДанныеСообщения.Объект = ОписаниеСообщения.ОбсуждениеИдентификатор;
	ДанныеСообщения.Дата   = НовоеСообщениеПользователя.Дата + 1;
	ДанныеСообщения.Текст  = ОтветНаПроизвольнуюРеплику(НовоеСообщениеПользователя.Текст);
	ДанныеСообщения.Автор  = ПользовательАссистент();
	ОбсужденияСервер.СоздатьСообщение(ДанныеСообщения);
	
КонецПроцедуры

Функция ОбрабатываемоеСообщениеСВопросомАссистента(СообщениеПользователя, РаспознанноеДействиеНадСообщением)
	
	СообщениеНаКотороеОтветили = ОбсужденияСервер.ПолучитьПоследнееСообщение(СообщениеПользователя.Обсуждение,
		ПользовательАссистентИдентификаторСВ(), СообщениеПользователя.Идентификатор);
	
	Если СообщениеНаКотороеОтветили = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СообщениеСодержитДействие = СообщениеНаКотороеОтветили.Действия.НайтиПоЗначению(РаспознанноеДействиеНадСообщением) <> Неопределено;
	
	Если НЕ СообщениеСодержитДействие Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СообщениеНаКотороеОтветили;
	
КонецФункции

Функция НовыйОписаниеСообщенияСВ(Сообщение = Неопределено, РазыменоватьДанные = Истина) Экспорт
	
	ОписаниеСообщения = АссистентУправленияКлиентСервер.НовыйОписаниеСообщенияСВ();
	
	Если Сообщение = Неопределено Тогда
		Возврат ОписаниеСообщения;
	КонецЕсли;
	
	Если ТипЗнч(Сообщение) = Тип("СообщениеСистемыВзаимодействия") Тогда
		СообщениеСВ = Сообщение;
	ИначеЕсли ТипЗнч(Сообщение) = Тип("ИдентификаторСообщенияСистемыВзаимодействия") Тогда
		СообщениеСВ = СистемаВзаимодействия.ПолучитьСообщение(Сообщение);
	КонецЕсли;
	
	ОписаниеСообщения.СообщениеИдентификатор = СообщениеСВ.Идентификатор;
	ОписаниеСообщения.ОбсуждениеИдентификатор = СообщениеСВ.Обсуждение;
	ОписаниеСообщения.Данные = СообщениеСВ.Данные;
	
	РазыменоватьДанныеСообщенияСВ(ОписаниеСообщения);
	
	Возврат ОписаниеСообщения;
	
КонецФункции

Процедура РазыменоватьДанныеСообщенияСВ(ОписаниеСообщения) Экспорт
	
	ОписаниеСообщения.Предмет = ОбсужденияСервер.РазыменоватьКонтекстОбсуждения(ОписаниеСообщения.ОбсуждениеИдентификатор);
	
	Если ТипЗнч(ОписаниеСообщения.Данные) = Тип("Строка") Тогда
		ОписаниеСообщения.РаспознанныеДанные = ПрочитатьJSONВСтруктуру(ОписаниеСообщения.Данные);
	КонецЕсли;
	
	ОписаниеСообщения.ДанныеРазыменованы = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработкаТекстовОбсуждений

Процедура УдалитьЛишниеСимволы(Текст)
	
	Текст = НРег(Текст);
	Текст = СокрЛП(Текст);
	
КонецПроцедуры

Функция ЭтоКодОтветаДа(Знач Текст)
	
	УдалитьЛишниеСимволы(Текст);
	
	Если Текст = "+"
		ИЛИ Текст = "да"
		ИЛИ Текст = "ок"
		ИЛИ Текст = "хорошо"
		ИЛИ Текст = "давай"
		ИЛИ Текст = "if" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоКодОтветаОтмена(Знач Текст)
	
	УдалитьЛишниеСимволы(Текст);
	
	Если Текст = "-"
		ИЛИ Текст = "нет"
		ИЛИ СтрНайти(Текст, " ") = 0 И СтрНачинаетсяС(Текст, "отмен")
		ИЛИ Текст = "ytn" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ОтветНаПроизвольнуюРеплику(Знач Текст)
	
	ГенераторЧисел = Новый ГенераторСлучайныхЧисел;
	
	УдалитьЛишниеСимволы(Текст);
	Слова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Текст);
	МаскиСлов = РазобратьМассивСловПоМаскам(Слова);
	
	Ответ = "";
	
	Если ТекстСодержитПоложительныйСмайлик(Текст) Тогда
		Ответ = ";-)";
	ИначеЕсли МаскиСлов.Найти("спсб") <> Неопределено
		ИЛИ МаскиСлов.Найти("блгдр") <> Неопределено
		ИЛИ Слова.Найти("мерси") <> Неопределено
		ИЛИ МаскиСлов.Найти("спс") <> Неопределено И МаскиСлов.Количество() = 1 Тогда
		Ответ = СтрВыбрать(ГенераторЧисел,
			НСтр("ru='Благодарю за Ваше благодарю!'"),
			НСтр("ru=':-)'"),
			НСтр("ru='Приятно с Вами работать'"),
			НСтр("ru='Не забудьте рассказать обо мне своим друзьям!'"),
			НСтр("ru='Обращайтесь, всегда рада помочь'"),
			НСтр("ru='Без проблем'"),
			НСтр("ru='Не стоит благодарности, это моя работа'")
		);
	ИначеЕсли Слова.Найти("даша") <> Неопределено Тогда
		Ответ = СтрВыбрать(ГенераторЧисел,
			НСтр("ru='Д.а.ш.а. — дружелюбный ассистент шустрой автоматизации :)'")
		);
	ИначеЕсли СтрЗаканчиваетсяНа(Текст, "?") Тогда
		Ответ = СтрВыбрать(ГенераторЧисел,
			НСтр("ru='Я бы и сама хотела знать ответ на такой вопрос'"),
			НСтр("ru='Возможно, стоит задать этот вопрос другим ассистентам?'"),
			НСтр("ru='Кажется мы обговаривали зону моей ответственности при приеме на работу?'")
		);
	ИначеЕсли СтрЗаканчиваетсяНа(Текст, "!") Тогда
		Ответ = СтрШаблон(
			НСтр("ru='%1, что %2 у Вас %3'"),
			СтрВыбрать(ГенераторЧисел, НСтр("ru='Хорошо'"), НСтр("ru='Как же хорошо'"), НСтр("ru='Прекрасно'")),
			СтрВыбрать(ГенераторЧисел, НСтр("ru='вызываю'"), НСтр("ru='моя работа вызывает'"), НСтр("ru='мой труд вызывает'")),
			СтрВыбрать(ГенераторЧисел, НСтр("ru='такие эмоции'"), НСтр("ru='живой интерес'"))
		);
	ИначеЕсли Слова.Количество() <= 1 Тогда
		Ответ = СтрВыбрать(ГенераторЧисел,
			НСтр("ru='Я прямо-таки не знаю как это прокомментировать'"),
			НСтр("ru='А?'"),
			НСтр("ru='Если бы Вы раскрыли свою мысль поподробнее..'"),
			НСтр("ru='Я дико извиняюсь, Вы еще спите или я уже обедаю?'")
		);
	Иначе
		Ответ = СтрВыбрать(ГенераторЧисел,
			НСтр("ru='Эх, не понимаем мы друг друга..'"),
			СтрШаблон(
				НСтр("ru='%1, чтобы %2'"),
				СтрВыбрать(ГенераторЧисел, НСтр("ru='Мне нужно время'"), НСтр("ru='Вероятно, нужно еще походить на курсы'")),
				СтрВыбрать(ГенераторЧисел, НСтр("ru='я смогла выполнять такие поручения'"), НСтр("ru='я научилась отвечать и на такие вопросы'"))
			),
			НСтр("ru='А посмотрите видео презентацию, где мои коллеги рассказывают о моих способностях'"),
			НСтр("ru='Мне нужно немного подумать'"),
			НСтр("ru='Кажется, пора в отпуск'")
		);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ТекстСодержитПоложительныйСмайлик(Текст)
	
	Возврат СтрНайти(Текст, ":-)") <> 0 ИЛИ СтрНайти(Текст, ":)") <> 0 ИЛИ СтрНайти(Текст, ";)") <> 0 ИЛИ СтрНайти(Текст, ";-)") <> 0;
	
КонецФункции

Функция СтрВыбрать(ГенераторСлучайныхЧисел, Значение1 = "", Значение2 = "", Значение3 = "", Значение4 = "", Значение5 = "", Значение6 = "", Значение7 = "", Значение8 = "", Значение9 = "", Значение10 = "")
	
	МассивСтрок = Новый Массив;
	Если Значение1 <> "" Тогда
		МассивСтрок.Добавить(Значение1);
	КонецЕсли;
	Если Значение2 <> "" Тогда
		МассивСтрок.Добавить(Значение2);
	КонецЕсли;
	Если Значение3 <> "" Тогда
		МассивСтрок.Добавить(Значение3);
	КонецЕсли;
	Если Значение4 <> "" Тогда
		МассивСтрок.Добавить(Значение4);
	КонецЕсли;
	Если Значение5 <> "" Тогда
		МассивСтрок.Добавить(Значение5);
	КонецЕсли;
	Если Значение6 <> "" Тогда
		МассивСтрок.Добавить(Значение6);
	КонецЕсли;
	Если Значение7 <> "" Тогда
		МассивСтрок.Добавить(Значение7);
	КонецЕсли;
	Если Значение8 <> "" Тогда
		МассивСтрок.Добавить(Значение8);
	КонецЕсли;
	Если Значение9 <> "" Тогда
		МассивСтрок.Добавить(Значение9);
	КонецЕсли;
	Если Значение10 <> "" Тогда
		МассивСтрок.Добавить(Значение10);
	КонецЕсли;
	
	Возврат МассивСтрок.Получить(ГенераторСлучайныхЧисел.СлучайноеЧисло(0, МассивСтрок.ВГраница()));
	
КонецФункции

Функция РазобратьМассивСловПоМаскам(Слова)
	
	МаскиСлов = ОбщегоНазначения.СкопироватьРекурсивно(Слова, Ложь);
	Для Итератор = 0 По МаскиСлов.ВГраница() Цикл
		ПолучитьМаскуСлова(МаскиСлов[Итератор]);
	КонецЦикла;
	
	Возврат МаскиСлов;
	
КонецФункции

Процедура ПолучитьМаскуСлова(Текст)
	
	УдаляемыеСимволы = УдаляемыеСимволы();
	Для каждого УдаляемыйСимвол Из УдаляемыеСимволы Цикл
		Текст = СтрЗаменить(Текст, УдаляемыйСимвол, "");
	КонецЦикла;
	
КонецПроцедуры

Функция УдаляемыеСимволы()
	
	УдаляемыеСимволы = Новый Массив;
	УдаляемыеСимволы.Добавить("а");
	УдаляемыеСимволы.Добавить("е");
	УдаляемыеСимволы.Добавить("ё");
	УдаляемыеСимволы.Добавить("и");
	УдаляемыеСимволы.Добавить("о");
	УдаляемыеСимволы.Добавить("у");
	УдаляемыеСимволы.Добавить("ы");
	УдаляемыеСимволы.Добавить("э");
	УдаляемыеСимволы.Добавить("ю");
	УдаляемыеСимволы.Добавить("я");
	
	Возврат УдаляемыеСимволы;
	
КонецФункции

Функция РаспознатьДействиеНадСообщением(ТекстПользователя)
	
	Если ЭтоКодОтветаДа(ТекстПользователя) Тогда
		Возврат АссистентУправленияКлиентСервер.КодДействияСообщенияВыполнитьДействие();
	ИначеЕсли ЭтоКодОтветаОтмена(ТекстПользователя) Тогда
		Возврат АссистентУправленияКлиентСервер.КодДействияСообщенияОтмена();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИмяСобытияЖР()
	
	Возврат НСтр("ru='АссистентУправления'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#Область ПользовательАссистент

Функция ИмяПользователяАссистента()
	
	Возврат НСтр("ru='АссистентУправленияНашейФирмой'");
	
КонецФункции

Функция ПолноеИмяПользователяАссистента()
	
	Возврат НСтр("ru='Даша (ассистент УНФ)'");
	
КонецФункции

Функция НовыйСлужебныйПользовательАссистента()
	
	Если НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		ВызватьИсключение НСтр("ru='Информационная база не зарегистрирована в Системе взаимодействия.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
		ОписаниеПользователяИБ.Имя = ИмяПользователяАссистента();
		ОписаниеПользователяИБ.ПолноеИмя = ПолноеИмяПользователяАссистента();
		ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
		ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен", Ложь);
		ОписаниеПользователяИБ.ЗапрещеноИзменятьПароль = Истина;
		ОписаниеПользователяИБ.Роли = Новый Массив;
		ОписаниеПользователяИБ.Роли.Добавить(Метаданные.Роли.ИспользованиеМетодовПровайдераТелефонии.Имя);
		ОписаниеПользователяИБ.СохраняемоеЗначениеПароля = "";
		
		НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
		НовыйПользователь.Наименование = ОписаниеПользователяИБ.ПолноеИмя;
		НовыйПользователь.Служебный = Истина;
		НовыйПользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		НовыйПользователь.Записать();
		
		ПользовательСВ = СистемаВзаимодействия.СоздатьПользователя(ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(НовыйПользователь.ИдентификаторПользователяИБ));
		ПользовательСВ.Картинка = БиблиотекаКартинок.АссистентУправления;
		ПользовательСВ.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Возврат НовыйПользователь.Ссылка;
	
КонецФункции

Функция НовыйСлужебныйПользовательСВАссистента()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБАссистента = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПользовательАссистент(), "ИдентификаторПользователяИБ"));
	
	ПользовательСВ = СистемаВзаимодействия.СоздатьПользователя(ПользовательИБАссистента);
	ПользовательСВ.Картинка = БиблиотекаКартинок.АссистентУправления;
	ПользовательСВ.Записать();
	
	Возврат ПользовательСВ;
	
КонецФункции

#КонецОбласти

Функция ИсточникПредмета(ТипПредмета)
	
	ТипыПредметов = Новый Соответствие;
	
	Источники = Новый Массив;
	АссистентУправленияПереопределяемый.ПриОпределенииИсточников(Источники);
	
	Для каждого Источник Из Источники Цикл
		
		Модуль = ОбщегоНазначения.ОбщийМодуль(Источник);
		Модуль.ПриОпределенииТиповПредметовСобытий(ТипыПредметов);
		
		Если ТипыПредметов.Получить(ТипПредмета) <> Неопределено Тогда
			Возврат ОбщегоНазначения.ОбщийМодуль(Источник);
		КонецЕсли;
		
	КонецЦикла;
	
	ВызватьИсключение СтрШаблон(НСтр("ru='Для типа предмета ""%1"" не определен модуль выполнения.'"), ТипПредмета);
	
КонецФункции

Функция ОписаниеДействияПоПредмету(Действия, ДействиеИдентификатор, Предмет)
	
	НайденныеДействия = Действия.НайтиСтроки(Новый Структура("Идентификатор,Предмет", ДействиеИдентификатор, Предмет));
	
	Если НайденныеДействия.Количество() > 1 Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='Обнаружены неуникальные действия по идентификатору: ""%1"", Предмет: ""%2""'"), ДействиеИдентификатор, Предмет);
	КонецЕсли;
	
	Если НайденныеДействия.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат НайденныеДействия[0];
	
КонецФункции

Функция ОписаниеОбщегоДействия(Действия, ДействиеИдентификатор)
	
	НайденныеДействия = Действия.НайтиСтроки(Новый Структура("Идентификатор,Общее", ДействиеИдентификатор, Истина));
	
	Если НайденныеДействия.Количество() > 1 Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='Обнаружены неуникальные общие действия по идентификатору: ""%1""'"), ДействиеИдентификатор);
	КонецЕсли;
	
	Если НайденныеДействия.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат НайденныеДействия[0];
	
КонецФункции

Функция ОписаниеДействия(Предмет, ДействиеИдентификатор)
	
	Действия = НовыйТаблицаДействий();
	ПриОпределенииДействий(Действия);
	
	ОписаниеДействия = НайтиОписаниеДействия(Действия, Предмет, ДействиеИдентификатор);
	
	Если ОписаниеДействия = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='Действие по идентификатору не обнаружено: ""%1"", Предмет: ""%2""'"), ДействиеИдентификатор, Предмет);
	КонецЕсли;
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ОписаниеДействия);
	
КонецФункции

Функция ОписаниеСобытия(Предмет, СобытиеИдентификатор)
	
	События = НовыйТаблицаСобытий();
	ПриОпределенииСобытий(События);
	
	НайденныеСобытия = События.НайтиСтроки(Новый Структура("Предмет,Идентификатор", Предмет, СобытиеИдентификатор));
	
	Если НайденныеСобытия.Количество() = 0 Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='Событие по идентификатору не обнаружено: ""%1"", Событие: ""%2""'"), СобытиеИдентификатор);
	КонецЕсли;
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НайденныеСобытия[0]);
	
КонецФункции

Процедура ВыполнитьДействияЗадачи(Источник, СобытиеИдентификатор, Предмет, Задача, ДополнительныеПараметрыСобытия = Неопределено) Экспорт
	
	Действие = ОписаниеДействия(Задача.ТипПредмета, Задача.ДействиеИдентификатор);
	Событие = ОписаниеСобытия(Задача.ТипПредмета, СобытиеИдентификатор);
	
	ЗначенияЗаполнения = Справочники.ЗадачиАссистентаУправления.ЗначенияЗаполнения(Задача);
	
	НачатьТранзакцию();
	Попытка
		
		Если ДополнительныеПараметрыСобытия = Неопределено Тогда
			ДополнительныеПараметрыСобытия = Новый Структура;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЗадачаАссистентаУправления", Задача);
		ДополнительныеПараметры.Вставить("Источник", Источник);
		ДополнительныеПараметры.Вставить("Событие", СобытиеИдентификатор);
		ДополнительныеПараметры.Вставить("ДополнительныеПараметрыСобытия", ДополнительныеПараметрыСобытия);
		
		Результат = Новый Структура;
		Результат.Вставить("Успешно", Истина);
		Результат.Вставить("ДействиеВыполнено", Истина);
		Результат.Вставить("ТекстОшибки", "");
		Результат.Вставить("ДанныеСообщений", Новый Массив);
		Результат.Вставить("Отказ", Ложь);
		
		МодульСобытия = ОбщегоНазначения.ОбщийМодуль(Событие.Модуль);
		МодульДействия = ОбщегоНазначения.ОбщийМодуль(Действие.Модуль);
		
		МодульСобытия.ПередОбработкойСобытия(Предмет, СобытиеИдентификатор, Действие.Идентификатор, ЗначенияЗаполнения, ДополнительныеПараметры, Результат);
		Если НЕ Результат.Отказ Тогда
			МодульДействия.ВыполнитьДействие(Предмет, Действие, ЗначенияЗаполнения, ДополнительныеПараметры, Результат);
			МодульСобытия.ПослеОбработкиСобытия(Предмет, СобытиеИдентификатор, Действие.Идентификатор, ЗначенияЗаполнения, ДополнительныеПараметры, Результат);
		КонецЕсли;
		
		НужноОтправитьСообщение = НЕ ЗначениеЗаполнено(Результат.ТекстОшибки) И Результат.ДанныеСообщений.Количество() <> 0;
		Если НужноОтправитьСообщение Тогда
			ДобавитьСообщениеОбсужденийПослеВыполненияЗадачи(Предмет, Результат.ДанныеСообщений, Задача);
		КонецЕсли;
		
		Если Результат.Успешно ИЛИ Результат.Отказ Тогда
			ОтразитьУспешноеВыполнениеЗадачи(Источник, Предмет, СобытиеИдентификатор, Задача);
			УдалитьЗадачуИзОчередиВыполнения(Источник, Предмет, СобытиеИдентификатор, Задача);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ДобавитьСообщениеОбсужденийПослеВыполненияЗадачи(Предмет, ДанныеСообщений, Задача)
	
	Для каждого ДанныеСообщения Из ДанныеСообщений Цикл
		Если НЕ ЗначениеЗаполнено(ДанныеСообщения.Объект) Тогда
			ДанныеСообщения.Объект = Предмет;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСообщения.Автор) Тогда
			ДанныеСообщения.Автор = ПользовательАссистент();
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСообщения.Получатель) Тогда
			
			ОповещениеЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "СпособОповещения,ПользовательДляОповещения");
			Если ОповещениеЗадачи.СпособОповещения = Перечисления.СпособОповещенияАссистентаУправления.СообщениеОбсужденияОтветственному Тогда
				ДанныеСообщения.Получатель = ПолучитьОтветственного(Предмет);
			ИначеЕсли ОповещениеЗадачи.СпособОповещения = Перечисления.СпособОповещенияАссистентаУправления.СообщениеОбсужденияПользователю Тогда
				ДанныеСообщения.Получатель = ОповещениеЗадачи.ПользовательДляОповещения;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(ДанныеСообщения.Данные) = Тип("Структура") Тогда
			
			Если ДанныеСообщения.Данные.Количество() = 0 Тогда
				ДанныеСообщения.Данные = Неопределено;
			Иначе
				ДанныеСообщения.Данные = СоздатьJSONИзСтруктуры(ДанныеСообщения.Данные);
			КонецЕсли;
			
		КонецЕсли;
		
		ОбсужденияСервер.СоздатьСообщениеОтложенно(ДанныеСообщения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтразитьУспешноеВыполнениеЗадачи(Источник, Предмет, Событие, Задача, ДополнительныеПараметры = Неопределено)
	
	НаборЗаписей = РегистрыСведений.ВыполненныеЗадачиАссистентаУправления.СоздатьНаборЗаписей();
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период   = ТекущаяДатаСеанса();
	НоваяЗапись.Источник = Источник;
	НоваяЗапись.Предмет  = Предмет;
	НоваяЗапись.Событие  = Событие;
	НоваяЗапись.Задача   = Задача;
	НаборЗаписей.Записать(Ложь);
	
КонецПроцедуры

Процедура УдалитьЗадачуИзОчередиВыполнения(Источник, Предмет, Событие, Задача, ДополнительныеПараметры = Неопределено)
	
	ЗаписьВОчереди = РегистрыСведений.ОчередьЗадачАссистентаУправления.СоздатьМенеджерЗаписи();
	ЗаписьВОчереди.Предмет = Предмет;
	ЗаписьВОчереди.Событие = Событие;
	ЗаписьВОчереди.Источник = Источник;
	ЗаписьВОчереди.Задача = Задача;
	ЗаписьВОчереди.Прочитать();
	ЗаписьВОчереди.Удалить();
	
КонецПроцедуры

Процедура ОтразитьОшибкуВыполнения(ИнформацияОбОшибке, Предмет, Событие, Задача, Источник)
	
	ТекстОшибкиПодробный = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	ТекстОшибкиКороткий = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖР(), УровеньЖурналаРегистрации.Ошибка, Задача.Метаданные(), Задача, ТекстОшибкиПодробный);
	
	ХешТекстОшибки = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ТекстОшибкиПодробный, ХешФункция.MD5);
	ХешТекстОшибкиПоследнегоВыполнения = ХешТекстОшибкиПоследнегоВыполнения(Предмет, Событие, Задача, Источник);
	
	Если ХешТекстОшибкиПоследнегоВыполнения <> Неопределено И ХешТекстОшибки = ХешТекстОшибкиПоследнегоВыполнения Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru='Ошибка при выполнении задачи ""%1""'"), Задача));
	МассивСтрок.Добавить(Символы.ПС);
	Если ЗначениеЗаполнено(Источник) Тогда
		МассивСтрок.Добавить(ПолучитьНавигационнуюСсылку(Источник));
		МассивСтрок.Добавить(" → ");
	КонецЕсли;
	МассивСтрок.Добавить(ПолучитьНавигационнуюСсылку(Предмет));
	МассивСтрок.Добавить(Символы.ПС);
	МассивСтрок.Добавить(ТекстОшибкиКороткий);
	
	ДанныеСообщения = ОбсужденияСервер.НовыйДанныеСообщения();
	ДанныеСообщения.Объект = КлючОбсуждениеЖурналРаботыАссистента();
	ДанныеСообщения.Текст = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(МассивСтрок, "");
	ДанныеСообщения.Автор = ПользовательАссистент();
	ОбсужденияСервер.СоздатьСообщениеОтложенно(ДанныеСообщения);
	
	Попытка
		
		Запись = РегистрыСведений.ОчередьЗадачАссистентаУправления.СоздатьМенеджерЗаписи();
		Запись.Предмет  = Предмет;
		Запись.Событие  = Событие;
		Запись.Задача   = Задача;
		Запись.Источник = Источник;
		Запись.Прочитать();
		
		Запись.ХешТекстОшибки = ХешТекстОшибки;
		Запись.Записать();
		
	Исключение
		
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР(), УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		
	КонецПопытки;
	
КонецПроцедуры

Функция ХешТекстОшибкиПоследнегоВыполнения(Предмет, Событие, Задача, Источник)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОчередьЗадачАссистентаУправления.ХешТекстОшибки КАК ХешТекстОшибки
	|ИЗ
	|	РегистрСведений.ОчередьЗадачАссистентаУправления КАК ОчередьЗадачАссистентаУправления
	|ГДЕ
	|	ОчередьЗадачАссистентаУправления.Предмет = &Предмет
	|	И ОчередьЗадачАссистентаУправления.Событие = &Событие
	|	И ОчередьЗадачАссистентаУправления.Задача = &Задача
	|	И ОчередьЗадачАссистентаУправления.Источник = &Источник";
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("Событие", Событие);
	Запрос.УстановитьПараметр("Задача", Задача);
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ХешТекстОшибки;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ОтразитьХодВыполнения(Знач ИмяСобытия = "", Комментарий, Данные = Неопределено, ОбъектМетаданных = Неопределено, УровеньЖР = Неопределено)
	
	Если ИмяСобытия = "" Тогда
		ИмяСобытия = ИмяСобытияЖР();
	ИНаче
		ИмяСобытия = ИмяСобытияЖР() + "." + ИмяСобытия;
	КонецЕсли;
	
	Если УровеньЖР = Неопределено Тогда
		УровеньЖР = УровеньЖурналаРегистрации.Примечание;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖР, ОбъектМетаданных, Данные, Комментарий);
	
КонецПроцедуры

Процедура УстановитьИспользованиеРегламентногоЗаданияВыполнениеЗадач(Использование)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задание = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.ВыполнениеЗадачАссистентаУправления);
	
	НадоСоздатьЗадание = Использование И Задание = Неопределено;
	НадоУдалитьЗадание = НЕ Использование И Задание <> Неопределено;
	НадоИзменитьЗадание = Задание <> Неопределено И Задание.Использование <> Использование;
	
	ИмяСобытия = НСтр("ru='ОбновлениеЗадания'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Если НадоСоздатьЗадание Тогда
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ВыполнениеЗадачАссистентаУправления);
		ПараметрыЗадания.Вставить("Использование", Истина);
		ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗаданияПоУмолчанию());
		ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", ?(ОбщегоНазначения.РежимОтладки(), 20, 3600));
		ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
		
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		ОтразитьХодВыполнения(ИмяСобытия, "РегламентныеЗаданияСервер.ДобавитьЗадание");
		
	ИначеЕсли НадоУдалитьЗадание Тогда
		
		РегламентныеЗаданияСервер.УдалитьЗадание(Задание);
		ОтразитьХодВыполнения(ИмяСобытия, "РегламентныеЗаданияСервер.УдалитьЗадание");
		
	ИначеЕсли НадоИзменитьЗадание Тогда
		
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, Новый Структура("Использование", Использование));
		ОтразитьХодВыполнения(ИмяСобытия, СтрШаблон("РегламентныеЗаданияСервер.ИзменитьЗадание(%1)", Использование));
		
	КонецЕсли;
	
КонецПроцедуры

Функция РасписаниеРегламентногоЗаданияПоУмолчанию()
	
	// Запуск задания через 30 секунд после возникновения нового события.
	// Если в процессе выполнения задания появились новые задачи в очереди -- повторное выполнение задания через 30 секунд.
	// Задание удалится, если задание выполнено успешно и очередь задач пустая.
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ДниНедели   = ДниНедели;
	Расписание.Месяцы      = Месяцы;
	Расписание.ПериодПовтораВТечениеДня = ?(ОбщегоНазначения.РежимОтладки(), 5, 180);
	Расписание.ПериодПовтораДней        = 1; // каждый день
	
	Возврат Расписание;
	
КонецФункции

// Функция преобразования для платформенной процедуры глобального контекста ЗаписатьJSON(), см. СоздатьJSONИзСтруктуры()
//
Функция ПреобразоватьЗначениеJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Если НЕ ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение)) Тогда
		Возврат Значение;
	КонецЕсли;
	
	Результат = Новый Структура;
	// Вычислить() используется для обхода ложного срабатывания платформенной расширенной проверки.
	Результат.Вставить("type", Вычислить("Значение.Метаданные().ПолноеИмя()"));
	Результат.Вставить("guid", Вычислить("Строка(Значение.УникальныйИдентификатор())"));
	
	Возврат Результат;
	
КонецФункции

// Функция восстановления для платформенной процедуры глобального контекста ПрочитатьJSON(), см. ПрочитатьJSONВСтруктуру()
//
Функция ВосстановитьЗначениеJSON(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	Если Свойство <> Неопределено И ТипЗнч(Значение) = Тип("Структура") Тогда
		
		Если Значение.Количество() = 2 И Значение.Свойство("type") И Значение.Свойство("guid") Тогда
			
			Возврат ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Значение.type).ПолучитьСсылку(Новый УникальныйИдентификатор(Значение.guid));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ПрочитатьJSONВСтруктуру(ТекстJSON)
	
	Если ТекстJSON = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	
	ПараметрыJSON = ПрочитатьJSON(ЧтениеJSON,,,, "ВосстановитьЗначениеJSON", АссистентУправления);
	
	ЧтениеJSON.Закрыть();
	
	Возврат ПараметрыJSON;
	
КонецФункции

Функция СоздатьJSONИзСтруктуры(Параметры)
	
	Если Параметры.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, Параметры,, "ПреобразоватьЗначениеJSON", АссистентУправления);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

#КонецОбласти
