#Область ИнтеграцияИСПереопределяемый

// Заполняет в табличной части служебные реквизиты, например: признак использования характеристик номенклатуры, артикул.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма.
//  ТабличнаяЧасть - ДанныеФормыКоллекция - таблица для заполнения.
//
Процедура ЗаполнитьСлужебныеРеквизитыВКоллекции(Форма, ТабличнаяЧасть) Экспорт
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = ТабличнаяЧасть.Выгрузить(, "НомерСтроки, Номенклатура");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Номенклатура.ТабачнаяПродукция
	|				ИЛИ ТаблицаТоваров.Номенклатура.АлкогольнаяПродукция
	|					И ТаблицаТоваров.Номенклатура.ВидАлкогольнойПродукции.Маркируемый
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МаркируемаяПродукция,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Номенклатура.ТабачнаяПродукция
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТабачнаяПродукция
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеНоменклатуры = Новый Структура;
		ДанныеНоменклатуры.Вставить("МаркируемаяПродукция", Выборка.МаркируемаяПродукция);
		ДанныеНоменклатуры.Вставить("ТабачнаяПродукция", Выборка.ТабачнаяПродукция);
		
		СтрокаТЧ = ТабличнаяЧасть[Выборка.НомерСтроки - 1];
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ДанныеНоменклатуры);
		
	КонецЦикла;
	
	ИнтеграцияВЕТИСУНФВызовСервера.ЗаполнитьПризнакиИспользованияХарактеристикВЕТИС(Форма);
	
КонецПроцедуры

// Проверяет заполнение характеристик в таблице значений.
//
// Параметры:
//  ТаблицаТоваров - ТаблицаЗначений - таблица для проверки с колонками: Номенклатура, Характеристика.
//  Отказ - Булево - Истина - характеристики заполнены в требуемых строках, в противном случае - Ложь.
//
Процедура ПроверитьЗаполнениеХарактеристикВТаблицеЗначений(ТаблицаТоваров, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользоватьХарактеристики
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаХарактеристика
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользоватьХарактеристики";

	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеЗаполненаХарактеристика Тогда
			Отказ = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// В процедуре требуется определить признак использования характеристик 
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//   Использование - Булево - Признак использования характеристик (для номенклатуры или общий)
//   Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеХарактеристик(Использование, Номенклатура) Экспорт
	
	Если Номенклатура = Неопределено Тогда
		Использование = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	Иначе
		Использование = Номенклатура.ИспользоватьХарактеристики;
	КонецЕсли;
	
КонецПроцедуры

// В процедуре требуется определить признак использования серий
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//   Использование - Булево - Признак использования серий (для номенклатуры или общий)
//   Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеСерий(Использование, Номенклатура) Экспорт
	
	Если Номенклатура = Неопределено Тогда
		ФОСерии = ПолучитьФункциональнуюОпцию("ИспользоватьСерийныеНомера");
		ФОПартии = ПолучитьФункциональнуюОпцию("ИспользоватьПартии");
		Использование = ФОСерии ИЛИ ФОПартии;
	ИначеЕсли Номенклатура.ПодконтрольнаяПродукцияВЕТИС Тогда
		Использование = Номенклатура.ИспользоватьПартии;
	ИначеЕсли Номенклатура.ВидМаркировки = Перечисления.ВидыМаркировки.МаркируемаяПродукция Тогда
		Использование = Номенклатура.ИспользоватьСерийныеНомера;
	КонецЕсли;
	
КонецПроцедуры

// В процедуре требуется определить признак использования упаковок для номенклатуры.
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//   Использование - Булево - Признак использования упаковок (для номенклатуры или общий)
//   Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеУпаковок(Использование, Номенклатура) Экспорт
	
	Использование = ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения");
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение структуры данными из информационной базы.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на собственную организацию или контрагента,
//  Сведения - Структура - структура с реквизитами организации, которые требуется заполнить,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
//
Процедура ЗаполнитьСведенияОбОрганизации(Организация, Сведения, ДатаСведений = Неопределено) Экспорт
	
	Если ДатаСведений = Неопределено Тогда
		ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Организация, ДатаСведений);
	ЗаполнитьЗначенияСвойств(Сведения, СведенияОбОрганизации);
	
	Если СведенияОбОрганизации.Свойство("ПолноеНаименование") Тогда
		Сведения.Вставить("Наименование", СведенияОбОрганизации.ПолноеНаименование);
	Иначе
		Сведения.Вставить("Наименование", СведенияОбОрганизации.Представление);
	КонецЕсли;
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение структуры данными ИНН/КПП из информационной базы.
//
// Параметры:
//   Сведения    - Структура - структура с реквизитами организации/контрагента, которые требуется заполнить,
//   Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС, ОпределяемыйТип.КонтрагентГосИС - ссылка на 
//     собственную организацию или контрагента
//   ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект для определения КПП.
//
Процедура ЗаполнитьИННКПППоОрганизацииКонтрагенту(Сведения, Организация, ТорговыйОбъект = Неопределено) Экспорт
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН, КПП");
	Сведения.Вставить("ИНН", Реквизиты.ИНН);
	Сведения.Вставить("КПП", Реквизиты.КПП);
	
КонецПроцедуры

// Заполняет представление руководителя организации.
//
// Параметры:
//  ПредставлениеРуководителя - (см. ИнтеграцияИС.ДанныеРуководителяОрганизации) - заполняемая структура представления
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на собственную организацию или контрагента,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
//
Процедура ОпределитьДанныеРуководителяОрганизации(ПредставлениеРуководителя, Организация, ДатаСведений) Экспорт
	
	Если ТипЗнч(Организация) =  Тип("СправочникСсылка.Организации") Тогда
		
		ДанныеРуководителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ПодписьРуководителя");
		ПредставлениеРуководителя.Вставить("Руководитель", Строка(ДанныеРуководителя.ФизическоеЛицо));
		ПредставлениеРуководителя.Вставить("Должность", Строка(ДанныеРуководителя.Должность));
		
	КонецЕсли;
	
КонецПроцедуры

// В процедуре нужно реализовать поиск организации предприятия по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомой организации,
//  КПП - Строка - КПП искомой организации.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ОрганизацияКонтрагентГосИС - найденная организация,
//  Неопределено - организация не найдена.
//
Процедура ЗаполнитьОрганизациюПоИННКПП(Организация, ИНН, КПП) Экспорт
	
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Организации", ИНН, КПП, Организация);
	
КонецПроцедуры

// В процедуре нужно реализовать поиск контрагента по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомого контрагента,
//  КПП - Строка - КПП искомого контрагента.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ОрганизацияКонтрагентГосИС, ОпределяемыйТип.КонтрагентГосИС - найденный контрагент,
//  Неопределено - контрагент не найден.
//
Процедура ЗаполнитьКонтрагентаПоИННКПП(Контрагент, ИНН, КПП) Экспорт
	
	ИмяСправочника = "Контрагенты";
	
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП(ИмяСправочника, ИНН, КПП, Контрагент);
	
КонецПроцедуры

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить видимость команд.
//
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы) Экспорт
	
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	
	Если ЗначениеЗаполнено(ПрефиксыЭлементовФормы) Тогда
		МассивПрефиксыЭлементовФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрефиксыЭлементовФормы, ",");
	Иначе
		МассивПрефиксыЭлементовФормы = Новый Массив;
		МассивПрефиксыЭлементовФормы.Добавить(ПрефиксыЭлементовФормы);
	КонецЕсли;
	
	Форма.ИспользоватьПодключаемоеОборудование = ИспользоватьПодключаемоеОборудование;
	
	Для Каждого Префикс Из МассивПрефиксыЭлементовФормы Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			Префикс + "ВыгрузитьДанныеВТСД",
			"Видимость",
			ИспользоватьПодключаемоеОборудование);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет параметры интеграции с библиотеками ГосИС по входящему объекту.
// 
// Параметры:
//  ПараметрыИнтеграции - Структура - См. ИнтеграцияИС.ПараметрыИнтеграцииВФорме.
//  ОбъектМетаданных - Метаданные - Метаданные объекта.
//
Процедура ЗаполнитьПараметрыИнтеграцииВФормеПоОбъекту(ПараметрыИнтеграции, ОбъектМетаданных) Экспорт
	
	ОбъектыИнтеграцииВЕТИС = Новый Массив;
	ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьОбъектыМетаданныхИнтеграции(ОбъектыИнтеграцииВЕТИС);
	Если ОбъектыИнтеграцииВЕТИС.Найти(ОбъектМетаданных) <> Неопределено Тогда
		ПараметрыИнтеграции.ИменаПодсистем = "ВетИС";
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру параметров возможных получателей печатных форм при отправке по электронной почте.
//
// Параметры:
// 		ПараметрыОтправки - Структура - содержит параметры отправки сформированных печатных форм
// 		ДанныеОбъектовПечати - Массив,Соответствие - данные о печатаемых объектах
// 		КоллекцияПечатныхФорм - ТаблицаЗначений - содержит информацию о формируемых печатных формах.
//
Процедура ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм)  Экспорт
	
	УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// см ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании.
//
Процедура ПроверитьВозможностьВводаНаОсновании(Документ,
	                                           Статус = Неопределено,
	                                           ЕстьОшибкиПроведен = Ложь,
	                                           ЕстьОшибкиСтатус = Ложь,
	                                           МассивДопустимыхСтатусов = Неопределено,
	                                           СоглашениеДоступноВнешнемуПользователю = Неопределено) Экспорт
	
	Если ЕстьОшибкиПроведен Тогда
		ТекстОшибки = НСтр("ru='Документ %Документ% не проведен. Ввод на основании непроведенного документа запрещен.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", Документ);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Возвращаяет представление объекта.
// 
// Параметры:
// 	Представление - Строка - Исходящий параметр со значением представления.
// 	ПараметрОбъект - Строка, Объект - Наименование типа объекта либо сам объект.
//
Процедура УстановитьПредставлениеОбъекта(Представление, ПараметрОбъект) Экспорт
	
	Если ПараметрОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = ?(ТипЗнч(ПараметрОбъект) = Тип("Строка"), Метаданные.НайтиПоПолномуИмени(ПараметрОбъект), ПараметрОбъект);
	
	СтруктураПредставления = Новый Структура("ПредставлениеОбъекта");
	ЗаполнитьЗначенияСвойств(СтруктураПредставления, МетаданныеОбъекта);
	Если Не ПустаяСтрока(СтруктураПредставления.ПредставлениеОбъекта) Тогда
		Представление = СтруктураПредставления.ПредставлениеОбъекта;
	Иначе
		Представление = МетаданныеОбъекта.Представление();
	КонецЕсли;
	
КонецПроцедуры

// Заполняет представление строки номенклатуры.
//
// Параметры:
//   Представление  - Строка                                     - представление для заполнения,
//   Номенклатура   - ОпределяемыйТип.Номенклатура               - ссылка на номенклатуру,
//   Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - ссылка на характеристику номенклатуры,
//   Упаковка       - ОпределяемыйТип.Упаковка                   - ссылка на упаковку.
//   Серия          - ОпределяемыйТип.СерияНоменклатуры          - ссылка на серию номенклатуры.
//
Процедура ЗаполнитьПредставлениеНоменклатуры(Представление, Номенклатура, Характеристика, Упаковка, Серия) Экспорт
	
	Представление = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Номенклатура, Характеристика,, Серия);
	
КонецПроцедуры

// Проверяет наличие права создания контрагента у текущего пользователя.
//
// Параметры:
//  ДоступРазрешен - Булево - Истина, если есть право создания контрагента, Ложь в обратном случае.
//
Процедура ПравоСозданияКонтрагента(ДоступРазрешен) Экспорт
	
	ДоступРазрешен = ПравоДоступа("Добавление", Метаданные.Справочники.Контрагенты);
	
КонецПроцедуры

// См. ОбщийМодуль.ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту()
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	Если НастройкиФормы.ИмяФормы = "Обработка.ГенерацияШтрихкодовУпаковок.Форма.Форма" Тогда
		Обработки.ГенерацияШтрихкодовУпаковок.ПриОпределенииКомандПодключенныхКОбъекту(Команды);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет параметры указания серий для товаров, указанных в объекте.
//
// Параметры:
//   Параметры  - Структура        - выходной, параметры указания серий, состав полей определен в функции
//                                 НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//   ТипОбъекта - ОбъектМетаданных - Тип объекта коллекции объектов метаданных.
//   Объект     - Структура        - Структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
Процедура ЗаполнитьПараметрыУказанияСерий(Параметры, ТипОбъекта, Объект) Экспорт
	
	Если ТипОбъекта = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийПроизводственнаяОперацияВЕТИС(Объект)
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийИсходящаяТранспортнаяОперацияВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийВходящаяТранспортнаяОперацияВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийИнвентаризацияПродукцииВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЗапросСкладскогоЖурналаВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийЗапросСкладскогоЖурналаВЕТИС(Объект);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает параметры указания серий для товаров, указанных в объекте.
//
// Параметры:
//   Параметры       - Структура - выходной, особенности указания серий в объекте, состав полей определен в функции
//                                 НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//   Объект          - Объект, ДанныеФормыСтруктура - Объект, для формы которого нужно сформировать параметры
//                                 указания серий.
//   МенеджерОбъекта - Менеджер  - Менеджер объекта, для формы которого нужно сформировать параметры указания серий.
//
Процедура ЗаполнитьПараметрыУказанияСерийФормыОбъекта(Параметры, Объект, МенеджерОбъекта) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Ссылка") Тогда
		
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПроизводственнаяОперацияВЕТИС") Тогда
			
			Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийПроизводственнаяОперацияВЕТИС(Объект)
			
		ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда
			
			Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийИсходящаяТранспортнаяОперацияВЕТИС(Объект);
			
		ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
			
			Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийВходящаяТранспортнаяОперацияВЕТИС(Объект);
			
		ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ИнвентаризацияПродукцииВЕТИС") Тогда
			
			Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийИнвентаризацияПродукцииВЕТИС(Объект);
			
		ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗапросСкладскогоЖурналаВЕТИС") Тогда
			
			Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийЗапросСкладскогоЖурналаВЕТИС(Объект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// В данной процедуре требуется переопределить текст запроса, определяющий свойства маркируемой продукции.
// Номенклатура для запроса лежить во временной таблице "ДанныеШтрихкодовУпаковок". (ДанныеШтрихкодовУпаковок.Номенклатура).
// "ВидПродукции". Поле "Номенклатура" желательно индексировать.
//   Колонки временной таблицы "ДанныеШтрихкодовУпаковок":
//    * Номенклатура   - ОпределяемыйТип.Номенклатура
//    * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры
//    * Серия          - ОпределяемыйТип.СерияНоменклатуры
//   Ожидаемые действия:
//   * Создание временной таблицы "СвойстваМаркируемойПродукции" с колонками:
//     ** Номенклатура         - ОпределяемыйТип.Номенклатура
//     ** МаркируемаяПродукция - Булево
//     ** ВидПродукции         - ПеречислениеСсылка.ВидыПродукцииИС
// Параметры:
//  ТекстЗапросаСвойстваМаркируемойПродукции - Строка - Переопределяемый текст запроса.
Процедура ПриОпределенииТекстаЗапросаСвойствМаркируемойПродукции(ТекстЗапросаСвойстваМаркируемойПродукции) Экспорт
	
	ТекстЗапросаСвойстваМаркируемойПродукции =
	"ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковок.Номенклатура КАК Номенклатура,
	|	ДанныеШтрихкодовУпаковок.Характеристика КАК Характеристика,
	|	ДанныеШтрихкодовУпаковок.Серия КАК Серия,
	|	МАКСИМУМ(ЕСТЬNULL(ДанныеШтрихкодовУпаковок.Номенклатура.ВидАлкогольнойПродукции.Маркируемый, ЛОЖЬ)
	|			ИЛИ ДанныеШтрихкодовУпаковок.Номенклатура.ТабачнаяПродукция) КАК МаркируемаяПродукция,
	|	ВЫБОР
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура = НЕОПРЕДЕЛЕНО
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ТабачнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табачная)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидПродукции
	|ПОМЕСТИТЬ СвойстваМаркируемойПродукции
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШтрихкодовУпаковок.Номенклатура,
	|	ДанныеШтрихкодовУпаковок.Характеристика,
	|	ДанныеШтрихкодовУпаковок.Серия,
	|	ВЫБОР
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура = НЕОПРЕДЕЛЕНО
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ТабачнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табачная)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Проверяет соответствие количество акцизной продукции из ТЧ Товары к количеству акцизных марок ТЧ АкцизныеМарки
// 
// Параметры:
// 	Объект - УправляемаяФорма - форма документа для проверки.
// 	Отказ - Булево - Отказ из вызывающего метода.
Процедура ПроверитьЗаполнениеАкцизныхМарок(Объект, Отказ) Экспорт
	
	Ошибки = Неопределено;
	
	Для Каждого СтрокаЗапасы Из Объект.Запасы Цикл
		Если СтрокаЗапасы.Номенклатура.ТабачнаяПродукция Тогда
			
			ОтборПоПолям = Новый Структура;
			ОтборПоПолям.Вставить("Номенклатура",	ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
			ОтборПоПолям.Вставить("Характеристика",	ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
			ОтборПоПолям.Вставить("Партия",			ПредопределенноеЗначение("Справочник.ПартииНоменклатуры.ПустаяСсылка"));
			ЗаполнитьЗначенияСвойств(ОтборПоПолям, СтрокаЗапасы);
			СтрокиТоваров		= Объект.Запасы.НайтиСтроки(ОтборПоПолям);
			ОтборПоПолям.Вставить("Серия", ?(ЗначениеЗаполнено(ОтборПоПолям.Партия), ОтборПоПолям.Партия, Неопределено));
			ОтборПоПолям.Удалить("Партия");
			СтрокиАкцизныхМарок	= НайтиАкцизныеМаркиПоПолямПоиска(Объект, ОтборПоПолям);
			Если Не (СтрокиАкцизныхМарок.Количество()/СтрокиТоваров.Количество() = СтрокаЗапасы.Количество) Тогда
				
				Шаблон = НСтр("ru='В строке %1 для %2 должно быть указано акцизных марок - %3, а указано - %4.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Шаблон,
					СтрокаЗапасы.НомерСтроки,
					СтрокаЗапасы.Номенклатура,
					СтрокаЗапасы.Количество,
					СтрокиАкцизныхМарок.Количество()/СтрокиТоваров.Количество());
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
					Ошибки,
					"Объект.Товары[%1].Номенклатура",
					ТекстОшибки,
					"",
					СтрокаЗапасы.НомерСтроки-1);
	
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

Функция ВидыПроцукцииВЗапасах(Запасы) Экспорт
	
Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Номенклатура.ТабачнаяПродукция    КАК ТабачнаяПродукция
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В (&СписокНоменклатуры)";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", Запасы.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.АлкогольнаяПродукция Тогда
			Если Результат.НайтиПоЗначению(Перечисления.ВидыПродукцииИС.Алкогольная) = Неопределено Тогда
				
				Результат.Добавить(Перечисления.ВидыПродукцииИС.Алкогольная,
					СинонимПеречисления(Перечисления.ВидыПродукцииИС.Алкогольная));
					
			КонецЕсли;
		ИначеЕсли Выборка.ТабачнаяПродукция Тогда
			Если Результат.НайтиПоЗначению(Перечисления.ВидыПродукцииИС.Табачная) = Неопределено Тогда
				
				Результат.Добавить(Перечисления.ВидыПродукцииИС.Табачная,
					СинонимПеречисления(Перечисления.ВидыПродукцииИС.Табачная));
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Результат.Количество() = 0 Тогда
		Для Каждого ЗначениеПеречисления Из Перечисления.ВидыПродукцииИС Цикл
			Результат.Добавить(ЗначениеПеречисления, СинонимПеречисления(ЗначениеПеречисления))
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	// ВЕТИС
	СписокОбъектов.Добавить(Документы.ВходящаяТранспортнаяОперацияВЕТИС);
	СписокОбъектов.Добавить(Документы.ЗапросСкладскогоЖурналаВЕТИС);
	СписокОбъектов.Добавить(Документы.ИнвентаризацияПродукцииВЕТИС);
	СписокОбъектов.Добавить(Документы.ИсходящаяТранспортнаяОперацияВЕТИС);
	СписокОбъектов.Добавить(Документы.ПроизводственнаяОперацияВЕТИС);
	СписокОбъектов.Добавить(Справочники.ВетеринарноСопроводительныйДокументВЕТИС);
	// Конец ВЕТИС
	
	// ГИСМ
	СписокОбъектов.Добавить(Документы.МаркировкаТоваровГИСМ);
	СписокОбъектов.Добавить(Документы.ПеремаркировкаТоваровГИСМ);
	// Конец ГИСМ
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выделяет из переданного массива штрихкодов упаковок элементы, в составе которых (на любом уровне вложенности, 
//   в т.ч. частично) находится продукция требуемого вида
// 
// Параметры:
//   ШтрихкодыДляПроверки - Массив - проверяемые элементы типа СправочникСсылка.ШтрихкодыУпаковокТоваров.
//   ВидыПродукции - Массив, ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Вид отбираемой продукции.
// Возвращаемое значение:
//   Массив - Массив - подходящие элементы типа СправочникСсылка.ШтрихкодыУпаковокТоваров.
Функция ШтрихкодыСодержащиеВидыПродукции(Знач ШтрихкодыДляПроверки, Знач ВидыПродукции = Неопределено) Экспорт
	
	Если НЕ ШтрихкодыДляПроверки.Количество() Тогда
		Возврат ШтрихкодыДляПроверки;
	КонецЕсли;
	
	ПроверятьАлкогольную = Истина;
	ПроверятьТабачную    = Истина;
	
	Если ТипЗнч(ВидыПродукции) = Тип("Массив") Тогда
		ПроверятьАлкогольную = (ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.Алкогольная)<>Неопределено);
		ПроверятьТабачную    = (ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.Табачная)<>Неопределено);
	ИначеЕсли ТипЗнч(ВидыПродукции) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		ПроверятьАлкогольную = (ВидыПродукции=Перечисления.ВидыПродукцииИС.Алкогольная);
		ПроверятьТабачную    = (ВидыПродукции=Перечисления.ВидыПродукцииИС.Табачная);
	КонецЕсли;
	
	РезультатПроверки = Новый Соответствие;
	Для Каждого ЭлементМассива Из ШтрихкодыДляПроверки Цикл
		РезультатПроверки.Вставить(ЭлементМассива, Ложь);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПроверятьАлкогольную", ПроверятьАлкогольную);
	Запрос.УстановитьПараметр("ПроверятьТабачную",    ПроверятьТабачную);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Штрихкод,
	|	    (&ПроверятьТабачную И ШтрихкодыУпаковок.Номенклатура.ТабачнаяПродукция)
	|	ИЛИ (&ПроверятьАлкогольную И ШтрихкодыУпаковок.Номенклатура.АлкогольнаяПродукция)
	|		КАК ПодходящаяПродукция
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ЕстьВложенныеШтрихкоды
	|		ПО ЕстьВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковок.Ссылка
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)
	|	И ЕстьВложенныеШтрихкоды.Ссылка ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Родитель,
	|	ШтрихкодыУпаковок.Штрихкод
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковок
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)";
	
	
	КешВложенности = Новый Соответствие;
	
	ОбходТаблицы = Истина;
	
	Пока ОбходТаблицы Цикл
		
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", ШтрихкодыДляПроверки);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		СоставУпаковки = МассивРезультатов[0].Выбрать();
		ВложенныеЗаписи = МассивРезультатов[1].Выбрать();
		НуженОбходДочерних = ВложенныеЗаписи.Количество();
	
		Пока СоставУпаковки.Следующий() Цикл
			ИсходныйШтрихкод = КешВложенности.Получить(СоставУпаковки.Штрихкод);
			Если ИсходныйШтрихкод = Неопределено Тогда
				ИсходныйШтрихкод = СоставУпаковки.Штрихкод;
			КонецЕсли;
			
			РезультатПроверки[ИсходныйШтрихкод] = РезультатПроверки[ИсходныйШтрихкод] ИЛИ СоставУпаковки.ПодходящаяПродукция;
		КонецЦикла;
		
		Если НуженОбходДочерних Тогда
			ШтрихкодыДляПроверки = Новый Массив;
			Пока ВложенныеЗаписи.Следующий() Цикл
				ИсходныйШтрихкод = КешВложенности.Получить(ВложенныеЗаписи.Родитель);
				Если ИсходныйШтрихкод = Неопределено Тогда
					ИсходныйШтрихкод = ВложенныеЗаписи.Родитель;
				КонецЕсли;
				КешВложенности.Вставить(ВложенныеЗаписи.Штрихкод, ИсходныйШтрихкод);
				ШтрихкодыДляПроверки.Добавить(ВложенныеЗаписи.Штрихкод);
			КонецЦикла;
		Иначе
			ОбходТаблицы = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	Результат = Новый Массив;
	Для Каждого КлючИЗначение Из РезультатПроверки Цикл
		Если КлючИЗначение.Значение Тогда
			Результат.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура УдалитьСтрокиАкцизныхМарокПоВидуПродукции(АкцизныеМарки, ВидПродукции) Экспорт
	
	СписокАкцизныхМарокНаУдаление = ШтрихкодыСодержащиеВидыПродукции(АкцизныеМарки.Выгрузить().ВыгрузитьКолонку("АкцизнаяМарка"), ВидПродукции);
	
	Для Каждого АкцизнаяМарка Из СписокАкцизныхМарокНаУдаление Цикл
		
		УдаляемыеСтроки = АкцизныеМарки.НайтиСтроки(Новый Структура("АкцизнаяМарка", АкцизнаяМарка));
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			АкцизныеМарки.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьСтрокиЗапасовПоВидуПродукции(Запасы, ВидПродукции) Экспорт
	
	ИмяПоляОтбора = XMLСтрока(ВидПродукции) + "Продукция";
	
	ОтборПоВидуПродукции = Новый Структура(ИмяПоляОтбора, 1);
	УдаляемыеСтроки = Запасы.НайтиСтроки(ОтборПоВидуПродукции);
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Запасы.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Удаляет акцизные марки по набору полей: номенклатура/характеристика/серия.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма.
//  ДанныеОтбора - Массив (Структура см. ИнтеграцияИСУТКлиентСервер.ПоляДляПоискаМаркированнойПродукции())
//  	- Список отборов для поиска удаляемых данных в ТЧ АкцизныеМарки.
//
Процедура УдалитьАкцизныеМаркиЧека(Форма, ДанныеОтбора, Отказ, ДеревоУпаковок = Неопределено) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ДеревоУпаковок = Неопределено Тогда
		Ошибки = Неопределено;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Источник = Форма.Объект;
	Иначе
		Источник = Форма;
	КонецЕсли;
	
	Если ДеревоУпаковок = Неопределено Тогда
		ДеревоУпаковок = ШтрихкодыУпаковок(Источник).ДеревоУпаковок;
	КонецЕсли;
	
	ДанныеУдалены = Ложь;
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		Для Каждого СтрокаДанныхОтбора Из ДанныеОтбора Цикл
			
			СерииВТЧТовары = Истина;
			Если СтрокаДерева.Номенклатура = СтрокаДанныхОтбора.Номенклатура
				И СтрокаДерева.Характеристика = СтрокаДанныхОтбора.Характеристика
				И СтрокаДерева.Серия = СтрокаДанныхОтбора.Серия Тогда
					
					СтрокиТЧ = СтрокиТЧАкцизныеМаркиПодходящиеДляШтрихкодаУпаковки(
						Источник.АкцизныеМарки,
						СтрокаДерева);
					
					Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
						Если СтрокаТЧ.АкцизнаяМарка.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
							Источник.АкцизныеМарки.Удалить(СтрокаТЧ);
							ДанныеУдалены = Истина;
						Иначе
							Шаблон = НСтр("ru='Невозможно удалить строку %1 (%2), товар был добавлен в упаковке.'");
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								Шаблон,
								СтрокаДанныхОтбора.НомерСтроки,
								СтрокаДанныхОтбора.Номенклатура);

							ОшибкаЗафиксирована = Ложь;
							Если Ошибки <> Неопределено Тогда
								Для Каждого СтрокаОшибок Из Ошибки.СписокОшибок Цикл
									Если ТекстОшибки = СтрокаОшибок.ТекстДляОднойОшибки Тогда
										ОшибкаЗафиксирована = Истина;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;

							Если Не ОшибкаЗафиксирована Тогда
								ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
									Ошибки,
									"Объект.Товары[%1].Номенклатура",
									ТекстОшибки,
									"",
									СтрокаДанныхОтбора.НомерСтроки-1);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
	Если Отказ Тогда
		ТекстОшибки = НСтр("ru='Используйте подбор и проверку продукции, доступную по кнопке ""Акцизные марки"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Если Не (ДанныеУдалены Или Отказ) Тогда
		Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
			УдалитьАкцизныеМаркиЧека(Форма, ДанныеОтбора, Отказ, СтрокаДерева);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция СтрокиТЧАкцизныеМаркиПодходящиеДляШтрихкодаУпаковки(ТЧАкцизныеМарки, Знач СтрокаДерева, СтрокиРезультат = Неопределено)
	
	Если СтрокиРезультат <> Неопределено Тогда
		Возврат СтрокиРезультат;
	КонецЕсли;
	
	Найденные = ТЧАкцизныеМарки.НайтиСтроки(Новый Структура("АкцизнаяМарка", СтрокаДерева.ШтрихкодУпаковки));
	
	Если Найденные.Количество() > 0 Тогда
		СтрокиРезультат = Найденные;
		Возврат СтрокиРезультат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.Родитель) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат СтрокиТЧАкцизныеМаркиПодходящиеДляШтрихкодаУпаковки(ТЧАкцизныеМарки, СтрокаДерева.Родитель, СтрокиРезультат);
	
КонецФункции

// Заполняет служебные реквизиты в табличной части "Товары"
//
// Параметры:
//  Форма				 - УправляемаяФорма - Форма
//  ИмяКолонкиКоличество - Строка - Имя колонки "Количество"
//
Процедура АкцизныеМаркиЗаполнитьСлужебныеРеквизиты(Форма, ИмяКолонкиКоличество = "Количество") Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Источник = Форма.Объект;
	Иначе
		Источник = Форма;
	КонецЕсли;
	
	Для Каждого СтрокаЗапасов Из Источник.Запасы Цикл
		
		Если СтрокаЗапасов.Номенклатура.ТабачнаяПродукция Тогда
			ОтборПоПолям = Новый Структура;
			ОтборПоПолям.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
			ОтборПоПолям.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			ОтборПоПолям.Вставить("Партия", Справочники.ПартииНоменклатуры.ПустаяСсылка());
			ЗаполнитьЗначенияСвойств(ОтборПоПолям, СтрокаЗапасов);
			ОтборПоПолямЗапасы = ОбщегоНазначения.СкопироватьРекурсивно(ОтборПоПолям);
			ОтборПоПолям.Вставить("Серия", ?(ЗначениеЗаполнено(ОтборПоПолям.Партия), ОтборПоПолям.Партия, Неопределено));
			ОтборПоПолям.Удалить("Партия");
			СтрокиАкцизныхМарок = НайтиАкцизныеМаркиПоПолямПоиска(Источник, ОтборПоПолям);
			
			КоличествоСтрокТоваров = Источник.Запасы.НайтиСтроки(ОтборПоПолямЗапасы).Количество();
			КоличествоАкцизныхМарок = СтрокиАкцизныхМарок.Количество() / КоличествоСтрокТоваров;
			
			СтрокаЗапасов.МаркируемаяПродукция =    1;
			СтрокаЗапасов.КоличествоАкцизныхМарок = Цел(КоличествоАкцизныхМарок);
			
			АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(СтрокаЗапасов, ИмяКолонкиКоличество);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныыеПроцедурыИФункции

Функция СинонимПеречисления(ЗначениеПеречисления)
	
	ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
	ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
	Возврат Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Синоним;
	
КонецФункции

// Подбирает строки из ТЧ АкцизныеМарки, соответсвующие полям структуры ПараметрыПоиска
// 
// Параметры:
// 	Источник - УправляемаяФорма - Данные формы для поиска соответствия.
// 	ПараметрыПоиска - Структура - Описание:
// 	 * Партия - CatalogRef.ПартииНоменклатуры - партия для отбора.
// 	 * Характеристика - CatalogRef.ХарактеристикиНоменклатуры - характеристика для отбора.
// 	 * Номенклатура - CatalogRef.Номенклатура - номенклатура для отбора.
// Возвращаемое значение:
// 	Массив - список Акцизных марок, подходящих по параметрам поиска.
Функция НайтиАкцизныеМаркиПоПолямПоиска(Источник, ПараметрыПоиска)
	
	СтруктураПоиска = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыПоиска);
	Если СтруктураПоиска.Свойство("Партия") Тогда
		СтруктураПоиска.Вставить("Серия", ?(ЗначениеЗаполнено(СтруктураПоиска.Партия), СтруктураПоиска.Партия, Неопределено));
		СтруктураПоиска.Удалить("Партия");
	КонецЕсли;
	
	Результат = Новый Массив();
	 
	МаркированныеТовары = ШтрихкодыУпаковок(Источник).МаркированныеТовары;
	Подходящие = МаркированныеТовары.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого Строка Из Подходящие Цикл
		Результат.Добавить(Строка.ШтрихкодУпаковки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ШтрихкодыУпаковок(Источник)
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодУпаковки",             Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодРодительскойУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ИдентификаторСтроки",          Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(36)));
	ТаблицаШтрихкодов.Колонки.Добавить("АлкогольнаяПродукция",         Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
	ТаблицаШтрихкодов.Колонки.Добавить("Справка2",                     Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
	ТаблицаШтрихкодов.Колонки.Добавить("ОрганизацияЕГАИС",             Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	
	Для Каждого СтрокаТЧ Из Источник.АкцизныеМарки Цикл
		
		НоваяСтрока = ТаблицаШтрихкодов.Добавить();
		НоваяСтрока.ШтрихкодУпаковки             = СтрокаТЧ.АкцизнаяМарка;
		НоваяСтрока.ШтрихкодРодительскойУпаковки = СтрокаТЧ.ШтрихкодУпаковки;
		
	КонецЦикла;
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ИсходныеДанные.ОрганизацияЕГАИС             КАК ОрганизацияЕГАИС,
		|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
		|	ИсходныеДанные.АлкогольнаяПродукция         КАК АлкогольнаяПродукция,
		|	ИсходныеДанные.Справка2                     КАК Справка2,
		|	ИсходныеДанные.ШтрихкодУпаковки             КАК ШтрихкодУпаковки,
		|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК ШтрихкодРодительскойУпаковки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные");
	
	ПараметрыФормированияТекстаЗапроса = ШтрихкодированиеЕГАИС.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Ложь;
	ТекстыЗапроса.Добавить(
		ШтрихкодированиеЕГАИС.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
	
	МенеджерВременнойТаблицы = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременнойТаблицы;
	Запрос.УстановитьПараметр("ИсходныеДанные", ТаблицаШтрихкодов);
	РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	ШтрихкодыУпаковок = Справочники.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкодыУпаковокПоДокументу(
		РезультатыЗапроса.ВложенныеШтрихкоды.Выбрать(), МенеджерВременнойТаблицы);
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

#КонецОбласти