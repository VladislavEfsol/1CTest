////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с номенклатурой".
// ОбщийМодуль.РаботаСНоменклатуройСлужебныйВызовСервера.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область РаботаСКатегориями

// Получение пути к категории.
//
// Параметры:
//  Идентификатор			 - Строка - идентификатор категории.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания	 - УникальныйИдентификатор - идентификатор задания.
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ПолучитьКатегорииНаПутиКЭлементуВФоне(Идентификатор, 
			ПараметрыЗапросаНоменклатуры, 
			УникальныйИдентификатор, 
			ИдентификаторЗадания) Экспорт 
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания = НСтр("ru = '1С:Номенклатура. Получение списка категорий от выбранной до корневой.'");
	ИмяПроцедуры        = "РаботаСНоменклатурой.ПолучитьКатегорииНаПутиКЭлементу";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ПараметрыМетода = Новый Структура;
	
	ПараметрыМетода.Вставить("ВключитьНоменклатуру",          Ложь);
	ПараметрыМетода.Вставить("Идентификаторы",                Идентификатор);
	ПараметрыМетода.Вставить("РежимОтображенияХарактеристик", "");
	
	Если ЗначениеЗаполнено(ПараметрыЗапросаНоменклатуры) Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыМетода, ПараметрыЗапросаНоменклатуры);
	КонецЕсли;
		
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыМетода, ПараметрыВыполнения);
	
КонецФункции

// Получение пути к категории с корневыми.
//
// Параметры:
//  Идентификатор			 - Строка - идентификатор категории.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания	 - УникальныйИдентификатор - идентификатор задания.
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ПолучитьКатегорииНаПутиКЭлементуСКорневымиКатегориямиВФоне(
			Идентификатор, 
			ПараметрыЗапросаНоменклатуры, 
			УникальныйИдентификатор, 
			ИдентификаторЗадания) Экспорт 
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания = НСтр("ru = '1С:Номенклатура. Получение списка категорий от выбранной до корневой.'");
	ИмяПроцедуры        = "РаботаСНоменклатурой.ПолучитьКатегорииНаПутиКЭлементуСКорневымиКатегориями";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ПараметрыМетода = Новый Структура;
	
	ПараметрыМетода.Вставить("ВключитьНоменклатуру",          Ложь);
	ПараметрыМетода.Вставить("Идентификаторы",                Идентификатор);
	ПараметрыМетода.Вставить("РежимОтображенияХарактеристик", "");
	
	Если ЗначениеЗаполнено(ПараметрыЗапросаНоменклатуры) Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыМетода, ПараметрыЗапросаНоменклатуры);
	КонецЕсли;

	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыМетода, ПараметрыВыполнения);
	
КонецФункции

// Поиск категории по строке.
//
// Параметры:
//  ТекстПоиска			     - Строка - строка поиска.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания	 - УникальныйИдентификатор - идентификатор задания.
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция НайтиКатегорииПоСтрокеПоискаВФоне(ТекстПоиска, УникальныйИдентификатор, ИдентификаторЗадания) Экспорт 
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания = НСтр("ru = '1С:Номенклатура. Поиск категорий.'");
	ИмяПроцедуры        = "РаботаСНоменклатурой.НайтиКатегорииПоСтрокеПоиска";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ТекстПоиска, ПараметрыВыполнения);
	
КонецФункции

// Получение корневых категорий.
//
// Параметры:
//  УникальныйИдентификатор  - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания     - УникальныйИдентификатор - идентификатор задания.
//  ВключитьНоменклатуру     - Булево - Признак необходимости получения произвольного списка номенклатуры из сервиса.
//
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ПолучитьКорневыеКатегорииВФоне(УникальныйИдентификатор, ИдентификаторЗадания, ПараметрыЗапросаНоменклатуры = Неопределено) Экспорт 
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания   = НСтр("ru = '1С:Номенклатура. Получение списка категорий.'");
	ИмяПроцедуры        = "РаботаСНоменклатурой.ПолучитьКорневыеКатегории";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ПараметрыПроцедуры = Новый Структура;
	
	ПараметрыПроцедуры.Вставить("ВключитьНоменклатуру", Ложь);
	
	Если ПараметрыЗапросаНоменклатуры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыПроцедуры, ПараметрыЗапросаНоменклатуры);
	КонецЕсли;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

// Получение дочерних категорий.
//
// Параметры:
//  Идентификатор			 - Строка - идентификатор категории.
//  НаборПолей	             - Число - код набора полей: 1 - минимальный, 2 - стандартный, 3 - максимальный.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания	 - УникальныйИдентификатор - идентификатор задания.
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ПолучитьДочерниеКатегорииВФоне(Идентификатор, НаборПолей, УникальныйИдентификатор, ИдентификаторЗадания,
		НоменклатураИОтборы = Неопределено) Экспорт
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания   = НСтр("ru = '1С:Номенклатура. Получение списка категорий.'");
	
	Если НаборПолей = 1 Тогда 
		ИмяПроцедуры = "РаботаСНоменклатурой.ПолучитьПредставлениеДочернихКатегорий";
	ИначеЕсли НаборПолей = 2 Тогда 
		ИмяПроцедуры = "РаботаСНоменклатурой.ПолучитьКраткоеОписаниеДочернихКатегорий";
	Иначе
		ИмяПроцедуры = "РаботаСНоменклатурой.ПолучитьПолноеОписаниеДочернихКатегорий";
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Идентификатор", Идентификатор);
	ПараметрыПроцедуры.Вставить("НоменклатураИОтборы", НоменклатураИОтборы);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

// Получение данных по категории.
//
// Параметры:
//  Идентификатор			 - Строка - идентификатор категории.
//  НаборПолей	             - Число - код набора полей: 1 - минимальный, 2 - стандартный, 3 - максимальный.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания	 - УникальныйИдентификатор - идентификатор задания.
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ПолучитьКатегориюПоИдентификаторуВФоне(Идентификатор, НаборПолей, УникальныйИдентификатор, ИдентификаторЗадания) Экспорт 
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания   = НСтр("ru = '1С:Номенклатура. Получение списка категорий.'");
	
	Если НаборПолей = 1 Тогда 
		ИмяПроцедуры = "РаботаСНоменклатурой.ПолучитьПредставлениеКатегорииПоИдентификатору";
	ИначеЕсли НаборПолей = 2 Тогда 
		ИмяПроцедуры = "РаботаСНоменклатурой.ПолучитьОписаниеКатегорииПоИдентификатору";
	ИначеЕсли НаборПолей = 3 Тогда
		ИмяПроцедуры = "РаботаСНоменклатурой.ПолучитьПолноеОписаниеКатегорииПоИдентификатору";
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, Идентификатор, ПараметрыВыполнения);
	
КонецФункции

// Получение данных по категории с дополнительными реквизитами и характеристиками.
//
// Параметры:
//  ИдентификаторыКатегорий	 - Массив (Строка) - идентификаторы категорий.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания	 - УникальныйИдентификатор - идентификатор задания.
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ПолучитьДанныеКатегорийСервиса(ИдентификаторыКатегорий, УникальныйИдентификатор, ИдентификаторЗадания) Экспорт 
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания   = НСтр("ru = '1С:Номенклатура. Получение данных по категориям.'");
	
	ИмяПроцедуры = "РаботаСНоменклатурой.ПолучитьДанныеКатегорийСервиса";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ИдентификаторыКатегорий, ПараметрыВыполнения);
	
КонецФункции

// Получение списка дополнительных реквизитов категории.
//
// Параметры:
//  Идентификатор			 - Строка - идентификатор категории.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания	 - УникальныйИдентификатор - идентификатор задания.
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ПолучитьДополнительныеРеквизитыКатегорийВФоне(Идентификатор, УникальныйИдентификатор, ИдентификаторЗадания) Экспорт 
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания   = НСтр("ru = '1С:Номенклатура. Получение дополнительных реквизитов категории.'");
	ИмяПроцедуры        = "РаботаСНоменклатурой.ПолучитьДополнительныеРеквизитыКатегорий";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, Идентификатор, ПараметрыВыполнения);
	
КонецФункции

// Получение списка значений дополнительных реквизитов категории.
//
// Параметры:
//  ПараметрыПоиска			 - Структура - идентификатор категории.
//  Ключи:
//    * ИдентификаторДополнительногоРеквизита - Строка - идентификатор реквизита.
//    * ИдентификаторКатегории - Строка - идентификатор категории.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания	 - УникальныйИдентификатор - идентификатор задания.
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ПолучитьЗначенияДополнительногоРеквизитаКатегорииВФоне(ПараметрыПоиска, УникальныйИдентификатор, ИдентификаторЗадания) Экспорт 
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания   = НСтр("ru = '1С:Номенклатура. Получение списка значений дополнительных реквизитов категории.'");
	ИмяПроцедуры        = "РаботаСНоменклатурой.ПолучитьЗначенияДополнительногоРеквизитаКатегории";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПоиска, ПараметрыВыполнения);
	
КонецФункции

// Получение фильтров категории.
//
// Параметры:
//  Идентификатор			 - Строка - идентификатор категории.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания	 - УникальныйИдентификатор - идентификатор задания.
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ПолучитьФильтрыКатегорииВФоне(Идентификатор, УникальныйИдентификатор, ИдентификаторЗадания) Экспорт 
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания   = НСтр("ru = '1С:Номенклатура. Получение фильтров категории.'");
	ИмяПроцедуры        = "РаботаСНоменклатурой.ПолучитьФильтрыКатегории";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, Идентификатор, ПараметрыВыполнения);
	
КонецФункции

// Получение списка производителей категории.
//
// Параметры:
//  Идентификатор			 - Строка - идентификатор категории.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания	 - УникальныйИдентификатор - идентификатор задания.
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ПолучитьПроизводителейКатегорииВФоне(Идентификатор, УникальныйИдентификатор, ИдентификаторЗадания) Экспорт 
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания   = НСтр("ru = '1С:Номенклатура. Получение списка производителей категории.'");
	ИмяПроцедуры        = "РаботаСНоменклатурой.ПолучитьПроизводителейКатегории";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, Идентификатор, ПараметрыВыполнения);
	
КонецФункции

// Формирование представления категории.
//
// Параметры:
//  Идентификатор			 - Строка - идентификатор категории.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания	 - УникальныйИдентификатор - идентификатор задания.
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция СформироватьПредставлениеКарточкиКатегорииВФоне(ИдентификаторыКатегорий, УникальныйИдентификатор, ИдентификаторЗадания) Экспорт 
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания   = НСтр("ru = '1С:Номенклатура. Формирование представления категории.'");
	ИмяПроцедуры        = "РаботаСНоменклатурой.СформироватьПредставлениеКарточкиКатегории";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ИдентификаторыКатегорий, ПараметрыВыполнения);
	
КонецФункции

// Загрузка категорий.
//
// Параметры:
//  КатегорииКЗагрузке	     - Массив (Строка) - массив строк идентификаторов категорий.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания	 - УникальныйИдентификатор - идентификатор задания.
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ЗагрузитьКатегорииВФоне(КатегорииКЗагрузке, УникальныйИдентификатор, ИдентификаторЗадания, ДополнительныеПараметры) Экспорт 
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = РаботаСНоменклатуройСлужебныйКлиентСервер.ДополнительныеПараметрыЗагрузкиКатегорий();
	КонецЕсли;
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания   = НСтр("ru = '1С:Номенклатура. Загрузка категорий в базу данных.'");
	ИмяПроцедуры        = "РаботаСНоменклатурой.ЗагрузитьКатегории";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	
	ПараметрыВыполнения.ДополнительныйРезультат     = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	
	ДополнительныеПараметры.Вставить("КатегорииКЗагрузке", КатегорииКЗагрузке);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ДополнительныеПараметры, ПараметрыВыполнения);
	
КонецФункции

// См. РаботаСНоменклатуройКлиент.ПолучитьЗначенияСоответствующиеЗаданным
//
// Параметры:
//  ПараметрыЗапроса		 - Структура - параметры запроса.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания	 - УникальныйИдентификатор - идентификатор задания.
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ПолучитьЗначенияСоответствующиеЗаданнымВФоне(ПараметрыЗапроса, УникальныйИдентификатор, ИдентификаторЗадания) Экспорт 
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания   = НСтр("ru = '1С:Номенклатура. Поиск значений соответствующих заданным.'");
	ИмяПроцедуры        = "РаботаСНоменклатурой.ПолучитьЗначенияСоответствующиеЗаданным";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыЗапроса, ПараметрыВыполнения);
	
КонецФункции

#КонецОбласти

#Область РаботаСНоменклатурой

// Получение данных по номенклатуре с дополнительными реквизитами, значениями и характеристиками.
//
// Параметры:
//  ИдентификаторыНоменклатуры - Массив (Строка) - идентификаторы номенклатуры.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания	 - УникальныйИдентификатор - идентификатор задания.
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ПолучитьДанныеНоменклатурыСервиса(ПараметрыМетода, УникальныйИдентификатор, ИдентификаторЗадания) Экспорт 
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания   = НСтр("ru = '1С:Номенклатура. Получение данных по номенклатуре.'");
	
	ИмяПроцедуры = "РаботаСНоменклатурой.ПолучитьДанныеНоменклатурыСервиса";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыМетода, ПараметрыВыполнения);
	
КонецФункции

// Получение списка номенклатуры.
//
// Параметры:
//  ПараметрыПоиска			 - Структура - см. РаботаСНоменклатурой.СформироватьПараметрыПоиска.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания	 - УникальныйИдентификатор - идентификатор задания.
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ПолучитьПереченьНоменклатурыВФоне(ПараметрыПоиска, УникальныйИдентификатор, ИдентификаторЗадания) Экспорт 
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания   = НСтр("ru = '1С:Номенклатура. Получение списка номенклатуры.'");
	ИмяПроцедуры        = "РаботаСНоменклатурой.ПолучитьПереченьНоменклатуры";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПоиска, ПараметрыВыполнения);
	
КонецФункции

// Получение представление номенклатуры.
//
// Параметры:
//  ИдентификаторыНоменклатуры - Массив - идентификаторов номенклатуры.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания	 - УникальныйИдентификатор - идентификатор задания.
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция СформироватьПредставленияКарточекНоменклатурыВФоне(ИдентификаторыНоменклатуры, ЭтоРежимПросмотра, УникальныйИдентификатор, ИдентификаторЗадания) Экспорт 
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания   = НСтр("ru = '1С:Номенклатура. Формирование представления карточек номенклатуры.'");
	ИмяПроцедуры        = "РаботаСНоменклатурой.СформироватьПредставленияКарточекНоменклатуры";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ХранилищеКэшей = Новый Соответствие;
	Для каждого Идентификатор Из ИдентификаторыНоменклатуры Цикл
		
		ХранилищеКэшей.Вставить(Идентификатор.ИдентификаторНоменклатуры + Идентификатор.ИдентификаторХарактеристики,
			ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
		
	КонецЦикла;
	
	ПараметрыПроцедуры = Новый Структура("ИдентификаторыНоменклатуры, ХранилищеКэшей, ЭтоРежимПросмотра", 
		ИдентификаторыНоменклатуры, ХранилищеКэшей, ЭтоРежимПросмотра);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

// Создание номенклатуры.
//
// Параметры:
//  ИдентификаторыНоменклатуры - Массив - идентификаторов номенклатуры.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания	 - УникальныйИдентификатор - идентификатор задания.
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция СоздатьНоменклатуруВФоне(ИдентификаторыНоменклатуры, ДополнительныеПараметры, Знач УникальныйИдентификатор, ИдентификаторЗадания) Экспорт 
	
	ПараметрыСозданияНоменклатуры = Новый Структура;
	
	ПараметрыСозданияНоменклатуры.Вставить("Идентификаторы", ИдентификаторыНоменклатуры);
	ПараметрыСозданияНоменклатуры.Вставить("ДополнительныеПараметры", 
		?(ДополнительныеПараметры = Неопределено, Новый Соответствие, ДополнительныеПараметры));
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания = НСтр("ru = '1С:Номенклатура. Загрузка номенклатуры и характеристик.'");
	ИмяПроцедуры        = "РаботаСНоменклатурой.ЗагрузитьНоменклатуруИХарактеристики";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ДополнительныйРезультат = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыСозданияНоменклатуры, ПараметрыВыполнения);
	
КонецФункции

// Получение количества карточек номенклатуры по строке поиска.
//
// Параметры:
//  СтрокаПоиска			 - Строка - строка поиска.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания	 - УникальныйИдентификатор - идентификатор задания.
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ПолучитьКоличествоКарточекНоменклатурыПоСтрокеПоискаВФоне(СтрокаПоиска, УникальныйИдентификатор, ИдентификаторЗадания) Экспорт 
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания = НСтр("ru = '1С:Номенклатура. Получение списка карточек номенклатуры по строке поиска.'");
	ИмяПроцедуры        = "РаботаСНоменклатурой.КоличествоНоменклатурыПоСтрокеПоиска";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, СтрокаПоиска, ПараметрыВыполнения);
	
КонецФункции

// Получение данных номенклатуры по штрихкоду.
//
// Параметры:
//  ШтрихКод - Строка - штрихкод.
// 
// Возвращаемое значение:
//  Массив - идентификаторы номенклатуры.
//
Функция ПолучитьДанныеПоНоменклатуреПоШтрихкоду(ШтрихКод) Экспорт
	
	Если НЕ РаботаСНоменклатурой.ПравоЧтенияДанных() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеПоНоменклатуре = РаботаСНоменклатурой.ПолучитьДанныеПоНоменклатуреПоШтрихкоду(ШтрихКод);
	
	Если ДанныеПоНоменклатуре = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеПоНоменклатуре.ВыгрузитьКолонку("Идентификатор");
		
КонецФункции

// Покупка карточки номенклатуры.
//
// Параметры:
//  ИдентификаторыНоменклатуры - Массив - идентификаторов номенклатуры.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания	 - УникальныйИдентификатор - идентификатор задания.
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция КупитьКарточкиНоменклатурыВФоне(ИдентификаторыНоменклатуры, Знач УникальныйИдентификатор, ИдентификаторЗадания) Экспорт 
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания   = НСтр("ru = '1С:Номенклатура. Получение списка номенклатуры.'");
	ИмяПроцедуры        = "РаботаСНоменклатурой.КупитьКарточкиНоменклатуры";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ИдентификаторыНоменклатуры, ПараметрыВыполнения);
	
КонецФункции

// Получение номенклатуры по штрихкодам.
//
// Параметры:
//  Штрихкоды - Массив (Строка) - штрихкоды номенклатуры.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания	 - УникальныйИдентификатор - идентификатор задания.
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне
//
Функция ПолучитьНоменклатуруПоШтрихкодамВФоне(Штрихкоды, УникальныйИдентификатор, ИдентификаторЗадания) Экспорт 
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания   = НСтр("ru = '1С:Номенклатура. Получение номенклатуры по штрихкодам.'");
	
	ИмяПроцедуры = "РаботаСНоменклатурой.ПолучитьНоменклатуруПоШтрихкодам";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, Штрихкоды, ПараметрыВыполнения);
	
КонецФункции

#КонецОбласти

#Область РаботаСРекламнымиЗаписями

// Кэширование изображения баннеров для отображения на формах.
//
// Параметры:
//  ИдентификаторыИсточников - Массив - идентификаторы рекламных записей.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания	 - УникальныйИдентификатор - идентификатор задания.
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ЗакэшироватьИзображенияБаннеровФоне(ИдентификаторыИсточников, УникальныйИдентификатор, ИдентификаторЗадания) Экспорт 
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания = НСтр("ru = '1С:Номенклатура. Получение изображения рекламных баннеров поставщиков информации.'");
	ИмяПроцедуры        = "РаботаСНоменклатурой.ЗакэшироватьИзображенияБаннеров";
	
	ХранилищеКэшей = Новый Соответствие;
	Для каждого ИдентификаторИсточника Из ИдентификаторыИсточников Цикл
		ДанныеБаннера = Новый Структура("ПутьКДаннымБаннера, СсылкаПереходаПоБаннеру, АдресИзображения");
		ДанныеБаннера.ПутьКДаннымБаннера = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		ХранилищеКэшей.Вставить(ИдентификаторИсточника, ДанныеБаннера);
	КонецЦикла;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ХранилищеКэшей, ПараметрыВыполнения);
	
КонецФункции

#КонецОбласти

#Область Универсальные

// Проверка состояние сервиса.
//
// Параметры:
//  ИдентификаторФормы   - УникальныйИдентификатор - Уникальный идентификатор формы.
//  ИдентификаторЗадания - УникальныйИдентификатор - Уникальный идентификатор задания.
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ПроверитьСостояниеСервисаВФоне(ИдентификаторФормы, ИдентификаторЗадания) Экспорт 
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания   = НСтр("ru = '1С:Номенклатура. Проверка состояния подключения сервиса'");
	ИмяПроцедуры        = "РаботаСНоменклатурой.ПроверитьСостояниеСервиса";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, Неопределено, ПараметрыВыполнения);
	
КонецФункции

// Проверка доступности подсистемы и права чтения.
// 
// Возвращаемое значение:
//  Булево - Истина если доступно.
//
Функция ДоступнаФункциональностьПодсистемы() Экспорт
	
	Возврат РаботаСНоменклатурой.ДоступнаФункциональностьПодсистемы();
	
КонецФункции

#КонецОбласти

#Область ОбновлениеДанных

Процедура УстановитьРежимОбновленияНоменклатуры(НоменклатураСсылки, ОбновляетсяАвтоматически) Экспорт
	
	РаботаСНоменклатурой.УстановитьРежимОбновленияНоменклатуры(НоменклатураСсылки, ОбновляетсяАвтоматически);	
	
КонецПроцедуры

Функция ПолучитьОбновленияВидовНоменклатурыВФоне(ОбновляемыеОбъекты, УникальныйИдентификатор, ИдентификаторЗадания) Экспорт 
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания = НСтр("ru = '1С:Номенклатура. Получение обновлений видов номенклатуры.'");
	ИмяПроцедуры        = "РаботаСНоменклатурой.ПолучитьОбновленияВидовНоменклатуры";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ОбновляемыеОбъекты, ПараметрыВыполнения);
	
КонецФункции

Функция ПолучитьОбновленияНоменклатурыВФоне(ОбновляемыеОбъекты, УникальныйИдентификатор, ИдентификаторЗадания) Экспорт 
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания = НСтр("ru = '1С:Номенклатура. Получение списка категорий от выбранной до корневой.'");
	ИмяПроцедуры        = "РаботаСНоменклатурой.ПолучитьОбновленияНоменклатуры";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ОбновляемыеОбъекты, ПараметрыВыполнения);
	
КонецФункции

// Обновление объектов данных, вызванное из форм заполнения.
//
// Параметры:
//  СсылкаНаОбъект	 - Ссылка - ссылка на обновляемый объект.
//  Идентификатор	 - Строка - идентификатор привязанного объекта.
//
Процедура ОбновитьОбъектИнформационнойБазы(
			СсылкаНаОбъект, 
			Идентификатор, 
			УстановленАвтоматическийРежимОбновления, 
			ОбновлятьЗаблокированныеРеквизиты = Ложь) Экспорт
			
	Если Метаданные.ОпределяемыеТипы.НоменклатураРаботаСНоменклатурой.Тип.СодержитТип(ТипЗнч(СсылкаНаОбъект)) Тогда
		
		// Номенклатура
		
		РаботаСНоменклатурой.УстановитьРежимОбновленияНоменклатуры(СсылкаНаОбъект, Истина);
		РаботаСНоменклатуройСлужебный.ОбновитьНоменклатуру(СсылкаНаОбъект, Идентификатор, ОбновлятьЗаблокированныеРеквизиты);
		
		ЗаписьНоменклатуры = РаботаСНоменклатурой.ОсновнаяЗаписьСоответствияНоменклатуры(СсылкаНаОбъект);
		
		Если ЗначениеЗаполнено(ЗаписьНоменклатуры) Тогда
			УстановленАвтоматическийРежимОбновления = ЗаписьНоменклатуры.ОбновляетсяАвтоматически;
		КонецЕсли;
		
	ИначеЕсли Метаданные.ОпределяемыеТипы.ВидНоменклатурыРаботаСНоменклатурой.Тип.СодержитТип(ТипЗнч(СсылкаНаОбъект)) Тогда		
		
		// Вид номенклатуры
		
		РаботаСНоменклатурой.УстановитьРежимОбновленияВидаНоменклатуры(СсылкаНаОбъект, Идентификатор, Истина);
		РаботаСНоменклатуройСлужебный.ОбновитьВидНоменклатуры(СсылкаНаОбъект, Идентификатор, ОбновлятьЗаблокированныеРеквизиты);
		УстановленАвтоматическийРежимОбновления = Истина;
		
	КонецЕсли; 
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИменаФорм

// Функция возвращает имя формы списка номенклатуры.
// 
// Возвращаемое значение:
//  Строка - имя формы.
//
Функция ИмяФормыСпискаНоменклатуры() Экспорт
	
	ТипНоменклатуры =  Метаданные.ОпределяемыеТипы.НоменклатураРаботаСНоменклатурой.Тип.Типы()[0];
	ИмяФормыНоменклатуры = Метаданные.НайтиПоТипу(ТипНоменклатуры);
	
	Если ИмяФормыНоменклатуры <> Неопределено Тогда
		Возврат ИмяФормыНоменклатуры.ПолноеИмя() + ".Форма.ФормаСписка";
	Иначе
		Возврат "";	
	КонецЕсли;
	
КонецФункции

// Функция возвращает имя формы элемента номенклатуры.
// 
// Возвращаемое значение:
//  Строка - имя формы.
//
Функция ИмяФормыЭлементаНоменклатуры() Экспорт
	
	ТипНоменклатуры =  Метаданные.ОпределяемыеТипы.НоменклатураРаботаСНоменклатурой.Тип.Типы()[0];
	ИмяФормыНоменклатуры = Метаданные.НайтиПоТипу(ТипНоменклатуры);
	
	Если ИмяФормыНоменклатуры <> Неопределено Тогда
		Возврат ИмяФормыНоменклатуры.ПолноеИмя() + ".Форма.ФормаЭлемента";
	Иначе
		Возврат "";	
	КонецЕсли;
	
КонецФункции

// Функция возвращает имя формы элемента вида номенклатуры.
// 
// Возвращаемое значение:
//  Строка - имя формы.
//
Функция ИмяФормыЭлементаВидаНоменклатуры() Экспорт
	
	ТипНоменклатуры =  Метаданные.ОпределяемыеТипы.ВидНоменклатурыРаботаСНоменклатурой.Тип.Типы()[0];
	ИмяФормыНоменклатуры = Метаданные.НайтиПоТипу(ТипНоменклатуры);
	
	Если ИмяФормыНоменклатуры <> Неопределено Тогда
		Возврат ИмяФормыНоменклатуры.ПолноеИмя() + ".Форма.ФормаЭлемента";
	Иначе
		Возврат "";	
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Функция НастройкиПодсистемы() Экспорт
	
	Возврат РаботаСНоменклатурой.НастройкиПодсистемы();
	
КонецФункции

// Представление количества сопоставленных характеристик.
//
// Параметры:
//  Номенклатура						 - ЛюбаяСсылка - ссылка на номенклатуру.
//  КоличествоХарактеристикСопоставлено	 - Число - количество сопоставленных характеристик.
// 
// Возвращаемое значение:
//  Строка - строка представления данных.
//
Функция ПредставлениеСопоставленныхХарактеристик(Номенклатура, 
			КоличествоХарактеристикСопоставлено = Неопределено,
			ШаблонПредставления = "") Экспорт
	
	Возврат РаботаСНоменклатурой.ПредставлениеСопоставленныхХарактеристик(Номенклатура, КоличествоХарактеристикСопоставлено, ШаблонПредставления);
		
КонецФункции

// Загрузка характеристик номенклатуры.
//
// Параметры:
//  ПараметрыСоздания		 - Структура - См. РаботаСНоменклатуройСлужебныйКлиентСервер.ПараметрыЗагрузкиХарактеристик.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания	 - УникальныйИдентификатор - идентификатор задания.
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ЗагрузитьХарактеристикиДляНоменклатурыВФоне(ПараметрыСоздания, Знач УникальныйИдентификатор, ИдентификаторЗадания) Экспорт 
		
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания = НСтр("ru = '1С:Номенклатура. Загрузка характеристик для номенклатуры.'");
	ИмяПроцедуры        = "РаботаСНоменклатурой.ЗагрузитьХарактеристики";
	
	ПараметрыВыполнения                             = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыСоздания, ПараметрыВыполнения);
	
КонецФункции

// Получение характеристик сервиса.
//
// Параметры:
//  ПараметрыЗапросаХарактеристик	 - Структура - параметры запроса характеристик.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания	 - УникальныйИдентификатор - идентификатор задания.
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ПолучитьДанныеХарактеристикВФоне(ПараметрыЗапросаХарактеристик, Знач УникальныйИдентификатор, ИдентификаторЗадания) Экспорт 
		
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания = НСтр("ru = '1С:Номенклатура. Получение данных по характеристикам номенклатуры.'");
	ИмяПроцедуры        = "РаботаСНоменклатурой.ПолучитьДанныеХарактеристикСервиса";
	
	ПараметрыВыполнения                             = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыЗапросаХарактеристик, ПараметрыВыполнения);
	
КонецФункции

// Проверка сопоставления номенклатуры с заданной 1С:номенклатурой.
//
// Параметры:
//  Номенклатура				 - ЛюбаяСсылка - ссылка на номенклатуру.
//  ИдентификаторНоменклатуры	 - Строка - идентификатор номенклатуры.
// 
// Возвращаемое значение:
//  Булева - Истина, если номенклатура сопоставлена.
//
Функция НоменклатураСопоставлена(Номенклатура, ИдентификаторНоменклатуры) Экспорт
	
	Возврат РаботаСНоменклатурой.НоменклатураСопоставлена(Номенклатура, ИдентификаторНоменклатуры);
	
КонецФункции

// Отмена выполнения регламентного задания.
//
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор задания.
//
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьИспользованиеОбъектаВФоне(
			ПараметрыМетода, 
			УникальныйИдентификатор, 
			ИдентификаторЗадания) Экспорт 
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания = НСтр("ru = '1С:Номенклатура. Поиск ссылок на объекты.'");
	ИмяПроцедуры        = "РаботаСНоменклатурой.ПроверитьИспользованиеОбъекта";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
			
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыМетода, ПараметрыВыполнения);
	
КонецФункции

Функция ЗагрузитьДополнительныеДанныеВФоне(ПараметрыСоздания, Знач УникальныйИдентификатор, ИдентификаторЗадания) Экспорт 
		
	НаименованиеЗадания = НСтр("ru = '1С:Номенклатура. Загрузка дополнительных данных для номенклатуры.'");
	ИмяПроцедуры        = "РаботаСНоменклатурой.ЗагрузитьДополнительныеДанные";
	
	ПараметрыВыполнения                             = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыСоздания, ПараметрыВыполнения);
	
КонецФункции

#КонецОбласти