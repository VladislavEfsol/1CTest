////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с номенклатурой".
// ОбщийМодуль.РаботаСНоменклатуройСлужебныйКлиентСервер.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область ПодсказкиФормыНастройкиНоменклатурыПриЗагрузке

Процедура СформироватьСписокВыбораХарактеристик(Данные, СписокВыбораХарактеристик) Экспорт
	
	КоличествоХарактеристик            = Данные.КоличествоХарактеристик;            // Количество характеристик номенклатуры сервиса
	КоличествоВыбранныхХарактеристик   = Данные.КоличествоВыбранныхХарактеристик;   // Идентификаторы выбранных характеристик
	ВсеРеквизитыСопоставлены           = Данные.ВсеРеквизитыСопоставлены;           // Признак сопоставления всех реквизитов
	ИспользуютсяХарактеристикиВСервисе = Данные.ИспользуютсяХарактеристикиВСервисе; // Признак использования характеристик для номенклатуры сервиса
	СтатусВеденияУчетаХарактеристик    = Данные.СтатусВеденияУчетаХарактеристик;    // Статус ведения учета характеристик для вида номенклатуры
	
	СписокВыбораХарактеристик.Очистить();
	
	Если ИспользуютсяХарактеристикиВСервисе Тогда
		
		Если СтатусВеденияУчетаХарактеристик = "НеВедутся" Тогда
			СписокВыбораХарактеристик.Добавить("БезХарактеристик", НСтр("ru = 'Создать номенклатуру без учета характеристик'"));
			СписокВыбораХарактеристик.Добавить("ВсеХарактеристики", 
				СтрШаблон(НСтр("ru = 'Создать номенклатуру по каждой характеристике (%1)'"), КоличествоХарактеристик));
			
			Если КоличествоВыбранныхХарактеристик = 0 Тогда
				СписокВыбораХарактеристик.Добавить("ВыбранныеХарактеристики", НСтр("ru = 'Создать номенклатуру по выбранным характеристикам'"));	
			Иначе
				СписокВыбораХарактеристик.Добавить("ВыбранныеХарактеристики", 
					СтрШаблон(НСтр("ru = 'Выбрано характеристик: %1 из %2'"), КоличествоВыбранныхХарактеристик, КоличествоХарактеристик));
			КонецЕсли;	
			
		Иначе
			СписокВыбораХарактеристик.Добавить("БезХарактеристик", НСтр("ru = 'Не создавать характеристики'"));
			СписокВыбораХарактеристик.Добавить("ВсеХарактеристики", 
				СтрШаблон(НСтр("ru = 'Создать все характеристики (%1)'"), КоличествоХарактеристик));
			
			Если КоличествоВыбранныхХарактеристик = 0 Тогда
				СписокВыбораХарактеристик.Добавить("ВыбранныеХарактеристики", НСтр("ru = 'Выбрать характеристики для создания'"));	
			Иначе
				СписокВыбораХарактеристик.Добавить("ВыбранныеХарактеристики", 
					СтрШаблон(НСтр("ru = 'Выбрано характеристик: %1 из %2'"), КоличествоВыбранныхХарактеристик, КоличествоХарактеристик));
			КонецЕсли;	
			
		КонецЕсли;
				
	Иначе
		СписокВыбораХарактеристик.Добавить("БезХарактеристик", НСтр("ru = 'Характеристики не используются'"));	
	КонецЕсли;
		
КонецПроцедуры

Процедура СформироватьПодсказкуКХарактеристикам(Данные, РеквизитХраненияПодсказки) Экспорт
	
	ВсеРеквизитыСопоставлены           = Данные.ВсеРеквизитыСопоставлены;
	ИспользуютсяХарактеристикиВСервисе = Данные.ИспользуютсяХарактеристикиВСервисе;
	КоличествоХарактеристик            = Данные.КоличествоХарактеристик;
	КоличествоВыбранныхХарактеристик   = Данные.КоличествоВыбранныхХарактеристик;
	РежимЗагрузкиХарактеристик         = Данные.РежимЗагрузкиХарактеристик;
	СтатусВеденияУчетаХарактеристик    = Данные.СтатусВеденияУчетаХарактеристик;
	
	Подсказки = Новый Соответствие;
	
	Если ИспользуютсяХарактеристикиВСервисе Тогда
		Если СтатусВеденияУчетаХарактеристик = "НеВедутся" ИЛИ СтатусВеденияУчетаХарактеристик = "" Тогда
							
			Подсказки.Вставить("БезХарактеристик",         НСтр("ru = 'Будет создана 1 номенклатура'"));
			Подсказки.Вставить("ВсеХарактеристики",        СтрШаблон(НСтр("ru = 'Будет создано %1 %2 номенклатуры'"), 
				КоличествоХарактеристик, СогласованнаяСтрока("Элемент", КоличествоХарактеристик)));
				
			Если КоличествоВыбранныхХарактеристик = 0 Тогда
				Подсказки.Вставить("ВыбранныеХарактеристики", НСтр("ru = 'Номенклатура создана не будет'"));
			Иначе
				Подсказки.Вставить("ВыбранныеХарактеристики", СтрШаблон(НСтр("ru = 'Будет создано %1 %2 номенклатуры'"), 
					КоличествоВыбранныхХарактеристик, СогласованнаяСтрока("Элемент", КоличествоВыбранныхХарактеристик)));
			КонецЕсли;	
				
		Иначе
						
			Подсказки.Вставить("БезХарактеристик",         НСтр("ru = 'Будет создана 1 номенклатура'"));
			Подсказки.Вставить("ВсеХарактеристики",        СтрШаблон(НСтр("ru = 'Будет создана 1 номенклатура, %1 %2'"), 
				КоличествоХарактеристик, СогласованнаяСтрока("Характеристика", КоличествоХарактеристик)));
				
			Если КоличествоВыбранныхХарактеристик = 0 Тогда
				Подсказки.Вставить("ВыбранныеХарактеристики", НСтр("ru = 'Будет создана 1 номенклатура'"));
			Иначе
				Подсказки.Вставить("ВыбранныеХарактеристики", СтрШаблон(НСтр("ru = 'Будет создана 1 номенклатура, %1 %2'"), 
					КоличествоВыбранныхХарактеристик, СогласованнаяСтрока("Характеристика", КоличествоВыбранныхХарактеристик)));
			КонецЕсли;	
				
		КонецЕсли;	
	Иначе
		Подсказки.Вставить("БезХарактеристик", НСтр("ru = 'Будет создана 1 номенклатура'"));
	КонецЕсли;
	
	РеквизитХраненияПодсказки = Подсказки[РежимЗагрузкиХарактеристик];
		
КонецПроцедуры

Функция СогласованнаяСтрока(СогласуемаяСтрока, ЧислоДляСогласования) Экспорт
	
	Результат = "";
	
	Если СогласуемаяСтрока = "Характеристика" Тогда
		Результат = СтрокаСЧислом(";характеристика;;характеристики;характеристик;характеристик", 
			ЧислоДляСогласования, ВидЧисловогоЗначения.Количественное)
	ИначеЕсли СогласуемаяСтрока = "Элемент" Тогда	
		Результат = СтрокаСЧислом(";элемент;;элемента;элементов;элементов", 
			ЧислоДляСогласования, ВидЧисловогоЗначения.Количественное)		
	КонецЕсли;
		
	Возврат Результат;	
	
КонецФункции

Процедура СформироватьПодсказкуКВидуНоменклатуры(Данные, РеквизитХраненияПодсказки) Экспорт
	
	ВидНоменклатуры                     = Данные.ВидНоменклатуры;
	ИдентификаторКатегории              = Данные.ИдентификаторКатегории;
	НаименованиеКатегории               = Данные.НаименованиеКатегории;
	СтатусВеденияУчетаХарактеристик     = Данные.СтатусВеденияУчетаХарактеристик;
	КоличествоСопоставленныхРеквизитов  = Данные.КоличествоСопоставленныхРеквизитов;
	КоличествоДополнительныхРеквизитов  = Данные.КоличествоДополнительныхРеквизитов;
	ИспользуютсяХарактеристикиВСервисе  = Данные.ИспользуютсяХарактеристикиВСервисе;
	ВидыНоменклатурыКатегории           = Данные.ВидыНоменклатурыКатегории;
	ВидНоменклатурыСопоставлен          = Данные.ВидНоменклатурыСопоставлен;
	
	ЗаголовокЭлемента = "";
	
	Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		
		Если НЕ ВидНоменклатурыСопоставлен Тогда
			Если ТипЗнч(Данные) = Тип("Структура") Тогда
				ЗаголовокЭлемента = СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(
					СтрШаблон(
						НСтр("ru = 'Вид номенклатуры ""%1"" не сопоставлен с категорией ""%2"". <a href = ""Сопоставить"">Сопоставить</a>'"), 
							ВидНоменклатуры, НаименованиеКатегории));
			Иначе
				ЗаголовокЭлемента = СтрШаблон(
					НСтр("ru = 'Вид номенклатуры ""%1"" не сопоставлен с категорией ""%2"".'"), 
						ВидНоменклатуры, НаименованиеКатегории);				
			КонецЕсли;
		Иначе 
			
			// Вид номенклатуры сопоставлен.
			
			Если СтатусВеденияУчетаХарактеристик = СтатусыВеденияУчетаХарактеристик().НеВедутся Тогда
				
				Если ИспользуютсяХарактеристикиВСервисе Тогда
					ЗаголовокЭлемента = СтрШаблон(
						НСтр("ru = 'Для вида номенклатуры ""%1"" не ведутся характеристики'"), ВидНоменклатуры);				
				Иначе
					
					// Если характеристики в сервисе не ведутся.
					
					Если КоличествоДополнительныхРеквизитов > 0 
						И КоличествоСопоставленныхРеквизитов <> КоличествоДополнительныхРеквизитов Тогда
						
						// Если вид номенклатуры сопоставлен, подсчитывается количество несопоставленных реквизитов
						ЗаголовокЭлемента 
							= ЗаголовокКоличествоСопоставленныхРеквизитов(КоличествоСопоставленныхРеквизитов, КоличествоДополнительныхРеквизитов);
					Иначе
						ЗаголовокЭлемента = СтрШаблон(
							НСтр("ru = 'Вид номенклатуры ""%1"" сопоставлен'"), ВидНоменклатуры);
					КонецЕсли;
					
				КонецЕсли;

			ИначеЕсли СтатусВеденияУчетаХарактеристик = СтатусыВеденияУчетаХарактеристик().Индивидуальные Тогда	
				ЗаголовокЭлемента = СтрШаблон(
					НСтр("ru = 'Для вида номенклатуры ""%1"" ведутся индивидуальные характеристики'"), ВидНоменклатуры);
				
			ИначеЕсли СтатусВеденияУчетаХарактеристик = СтатусыВеденияУчетаХарактеристик().Общие Тогда		
				
				// Если характеристики ведутся и в сервисе, и в виде номенклатуры.
				
				Если КоличествоДополнительныхРеквизитов > 0 
					И КоличествоСопоставленныхРеквизитов <> КоличествоДополнительныхРеквизитов Тогда
					
					// Если вид номенклатуры сопоставлен, подсчитывается количество несопоставленных реквизитов
					ЗаголовокЭлемента 
						= ЗаголовокКоличествоСопоставленныхРеквизитов(КоличествоСопоставленныхРеквизитов, КоличествоДополнительныхРеквизитов);
				Иначе
					ЗаголовокЭлемента = СтрШаблон(
						НСтр("ru = 'Вид номенклатуры ""%1"" сопоставлен'"), ВидНоменклатуры);
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Если ВидыНоменклатурыКатегории.Количество() = 0 Тогда // вид номенклатуры не найден
			ЗаголовокЭлемента = СтрШаблон(
				НСтр("ru = 'Не найден вид номенклатуры, сопоставленный с категорией ""%1""'"), НаименованиеКатегории);
			
		ИначеЕсли ВидыНоменклатурыКатегории.Количество() > 1 Тогда  // найдено несколько видов номенклатуры
			ЗаголовокЭлемента = СтрШаблон(
				НСтр("ru = 'Найдено несколько видов номенклатуры, сопоставленный с категорией ""%1""'"), НаименованиеКатегории);
			
		КонецЕсли;
		
	КонецЕсли;
		 
	РеквизитХраненияПодсказки = ЗаголовокЭлемента;
		
КонецПроцедуры

Функция ЗаголовокКоличествоСопоставленныхРеквизитов(КоличествоСопоставлено, КоличествоВсего)
	
	Возврат СтрШаблон(НСтр("ru = 'Сопоставлено реквизитов: %1 из %2'"), КоличествоСопоставлено, КоличествоВсего);
	
КонецФункции

#КонецОбласти

#Область ПараметровМетодов

Функция ДополнительныеПараметрыЗагрузкиНоменклатуры() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	
	ДополнительныеПараметры.Вставить("ВидНоменклатуры",             Неопределено);
	ДополнительныеПараметры.Вставить("Номенклатура",                Неопределено);
	ДополнительныеПараметры.Вставить("РежимЗагрузкиХарактеристик",  РежимыЗагрузкиХарактеристик().ВНаименование);
	ДополнительныеПараметры.Вставить("ХарактеристикиВыбраны",       Ложь);
	ДополнительныеПараметры.Вставить("ВыбранныеХарактеристики",     Новый Массив);
	ДополнительныеПараметры.Вставить("ЗагружатьВсеХарактеристики ", Ложь);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция ДополнительныеПараметрыЗагрузкиКатегорий() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	
	ДополнительныеПараметры.Вставить("РежимЗагрузкиКатегорий",    "ПоОтдельности");
	ДополнительныеПараметры.Вставить("КоличествоУровнейИерархии", 0);
	ДополнительныеПараметры.Вставить("ВидНоменклатуры",           Неопределено);

	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция ПараметрыЗагрузкиХарактеристик() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Номенклатура",                Неопределено); // Номенклатура, для которой загружаются характеристики.
	Результат.Вставить("ИдентификаторыХарактеристик", Новый Массив); // Идентификаторы выбранных для загрузки характеристик.
	Результат.Вставить("ЗагружатьВсеХарактеристики",  Ложь);         // Флаг загрузки всех характеристик, идентификаторы выбранных игнорируются.
	Результат.Вставить("ЗаполнитьСозданныеОбъекты",   Ложь);         // Истина - если в результат выполнения метода должен попадать массив созданных элементов.
	
	Возврат Результат;
		
КонецФункции

Функция ПараметрыЗапросаХарактеристик() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИдентификаторНоменклатуры",   "");
	Результат.Вставить("ИдентификаторыХарактеристик", Новый Массив);
	Результат.Вставить("ИдентификаторКатегории",      "");
	Результат.Вставить("НомерСтраницыДанных",         0);
	Результат.Вставить("НаборПолей",                  "Минимальный"); // "Минимальный", "Максимальный".
	Результат.Вставить("ЗаполнитьПризнакЗагрузки",    Ложь);
	Результат.Вставить("ИсключитьЗагруженные",        Ложь);
	Результат.Вставить("НоменклатураИсключение",      Неопределено);
	Результат.Вставить("ДополнительныеРеквизиты",     Новый Массив);
	Результат.Вставить("РеквизитыХарактеристик",      Новый Массив);
	Результат.Вставить("ТаблицаТипов",                Неопределено);
		
	Возврат Результат;	
	
КонецФункции

Функция ШаблонДанныхНоменклатуры() Экспорт
	
	Шаблон = Новый Структура;
	
	Шаблон.Вставить("Номенклатура", Неопределено);
	Шаблон.Вставить("Характеристика", Неопределено);
	Шаблон.Вставить("ИдентификаторНоменклатуры", "");
	Шаблон.Вставить("ИдентификаторХарактеристики", "");
	
	Возврат Шаблон;
	
КонецФункции

Функция ПараметрыПоискаКатегорийПоСтроке() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("СтрокаПоиска",                   "");
	Результат.Вставить("КоличествоКатегорийВРезультате", 100);
	Результат.Вставить("ТолькоЛистовыеКатегории",        Ложь);
	Результат.Вставить("НаборПолей",                     "Минимальный"); // Минимальный, Максимальный
	Результат.Вставить("РезультатВМассиве",              Истина);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗапретРедактированияРеквизитов

Процедура СнятьПометкиСБлокируемыхРеквизитов(Форма, ТаблицаФормы, БлокироватьРеквизиты) Экспорт
	
	Для каждого ЭлементКоллекции Из Форма.БлокируемыеРеквизиты Цикл
		
		СтрокиРеквизита = ТаблицаФормы.
			НайтиСтроки(Новый Структура("РеквизитОбъекта", ЭлементКоллекции.Значение));
		
		Если СтрокиРеквизита.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДанных = СтрокиРеквизита[0];
		
		СтрокаДанных.Пометка = Ложь;
		
		СтрокаДанных.ТолькоПросмотр = БлокироватьРеквизиты;
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

Функция БудутЗагружатьсяХарактеристики(Форма) Экспорт
	
	Возврат Форма.РаботаСНоменклатурой_РежимЗагрузкиХарактеристик = "Все" 
		ИЛИ Форма.РаботаСНоменклатурой_РежимЗагрузкиХарактеристик = "Выбранные";
	
КонецФункции
	
Функция РежимыЗагрузкиХарактеристик() Экспорт
	
	Режимы = Новый Структура;
	
	Режимы.Вставить("ВХарактеристики");          // характеристика номенклатуры создается как характеристика ИБ
	Режимы.Вставить("ВДополнительныеРеквизиты"); // на каждую характеристику создается номенклатура
	Режимы.Вставить("ВНаименование");            // на каждую характеристику создается номенклатура
	Режимы.Вставить("НеЗагружать");              // характеристики игнорируются
	Режимы.Вставить("НеВедутся");                // характеристики для номенклатуры не ведутся
	
	Для каждого ЭлементКоллекции Из Режимы Цикл
		Режимы[ЭлементКоллекции.Ключ] = ЭлементКоллекции.Ключ;
	КонецЦикла;
	
	Возврат Режимы;
		
КонецФункции

Функция СтатусыВеденияУчетаХарактеристик() Экспорт
	
	Статусы = Новый Структура;
	
	Статусы.Вставить("НеВедутся");
	Статусы.Вставить("Индивидуальные");
	Статусы.Вставить("Общие");
	
	Для каждого ЭлементКоллекции Из Статусы Цикл
		Статусы[ЭлементКоллекции.Ключ] = ЭлементКоллекции.Ключ;
	КонецЦикла;
	
	Возврат Статусы;
		
КонецФункции

// Сброс представления объекта сервиса на формах объектов информационной базы.
//
// Параметры:
//  Форма								 - УправляемаяФорма - обрабатываемая форма.
//  ПодсказкаВвода						 - Строка - подсказка ввода для поля объекта сервиса.
//  ПредставлениеПустогоОбъектСервиса	 - Строка - представление пустого объекта.
//
Процедура СброситьДанныеОбъектаСервиса(Форма) Экспорт
	
	Форма.РаботаСНоменклатурой_ИдентификаторОбъектаСервиса = "";
	Форма.РаботаСНоменклатурой_ИдентификаторыОбъектовСервиса.Очистить();
	Форма.Элементы.РаботаСНоменклатурой_Характеристики.Видимость = Ложь;
	
	Если Форма.РаботаСНоменклатурой_ЭтоРежимТолькоСопоставление Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.РаботаСНоменклатурой_РежимПредставленияОбъектаСервиса = "ПолеВвода" Тогда
		
		Если Форма.РаботаСНоменклатурой_ТипОбъекта = "Номенклатура" Тогда
			Форма.Элементы.ПредставлениеНоменклатурыСервиса.ПодсказкаВвода = НСтр("ru = 'Выберите номенклатуру из сервиса'");
		ИначеЕсли Форма.РаботаСНоменклатурой_ТипОбъекта = "ВидНоменклатуры" Тогда
			Форма.Элементы.ПредставлениеКатегорииСервиса.ПодсказкаВвода = НСтр("ru = 'Выберите категорию из сервиса'");
		Иначе
			ВызватьИсключение НСтр("ru = 'Ошибка определения типа объекта'");
		КонецЕсли;
		
		Форма.Элементы.РежимОбновления.Доступность = Ложь;
		
	Иначе
		Форма.РаботаСНоменклатурой_ПредставлениеОбъектаСервиса = Новый ФорматированнаяСтрока(НСтр("ru = 'Выбрать'"),,,,"Выбрать");
		НастроитьВидимостьГиперссылок(Форма);
	КонецЕсли;
		
КонецПроцедуры	

// Состояния сервиса.
// 
// Возвращаемое значение:
// Структура - Ключ - параметр, Значение - значение по-умолчанию.
//
Функция ОписаниеСостоянияСервиса() Экспорт 
	
	Состояние = Новый Структура();
	Состояние.Вставить("ПодключенаИнтернетПоддержка", Ложь);
	Состояние.Вставить("ЕстьДоступныеОпции",          Ложь);
	Состояние.Вставить("ДоступенСтартовыйПакет",      Ложь);
	Состояние.Вставить("ОшибкаОпределенияСостояния",  Ложь);
	
	Возврат Состояние;
	
КонецФункции

// Детализация ошибки при покупке карточек номенклатуры.
// 
// Возвращаемое значение:
//   Структура - Ключ - параметр, Значение - значение по-умолчанию.
//
Функция ОписаниеОшибкиПокупкиНоменклатуры() Экспорт 
	
	Ошибка = Новый Структура();
	Ошибка.Вставить("ПокупаемоеКоличество", 0);
	Ошибка.Вставить("ДоступныйОстаток",     0);
	
	Возврат Ошибка;
	
КонецФункции

// Идентификатор сервиса 1С:Номенклатура.
// 
// Возвращаемое значение:
//   Строка - идентификатор сервиса.
//
Функция ИдентификаторСервиса() Экспорт 
	
	Возврат "1C-Nomenclature";
	
КонецФункции

// Заголовок гиперссылки режима обновления
//
// Параметры:
//  АвтоматическийРежимОбновления	 - Булево - Истина если режим автоматического обновления.
// 
// Возвращаемое значение:
//  Строка - заголовок.
//
Функция ЗаголовокГиперссылкиРежимаОбновления(АвтоматическийРежимОбновления) Экспорт
	
	Возврат СтрШаблон(НСтр("ru = 'Обновлять %1'"), ?(АвтоматическийРежимОбновления, "автоматически", "вручную"));
	
КонецФункции

// Настройка отображения гиперссылок.
//
// Параметры:
//  Форма	 - УправляемаяФорма - управляемая форма.
//
Процедура НастроитьВидимостьГиперссылок(Форма) Экспорт
	
	ОбъектСервисаУказан = ЗначениеЗаполнено(Форма.РаботаСНоменклатурой_ИдентификаторОбъектаСервиса)
			ИЛИ Форма.РаботаСНоменклатурой_ИдентификаторыОбъектовСервиса.Количество() > 0;
			
	Заголовок = ЗаголовокГиперссылкиРежимаОбновления(Форма.РаботаСНоменклатурой_ОбновляетсяАвтоматически);
			
	Форма.Элементы.РаботаСНоменклатурой_ОчиститьОбъектСервиса.Видимость = ОбъектСервисаУказан;
	Форма.Элементы.РаботаСНоменклатурой_ОбновитьСейчас.Видимость        = ОбъектСервисаУказан;
	Форма.Элементы.РежимОбновления.Видимость                            = ОбъектСервисаУказан;
	Форма.Элементы.РежимОбновления.Заголовок                            = Заголовок;
	
КонецПроцедуры

#КонецОбласти
