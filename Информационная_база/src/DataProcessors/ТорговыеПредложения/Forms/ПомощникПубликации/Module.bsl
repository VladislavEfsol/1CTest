
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НавигационнаяСсылка = "e1cib/app/" + ЭтотОбъект.ИмяФормы;
	
	Если Не ТорговыеПредложения.ПравоНастройкиТорговыхПредложений(Истина)
		ИЛИ Не БизнесСеть.ПравоНастройкиОбменаДокументами(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ТорговыеПредложенияСлужебный.ИспользоватьФункционалПубликации() Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Отсутствует функциональность публикации торговых предложений.'"),,,, Отказ);
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("Ссылка", Соглашение);
	ОбновитьДанныеФормы();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ТорговыеПредложения_ПослеЗаписи"
		Или ИмяСобытия = "БизнесСеть_РегистрацияОрганизаций"
		Или ИмяСобытия = "ТорговыеПредложение_СопоставлениеНоменклатуры"
		Или ИмяСобытия = "СинхронизацияТорговыхПредложений_ПриИзменении"
		Или ИмяСобытия = "ТорговыеПредложения_СохранениеРегионовАбонента"
		Или Источник = "ИспользоватьСервисРаботаСНоменклатурой" Тогда
		
		ОбновитьСтатистикуПубликации();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоказатьСкрытьПояснения(ПоказыватьПояснения, Элементы);
	ОбновитьСтатистикуПубликации();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СопоставитьНоменклатуруНажатие(Элемент)
	
	ОчиститьСообщения();
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.СопоставлениеНоменклатуры",, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПриИзменении(Элемент)
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаОтчетаПубликуемыхТоваровНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
	ОчиститьСообщения();
	ОткрытьФорму("Отчет.ПубликуемыеТорговыеПредложения.Форма", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьОрганизациюПриИзменении(Элемент)
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиСинхронизироватьПриИзменении(Элемент)
	
	УстановитьПараметрРегламентногоЗадания("Использование", АвтоматическаяПубликация);
	Элементы.РасписаниеПубликации.Доступность = АвтоматическаяПубликация;
	Элементы.НастроитьРасписание.Доступность     = АвтоматическаяПубликация;
	Оповестить("СинхронизацияТорговыхПредложений_ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияЗаголовокНажатие(Элемент)
	
	ОчиститьСообщения();
	ОткрытьФорму("Обработка.БизнесСеть.Форма.РегистрацияОрганизаций");
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеЗаголовокНажатие(Элемент)
	
	ОчиститьСообщения();
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.СписокПубликаций",, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофильОбменаЗаголовокНажатие(Элемент)
	
	ОчиститьСообщения();
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ПрофильАбонента",, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьНоменклатуруСервисаНажатие(Элемент)
	
	ОчиститьСообщения();
	
	Если Не ИспользоватьСопоставление1СНоменклатура Тогда 
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Раздел",    "НастройкиРаботаСНоменклатурой");
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Сервис 1С:Номенклатура'"));
		ПараметрыОткрытия.Вставить("ОписаниеРаздела",
			НСтр("ru = 'Для возможности сопоставления номенклатуры необходимо включить использование сервиса 1С:Номенклатура.'"));
		
		
		ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.ПанельАдминистрирования", ПараметрыОткрытия, ЭтотОбъект,,,, 
			Новый ОписаниеОповещения("СопоставитьНоменклатуруСервисаНажатиеПродолжение", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	Иначе
		
		ОткрытьФормуСопоставленияНоменклатуры();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьНоменклатуруСервисаНажатиеПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено И Результат.ИспользоватьСервисРаботаСНоменклатурой Тогда
		
		ОткрытьФормуСопоставленияНоменклатуры();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СинхронизироватьТорговыеПредложения(Команда)
	
	ОчиститьСообщения();
	
	ДлительнаяОперация = ПубликацияТорговыхПредложенийВФоне();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
		Новый ОписаниеОповещения("СинхронизироватьТорговыеПредложенияЗавершение", ЭтотОбъект), ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСтатистикуПубликации();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(ТекущееРасписание());
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьРасписаниеЗавершение", ЭтотОбъект);
	ДиалогРасписания.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПояснения(Команда)
	
	ПоказыватьПояснения = Не ПоказыватьПояснения;
	ПоказатьСкрытьПояснения(ПоказыватьПояснения, Элементы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СинхронизироватьТорговыеПредложенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда // Отменено пользователем.
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("Сообщения") Тогда
		Для каждого Сообщение Из Результат.Сообщения Цикл 
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Отказ = Ложь;
	Если Результат.Статус = "Ошибка" Тогда
		ТекстСообщения = Результат.ПодробноеПредставлениеОшибки;
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2'"),
				ОбщегоНазначенияКлиент.ДатаСеанса(), ТекстСообщения));
		Отказ = Истина;
	КонецЕсли;
		
	ОбновитьДанныеФормы();
	
	Если Не Отказ Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = '1С:Бизнес-сеть'"),, НСтр("ru = 'Публикация выполнена'"),
			БиблиотекаКартинок.БизнесСеть);
	КонецЕсли;
	
	Оповестить("ТорговыеПредложения_ИзменениеСинхронизации",, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПараметрРегламентногоЗадания("Расписание", Расписание);
	Элементы.РасписаниеПубликации.Заголовок = Расписание;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатистикуПубликации()
	
	Элементы.СопоставлениеНоменклатурыУспех.Видимость  = Ложь;
	Элементы.СопоставлениеНоменклатурыОшибка.Видимость = Ложь;
	
	Элементы.СопоставлениеКатегорийУспех.Видимость  = Ложь;
	Элементы.СопоставлениеКатегорийОшибка.Видимость = Ложь;
	
	Элементы.ОтчетУспех.Видимость  = Ложь;
	Элементы.ОтчетОшибка.Видимость = Ложь;
	
	Элементы.СопоставлениеНоменклатурыОбновление.Видимость = Истина;
	Элементы.ОтчетГруппаОбновление.Видимость = Истина;
	Элементы.СопоставлениеНоменклатуры.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьСтатистикуПубликацииЗавершение", ЭтотОбъект);
	ТорговыеПредложенияКлиент.ОбновитьСтатистикуСинхронизации(ОповещениеОЗавершении, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатистикуПубликацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Результат.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеФормы(Результат.АдресРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеФормы(АдресРезультата = Неопределено)
	
	Элементы.СопоставлениеНоменклатурыОбновление.Видимость = Ложь;
	Элементы.ОтчетГруппаОбновление.Видимость = Ложь;
	
	// Получение статистики
	Если АдресРезультата <> Неопределено
		И АдресРезультатаПодсчетаСтатистики <> АдресРезультата
		И ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		АдресРезультатаПодсчетаСтатистики = АдресРезультата;
		Статистика = ПолучитьИзВременногоХранилища(АдресРезультатаПодсчетаСтатистики);
	ИначеЕсли Статистика = Неопределено Тогда
		Статистика = Новый Структура;
	КонецЕсли;
	
	КоличествоТоваров                    = 0;
	КоличествоСопоставленнойНоменклатуры = 0;
	КоличествоСопоставленныхКатегорий    = 0;
	КоличествоНесопоставленных           = 0;
	
	Если ТипЗнч(Статистика) = Тип("Структура") Тогда
		КоличествоТоваров = ?(Статистика.Свойство("КоличествоПозиций"), Статистика.КоличествоПозиций, КоличествоТоваров);
		КоличествоСопоставленнойНоменклатуры = ?(Статистика.Свойство("КоличествоСопоставлено1СНоменклатура"),
			Статистика.КоличествоСопоставлено1СНоменклатура, КоличествоСопоставленнойНоменклатуры);
		КоличествоСопоставленныхКатегорий = ?(Статистика.Свойство("КоличествоСопоставленоБизнесСеть"),
			Статистика.КоличествоСопоставленоБизнесСеть, КоличествоСопоставленныхКатегорий);
	КонецЕсли;
	
	Подсистема1СНоменклатураСуществует = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой");
	
	Элементы.СопоставлениеНоменклатуры.Видимость = Подсистема1СНоменклатураСуществует;
	
	Если Подсистема1СНоменклатураСуществует Тогда
		
		ИспользоватьСопоставление1СНоменклатура = ПолучитьФункциональнуюОпцию("ИспользоватьСервисРаботаСНоменклатурой");
		КоличествоНесопоставленнойНоменклатуры = 0;
	
		// Сопоставление с 1C:Номенклатура
		Элементы.СопоставлениеНоменклатурыУспех.Видимость = КоличествоСопоставленнойНоменклатуры <> 0
			И Не ПустаяСтрока(АдресРезультатаПодсчетаСтатистики);
		Элементы.СопоставлениеНоменклатурыОшибка.Видимость = КоличествоСопоставленнойНоменклатуры = 0
			И Не ПустаяСтрока(АдресРезультатаПодсчетаСтатистики);
		
		Если КоличествоСопоставленнойНоменклатуры Тогда
			ПроцентСопоставленоНоменклатуры = Окр(КоличествоСопоставленнойНоменклатуры/КоличествоТоваров*100, 1);
			Элементы.СопоставлениеНоменклатурыУспехНадпись.Заголовок = СтрШаблон(НСтр("ru = 'Сопоставлено %1%% (%2)'"),
				ПроцентСопоставленоНоменклатуры , КоличествоСопоставленнойНоменклатуры);
		Иначе
			ПроцентСопоставленоНоменклатуры = 0;
		КонецЕсли;
	
		Если ПроцентСопоставленоНоменклатуры = 100 Тогда 
			Элементы.СопоставлениеКатегорийЗаголовок.Подсказка = НСтр("ru = 'Сопоставление не требуется'");
		Иначе	
			Элементы.СопоставлениеКатегорийЗаголовок.Подсказка = "";
			ПроцентСопоставленоКатегорий = ?(КоличествоТоваров,
				Окр(КоличествоСопоставленныхКатегорий/КоличествоТоваров * 100, 1), 0);
			Элементы.СопоставлениеКатегорийУспехНадпись.Заголовок = СтрШаблон(НСтр("ru = 'Сопоставлено %1%% (%2)'"),
				ПроцентСопоставленоКатегорий, КоличествоСопоставленныхКатегорий);
		КонецЕсли;
	

		Если ПроцентСопоставленоНоменклатуры = 100 Тогда 
			Элементы.СопоставлениеНоменклатуры.РасширеннаяПодсказка.Заголовок = СтрШаблон(НСтр("ru = 'Сопоставлено с 1С:Номенклатура %1%% (%2)'"),
				ПроцентСопоставленоНоменклатуры, КоличествоСопоставленнойНоменклатуры);
		Иначе		
			Элементы.СопоставлениеНоменклатуры.РасширеннаяПодсказка.Заголовок = СтрШаблон(НСтр("ru = 'Сопоставлено с 1С:Номенклатура %1%% (%2), сопоставлено по категориям %3%% (%4)'"),
				ПроцентСопоставленоНоменклатуры, КоличествоСопоставленнойНоменклатуры, ПроцентСопоставленоКатегорий, КоличествоСопоставленныхКатегорий);
		КонецЕсли;
		
		Элементы.СопоставлениеНоменклатуры.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		Элементы.СопоставлениеНоменклатуры.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
		Элементы.СопоставлениеНоменклатуры.ОтображатьЗаголовок = Истина;
	КонецЕсли;
	
	Элементы.СопоставлениеРазноеГруппа.Видимость = Не ПустаяСтрока(АдресРезультатаПодсчетаСтатистики);
	
	Если Не ПустаяСтрока(АдресРезультатаПодсчетаСтатистики) Тогда
		КоличествоНесопоставленных = КоличествоТоваров - (КоличествоСопоставленнойНоменклатуры
		+ КоличествоСопоставленныхКатегорий);
		Элементы.СопоставлениеРазноеЗаголовок.Заголовок = СтрШаблон(НСтр("ru = 'Несопоставлено %1%% (%2)'"),
			?(КоличествоТоваров, Окр(КоличествоНесопоставленных/КоличествоТоваров*100, 1), 0),
			КоличествоНесопоставленных);
	КонецЕсли;
	
	Элементы.СопоставлениеРазноеЗаголовок.Видимость = КоличествоНесопоставленных > 0;	
	Элементы.СопоставлениеРазноеПояснение.Видимость = КоличествоНесопоставленных > 0;	 
	Элементы.СопоставлениеКатегорийУспех.Видимость = КоличествоСопоставленныхКатегорий <> 0
		И Не ПустаяСтрока(АдресРезультатаПодсчетаСтатистики);
	Элементы.СопоставлениеКатегорийОшибка.Видимость = КоличествоНесопоставленных > 0 
		И КоличествоСопоставленныхКатегорий = 0	И Не ПустаяСтрока(АдресРезультатаПодсчетаСтатистики);
	
	Элементы.ОтчетУспех.Видимость  = КоличествоТоваров <> 0 И Не ПустаяСтрока(АдресРезультатаПодсчетаСтатистики);
	Элементы.ОтчетОшибка.Видимость = КоличествоТоваров = 0 И Не ПустаяСтрока(АдресРезультатаПодсчетаСтатистики);
	
	Если КоличествоТоваров И Не ПустаяСтрока(АдресРезультатаПодсчетаСтатистики) Тогда
		Элементы.ОтчетУспехНадпись.Заголовок = СтрШаблон(НСтр("ru = 'Товары готовы для публикации (%1)'"), КоличествоТоваров);
	КонецЕсли;
	
	// Проверка регистрации организаций.
	ИспользуетсяНесколькоОрганизаций = ЭлектронноеВзаимодействиеСлужебный.ИспользуетсяНесколькоОрганизаций();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОрганизацииБизнесСеть.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть";
	КоличествоОрганизаций = Запрос.Выполнить().Выбрать().Количество();
	
	Элементы.ОрганизацияУспех.Видимость = КоличествоОрганизаций <> 0;
	Элементы.ОрганизацияОшибка.Видимость  = КоличествоОрганизаций = 0;
	
	Если КоличествоОрганизаций <> 0 Тогда
		Если ИспользуетсяНесколькоОрганизаций Тогда
			Элементы.ОрганизацияУспехНадпись.Заголовок = СтрШаблон(НСтр("ru = 'Организации зарегистрированы (%1)'"),
				КоличествоОрганизаций);
		Иначе
			Элементы.ОрганизацияУспехНадпись.Заголовок = НСтр("ru = 'Организация зарегистрирована'");
		КонецЕсли;
	ИначеЕсли ИспользуетсяНесколькоОрганизаций Тогда
		Элементы.ОрганизацияОшибкаНадпись.Заголовок = НСтр("ru = 'Организации не зарегистрированы'");
	Иначе
		Элементы.ОрганизацияОшибкаНадпись.Заголовок = НСтр("ru = 'Организация не зарегистрирована'");
	КонецЕсли;
	
	// Проверка активных торговых предложений.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение КАК ТорговоеПредложение
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
	|		ПО СостоянияСинхронизацииТорговыеПредложения.Организация = ОрганизацииБизнесСеть.Организация
	|ГДЕ
	|	НЕ СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение.ПометкаУдаления
	|	И НЕ СостоянияСинхронизацииТорговыеПредложения.Отключено";
	
	КоличествоТорговыхСоглашений = Запрос.Выполнить().Выбрать().Количество();
	Элементы.ТорговыеПредложенияУспех.Видимость  = КоличествоТорговыхСоглашений <> 0;
	Элементы.ТорговыеПредложенияОшибка.Видимость = КоличествоТорговыхСоглашений = 0;
	
	Если КоличествоТорговыхСоглашений <> 0 Тогда
		Элементы.ТорговыеПредложенияУспехНадпись.Заголовок = СтрШаблон(НСтр("ru = 'Торговые предложения настроены (%1)'"),
			КоличествоТорговыхСоглашений);
	КонецЕсли;
	
	// Получение расписание задания публикации торговых предложений.
	АвтоматическаяПубликация = АвтоматическаяПубликацияВключена();
	Элементы.РасписаниеПубликации.Заголовок   = ТекущееРасписание();
	Элементы.РасписаниеПубликации.Доступность = АвтоматическаяПубликация;
	Элементы.НастроитьРасписание.Доступность     = АвтоматическаяПубликация;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Элементы.НастроитьРасписание.Видимость     = Ложь;
		Элементы.РасписаниеПубликации.Видимость = Ложь;
	КонецЕсли;
	
	// Запрос состояние публикации торговых предложений.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение КАК ТорговоеПредложение
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
	|
	|УПОРЯДОЧИТЬ ПО
	|	СостоянияСинхронизацииТорговыеПредложения.ДатаСинхронизации УБЫВ";
	
	ВыборкаСинхронизаций = Запрос.Выполнить().Выбрать();
	Если ВыборкаСинхронизаций.Следующий() Тогда
		ЭлементСостояния = Элементы.РезультатНадпись;
		ТорговыеПредложения.ОбновитьДекорациюСостоянияПубликации(ВыборкаСинхронизаций.ТорговоеПредложение, ЭлементСостояния);
		Если ПустаяСтрока(ЭлементСостояния.Заголовок) Тогда
			ЭлементСостояния.Заголовок = НСтр("ru = 'Новая публикация'");
		КонецЕсли;
		Элементы.РезультатНадпись.Гиперссылка = Ложь;
	КонецЕсли;
	
	// Проверка профиля абонента.
	// Запрос к сервису Бизнес-сеть, для получения количества регионов и адресов.
	КоличествоРегионовПродаж = 0;
	КоличествоАдресовПродаж = 0;
	НаименованиеРегиона = "";
	Если БизнесСеть.ОрганизацияЗарегистрирована() Тогда
		Отказ = Ложь;
		ТаблицыАдресовРегионов = ТорговыеПредложения.ПолучитьАдресаПрофиляАбонента(Отказ);
		Если ТаблицыАдресовРегионов <> Неопределено И ТипЗнч(ТаблицыАдресовРегионов) = Тип("Структура")
			И ТаблицыАдресовРегионов.Свойство("РегионыПродажи")
			И ТипЗнч(ТаблицыАдресовРегионов.РегионыПродажи) = Тип("ТаблицаЗначений") Тогда
			КоличествоРегионовПродаж = ТаблицыАдресовРегионов.РегионыПродажи.Количество();
			КоличествоАдресовПродаж = ТаблицыАдресовРегионов.АдресаПродажи.Количество();
			Если КоличествоРегионовПродаж = 1 Тогда
				НаименованиеРегиона = ТорговыеПредложения.ПредставлениеПоследнегоРегионаАдреса(ТаблицыАдресовРегионов.РегионыПродажи[0].ЗначенияПолей, Отказ)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.РегионыПродажУспех.Видимость = КоличествоРегионовПродаж <> 0 ИЛИ КоличествоАдресовПродаж <> 0;
	Элементы.РегионыПродажОшибка.Видимость = КоличествоРегионовПродаж = 0 И КоличествоАдресовПродаж = 0;
	
	ЗаголовокЭлемента = "";
	Если КоличествоРегионовПродаж И КоличествоАдресовПродаж Тогда
		ЗаголовокЭлемента = СтрШаблон(НСтр("ru = 'Настроены регионы доставки (%1) и адреса самовывоза (%2)'"),
			?(ПустаяСтрока(НаименованиеРегиона), КоличествоРегионовПродаж, НаименованиеРегиона), КоличествоАдресовПродаж);
	ИначеЕсли КоличествоРегионовПродаж Тогда
		ЗаголовокЭлемента = СтрШаблон(НСтр("ru = 'Настроены регионы доставки (%1)'"),
			?(ПустаяСтрока(НаименованиеРегиона), КоличествоРегионовПродаж, НаименованиеРегиона));
	ИначеЕсли КоличествоАдресовПродаж Тогда
		ЗаголовокЭлемента = СтрШаблон(НСтр("ru = 'Настроены адреса самовывоза (%1)'"), КоличествоАдресовПродаж);
	КонецЕсли;
	Элементы.РегионыПродажУспехНадпись.Заголовок = ЗаголовокЭлемента;
	
	ЕстьБлокирующиеОшибки = КоличествоТоваров = 0
		ИЛИ КоличествоОрганизаций = 0
		ИЛИ КоличествоТорговыхСоглашений = 0
		ИЛИ КоличествоРегионовПродаж = 0 И КоличествоАдресовПродаж = 0;
		
	Элементы.ОпубликоватьТорговыеПредложения.Доступность = Не ЕстьБлокирующиеОшибки;
	
КонецПроцедуры

&НаСервере
Функция АвтоматическаяПубликацияВключена()
	
	Возврат ПолучитьПараметрРегламентногоЗадания("Использование", Ложь);
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрРегламентногоЗадания(ИмяПараметра, ЗначениеПараметра)
	
	УстановитьПривилегированныйРежим(Истина);
	БизнесСеть.ИзменитьРегламентноеЗадание(Метаданные.РегламентныеЗадания.СинхронизацияТорговыхПредложений.Имя,
		ИмяПараметра, ЗначениеПараметра);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрРегламентногоЗадания(ИмяПараметра, ЗначениеПоУмолчанию)
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.СинхронизацияТорговыхПредложений);
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ПараметрыЗадания.Вставить("ИмяМетода", Метаданные.РегламентныеЗадания.СинхронизацияТорговыхПредложений.ИмяМетода);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
	Для каждого Задание Из СписокЗаданий Цикл
		Возврат Задание[ИмяПараметра];
	КонецЦикла;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

&НаСервере
Функция ТекущееРасписание()
	
	Возврат ПолучитьПараметрРегламентногоЗадания("Расписание", Новый РасписаниеРегламентногоЗадания);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСкрытьПояснения(ПоказыватьПояснения, Элементы)
	
	Элементы.ПоказатьСкрытьПояснения.Заголовок = ?(ПоказыватьПояснения, НСтр("ru = 'Скрыть пояснения'"),
		НСтр("ru = 'Показать пояснения'"));
	Элементы.ПояснениеОрганизация.Видимость         = ПоказыватьПояснения;
	Элементы.ПояснениеОтчет.Видимость               = ПоказыватьПояснения;
	Элементы.ПояснениеСинхронизация.Видимость       = ПоказыватьПояснения;
	Элементы.ПояснениеКатегорийСопоставление.Видимость       = ПоказыватьПояснения;
	Элементы.ПояснениеТорговыеПредложения.Видимость = ПоказыватьПояснения;
	Элементы.ПояснениеРегионыПродаж.Видимость       = ПоказыватьПояснения;
	Элементы.ПояснениеНоменклатурыСопоставление.Видимость = ПоказыватьПояснения;
	
КонецПроцедуры

&НаСервере
Функция ПубликацияТорговыхПредложенийВФоне()
		
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Публикация торговых предложений в сервисе 1С:Бизнес-сеть'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("ТорговыеПредложенияСлужебный.СинхронизацияТорговыхПредложений",
		Неопределено, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуСопоставленияНоменклатуры()
	
	Оповещение = Новый ОписаниеОповещения("СопоставитьНоменклатуруСервисаЗавершение", ЭтотОбъект);
	МодульРаботаСНоменклатуройКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройКлиент");
	ПараметрыОткрытия = МодульРаботаСНоменклатуройКлиент.ПараметрыФормыСопоставленийНоменклатуры("ТорговыеПредложения");
	МодульРаботаСНоменклатуройКлиент.ОткрытьФормуСопоставленияНоменклатуры(ПараметрыОткрытия, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьНоменклатуруСервисаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьСтатистикуПубликации();
	
КонецПроцедуры

#КонецОбласти
