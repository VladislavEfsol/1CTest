
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	БизнесСеть.УсловноеОформлениеГиперссылкиПоказатьЕще(УсловноеОформление, Элементы.Список,
		Элементы.СписокГиперссылкаПоказатьЕще);
	УстановитьКартинкуКомандыНайти(Ложь);

	Если Не ТорговыеПредложения.ПравоПоискаТорговыхПредложений(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПроверитьРегистрациюОрганизаций();
	
	// Установка полученных параметров и отборов.
	Параметры.Свойство("ИдентификаторКатегории", ТекущаяКатегория);
	Параметры.Свойство("ИдентификаторЗаказа",    ИдентификаторЗаказа);
	Параметры.Свойство("ОтборАртикул",           ОтборАртикул);
	Параметры.Свойство("ОтборНаименование",      ОтборНаименование);
	Параметры.Свойство("ОтборНоменклатураСервиса",   ОтборНоменклатураСервиса);
	Параметры.Свойство("ОтборХарактеристикаСервиса", ОтборХарактеристикаСервиса);
	
	Если Параметры.Свойство("Контрагент") Тогда
		ЗаполнитьОтборПоКонтрагенту(Параметры.Контрагент, ЭтотОбъект);
	КонецЕсли;
	
	РазрешитьИзменениеКонтрагента = Не ЗначениеЗаполнено(Контрагент);
	Элементы.НаименованиеКонтрагента.Видимость = РазрешитьИзменениеКонтрагента;
	Элементы.ОтборПоКонтрагенту.Видимость = РазрешитьИзменениеКонтрагента;
	
	Параметры.Свойство("Валюта", Валюта);
	
	Если Параметры.Свойство("ИНН") Тогда
		ИдентификаторКонтрагента = Параметры.ИНН
			+ ?(Параметры.Свойство("КПП") И Параметры.КПП <> "0" И Не ПустаяСтрока(Параметры.КПП),
				"/" + Параметры.КПП, "");
	КонецЕсли;

	Если ПустаяСтрока(НаименованиеКонтрагента) И ЗначениеЗаполнено(Контрагент) Тогда
		НаименованиеКонтрагента = Строка(Контрагент);
	КонецЕсли;
	
	Если Параметры.Свойство("ОтборШтрихКоды") И ЗначениеЗаполнено(Параметры.ОтборШтрихКоды) Тогда
		ОтборШтрихКоды.ЗагрузитьЗначения(Параметры.ОтборШтрихКоды);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборНаименование) Тогда
		СтрокаПоиска = ОтборНаименование;
	ИначеЕсли ЗначениеЗаполнено(ОтборАртикул) Тогда
		СтрокаПоиска = ОтборАртикул;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗаказа) Тогда
		ИдентификаторЗаказа = УникальныйИдентификатор;
	Иначе
		АдресТоваровВХранилище = "";
		Если Параметры.Свойство("АдресТоваровВХранилище", АдресТоваровВХранилище) Тогда
			ТоварыОбъект = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
			Товары.Загрузить(ТоварыОбъект);
		КонецЕсли;
	КонецЕсли;
	
	// Инициализация валюты по сохраненному значению.
	КлючНастроекФормы = "Обработка.ТорговыеПредложения.Форма.ПоискПоОтборам/ТекущиеДанные";
	Настройки = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекФормы);
	СохраненнаяВалюта = Неопределено;
	Если ТипЗнч(Настройки) = Тип("Соответствие") Тогда
		СохраненнаяВалюта     = Настройки.Получить("Валюта");
		РежимСортировки       = Настройки.Получить("РежимСортировки");
		ЗапрашиватьКоличество = Настройки.Получить("ЗапрашиватьКоличество");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Валюта = СохраненнаяВалюта;
	ИначеЕсли Валюта <> СохраненнаяВалюта И ТипЗнч(Настройки) = Тип("Соответствие") Тогда
		Настройки.Вставить("Валюта", Валюта);
		ХранилищеСистемныхНастроек.Сохранить(КлючНастроекФормы,, Настройки);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		ТорговыеПредложенияПереопределяемый.ПолучитьВалютуРегламентированногоУчета(Валюта);
	КонецЕсли;
	Элементы.ИзменитьВалютуПоиска.Заголовок = СтрШаблон(НСтр("ru = 'Валюта: %1'"), Валюта);
	
	// Заполнение навигации категорий.
	ЗаполнитьНавигациюКатегорий(ТекущаяКатегория,, Отказ);
	
	// Видимость гиперссылки запроса цен.
	ТорговыеПредложенияПереопределяемый.ПолучитьДоступностьФункционалаЗапросаЦен(Элементы.ЗапроситьЦены.Видимость);
	
	// Чтение сохраненных настроек отбора по региону.
	РегионПоиска = ТорговыеПредложения.ОписаниеРегионаПоиска();
	СохраненныеНастройкиРегионаПоиска = ТорговыеПредложения.СохраненныеНастройкиРегионаПоиска();
	ЗаполнитьЗначенияСвойств(РегионПоиска, СохраненныеНастройкиРегионаПоиска);
	
	// Установка видимости доступности элементов.
	УстановитьВидимостьДоступность();
	
	Страницы = ТорговыеПредложенияСлужебный.НовыеПараметрыСтраницСервиса(100);
	
	Если ПустаяСтрока(РежимСортировки) Тогда
		РежимСортировки = "СортировкаРелевантность";
	КонецЕсли;
	УстановитьРежимСортировки(Элементы, РежимСортировки, Валюта);
	Элементы.ЗапрашиватьКоличество.Пометка = ЗапрашиватьКоличество;
	
	Если ТребуетсяРегистрацияОрганизации И РегионПоиска.РежимОтбора = 1 Тогда
		РегионПоиска.РежимОтбора = 0;
	КонецЕсли;
	ТорговыеПредложения.ОбновитьСведенияРегионаПоиска(РегионПоиска, РегионЗаголовок, ИдентификаторыРегионов);
	
	ОтборыУстановлены = ЦенаОт <> 0 Или ЦенаДо <> 0
		Или (ЗначениеЗаполнено(Контрагент) Или ЗначениеЗаполнено(НаименованиеКонтрагента));
	ОбновитьПризнакУстановкиОтборов();
	
	// Запуск фонового задания для поиска.
	ФоновоеЗаданиеПоиска = НайтиТорговыеПредложенияВФоне(Ложь);
	Если ЗначениеЗаполнено(ФоновоеЗаданиеПоиска) Тогда
		УстановитьКартинкуКомандыНайти(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьНадписьИтогов();
	Если ЗначениеЗаполнено(ФоновоеЗаданиеПоиска) Тогда
		ОжидатьЗавершениеПоиска();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеПоиска()
	
	// Инициализация обработчик ожидания завершения.
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Поиск торговых предложений.'");
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.Вставить("ИдентификаторЗадания", ФоновоеЗаданиеПоиска.ИдентификаторЗадания);
	ОбработкаЗавершенияПоиска = Новый ОписаниеОповещения("НайтиТорговыеПредложенияЗавершение",
		ЭтотОбъект);
		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗаданиеПоиска, ОбработкаЗавершенияПоиска, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ТорговыеПредложения_ИзменитьКоличествоВЗаказе"
		И Параметр.ИдентификаторЗаказа = ИдентификаторЗаказа
		И Источник <> ЭтотОбъект Тогда
		
		Количество = ?(Параметр.Свойство("Количество"), Параметр.Количество, Неопределено);
		
		ДобавитьТоварыДляЗаказа(Параметр, Количество);
		СтрокаТовары = Товары.НайтиСтроки(Новый Структура("Идентификатор", Параметр.Идентификатор));
		
		СтрокаСписка = Неопределено;
		Если Элементы.Список.ТекущиеДанные <> Неопределено
			И Элементы.Список.ТекущиеДанные.Идентификатор = Параметр.Идентификатор Тогда
			СтрокаСписка = Элементы.Список.ТекущиеДанные;
		Иначе
			СтрокаСписка = Список.НайтиСтроки(Новый Структура("Идентификатор", Параметр.Идентификатор));
			Если СтрокаСписка.Количество() Тогда
				СтрокаСписка = СтрокаСписка[0];
			Иначе
				СтрокаСписка = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаСписка <> Неопределено Тогда
			Если Количество = 0 Тогда
				СтрокаСписка.ГиперссылкаДобавить = "";
			ИначеЕсли СтрокаТовары.Количество() Тогда
				СтрокаСписка.ГиперссылкаДобавить = СтрокаТовары[0].Количество;
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьНадписьИтогов();
		
	ИначеЕсли ИмяСобытия = "ТорговыеПредложения_УдалитьИзЗаказа"
		И Параметр.ИдентификаторЗаказа = ИдентификаторЗаказа Тогда
		
		Для каждого Идентификатор Из Параметр.ИдентификаторыПредложений Цикл
			
			СтрокаТовары = Товары.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
			Если СтрокаТовары.Количество() Тогда
				Товары.Удалить(Товары.Индекс(СтрокаТовары[0]));
			КонецЕсли;
			
			СтрокаСписка = Список.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
			Если СтрокаСписка.Количество() Тогда 
				СтрокаСписка[0].ГиперссылкаДобавить = "";
			КонецЕсли;
			
		КонецЦикла;
		ОбновитьНадписьИтогов();
		
	ИначеЕсли ИмяСобытия = "ТорговыеПредложения_ПоискПоОтборам_Обновить" Тогда
		
		ПараметрыИзменены = Ложь;
		Если Параметр.Свойство("ИдентификаторКатегории") И ТекущаяКатегория <> Параметр.ИдентификаторКатегории Тогда
			ПараметрыИзменены = Истина;
			ТекущаяКатегория = Параметр.ИдентификаторКатегории;
		КонецЕсли;
			
		Если Параметр.Свойство("ОтборНаименование") Тогда
			ПараметрыИзменены = Истина;
			ОтборНаименование = Параметр.ОтборНаименование;
			СтрокаПоиска = ОтборНаименование;
		КонецЕсли;
		Если Параметр.Свойство("ОтборАртикул") Тогда
			ПараметрыИзменены = Истина;
			ОтборАртикул = Параметр.ОтборАртикул;
			Если ПустаяСтрока(СтрокаПоиска) Тогда
				СтрокаПоиска = ОтборАртикул;
			КонецЕсли;
		КонецЕсли;
		Если Параметр.Свойство("ОтборШтрихКоды") И ТипЗнч(Параметр.ОтборШтрихКоды) = Тип("Массив")
			И Параметр.ОтборШтрихКоды.Количество() Тогда
			ПараметрыИзменены = Истина;
			ОтборШтрихКоды.ЗагрузитьЗначения(Параметр.ОтборШтрихКоды);
			Если ПустаяСтрока(СтрокаПоиска) Тогда
				СтрокаПоиска = Параметр.ОтборШтрихКоды[0];
			КонецЕсли;
		КонецЕсли;
		Если Параметр.Свойство("Контрагент") Тогда
			ПараметрыИзменены = Истина;
			ЗаполнитьОтборПоКонтрагенту(Параметр.Контрагент, ЭтотОбъект);
		КонецЕсли;
		
		Если ПараметрыИзменены Тогда
			КатегорияПослеПоиска = ТекущаяКатегория;
			СбросКатегорийПослеПоиска = Истина;
			ЗаполнитьНавигациюКатегорийИЗагрузитьТорговыеПредложения();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ТорговыеПредложения_ОтправленыЗаказыТоваров"
		И Параметр.Свойство("ИдентификаторЗаказа")
		И Параметр.ИдентификаторЗаказа = ИдентификаторЗаказа Тогда
		
		// Очистка товаров.
		Для каждого ПозицияТовары Из Товары Цикл
			СтрокаСписка = Список.НайтиСтроки(Новый Структура("Идентификатор", ПозицияТовары.Идентификатор));
			Если СтрокаСписка.Количество() Тогда
				СтрокаСписка[0].ГиперссылкаДобавить = "";
			КонецЕсли;
		КонецЦикла;
		Товары.Очистить();
		ОбновитьНадписьИтогов();
		
	ИначеЕсли ИмяСобытия = "БизнесСеть_РегистрацияОрганизаций" Тогда
		
		ПроверитьРегистрациюОрганизаций();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы И Товары.Количество() И Не ВыполняетсяЗакрытие Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект),
			НСтр("ru = 'Список подобранных товаров будет очищен. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) >= 3 Тогда
		Элемент.СписокВыбора.Очистить();
		ДанныеВыбора = КатегорииПоНаименованию(Текст);
		Если ДанныеВыбора <> Неопределено Тогда
			Для каждого ЭлементСписка Из ДанныеВыбора Цикл
				Элемент.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
			КонецЦикла;
			ДанныеВыбора.Вставить(0, Текст, Текст + "...");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	Иначе
		Элемент.СписокВыбора.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ОтборНаименование          = "";
	ОтборАртикул               = "";
	ОтборНоменклатураСервиса   = "";
	ОтборХарактеристикаСервиса = "";
	ОтборШтрихКоды.Очистить();
	
	// Если не из выбора, значит введено вручную.
	ЭлементВыбора = Элемент.СписокВыбора.НайтиПоЗначению(СтрокаПоиска);
	
	Если ЭлементВыбора = Неопределено Тогда
		НайтиТорговыеПредложения();
	Иначе
		// Изменение текущей категории.
		ТекущаяКатегория = СтрокаПоиска;
		СтрокаПоиска = "";
		Элементы.СтрокаПоиска.ВыделенныйТекст = "";
		ОтборыПоКатегорииАктуальны = Ложь;
		
		КатегорияПослеПоиска = ТекущаяКатегория;
		СбросКатегорийПослеПоиска = Истина;
		ЗаполнитьНавигациюКатегорийИЗагрузитьТорговыеПредложения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорияПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Свойство("АдресКэшаКатегорийРубрик", АдресКэшаКатегорийРубрик);
	ТекущаяКатегория = Результат.Идентификатор;
	
	СтрокаПоиска = "";
	ОтборыПоКатегорииАктуальны = Ложь;
	КатегорияПослеПоиска = ТекущаяКатегория;
	СбросКатегорийПослеПоиска = Истина;
	
	ЗаполнитьНавигациюКатегорийИЗагрузитьТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураКатегорийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Ключ = НавигационнаяСсылкаФорматированнойСтроки;
	ИндексРазделителя = СтрНайти(Ключ, ":");
	
	НовыйИдентификатор = Сред(Ключ, 3, ИндексРазделителя - 3);
	
	Если ТекущаяКатегория = НовыйИдентификатор Тогда
		Возврат;
	Иначе
		КатегорияПослеПоиска = НовыйИдентификатор;
		СбросКатегорийПослеПоиска = Ложь;
		ЗапроситьЗаполнениеНавигацииКатегорий();
	КонецЕсли;
	
	ОтборыПоКатегорииАктуальны = Ложь;
	ТекущаяКатегория = НовыйИдентификатор;
	НайтиТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТребуетсяОбновлениеКэшаКатегории = Ложь;
	Если ПустаяСтрока(АдресКэшаКатегорийРубрик) Тогда
		АдресКэшаКатегорийРубрик = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		ТребуетсяОбновлениеКэшаКатегории = Истина;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("КатегорияПослеВыбора", ЭтотОбъект);
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора", Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормыВыбора.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ПараметрыФормыВыбора.Вставить("Отбор", Новый Структура("ЭтоГруппа", Истина));
	ПараметрыФормыВыбора.Вставить("АдресКэшаКатегорийРубрик", АдресКэшаКатегорийРубрик);
	ПараметрыФормыВыбора.Вставить("ТребуетсяОбновлениеКэшаКатегории", ТребуетсяОбновлениеКэшаКатегории);
	ПараметрыФормыВыбора.Вставить("Идентификатор", ТекущаяКатегория);
	ОчиститьСообщения();
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ДеревоКатегорий", ПараметрыФормыВыбора,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКореньКатегорийНажатие(Элемент)
	
	ТекущаяКатегория = Неопределено;
	ОтборыПоКатегорииАктуальны = Ложь;
	КатегорияПослеПоиска = Неопределено;
	СбросКатегорийПослеПоиска = Ложь;
	
	ЗаполнитьНавигациюКатегорийИЗагрузитьТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПодкатегорийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Ключ = НавигационнаяСсылкаФорматированнойСтроки;
	ИндексРазделителя = СтрНайти(Ключ, ":");
	
	НовыйИдентификатор = Сред(Ключ, 3, ИндексРазделителя - 3); 
	
	Если ТекущаяКатегория = НовыйИдентификатор Тогда
		Возврат;
	Иначе
		КатегорияПослеПоиска = НовыйИдентификатор;
		СбросКатегорийПослеПоиска = Ложь;
		ОтборыПоКатегорииАктуальны = Ложь;
		ТекущаяКатегория = НовыйИдентификатор;
		ЗаполнитьНавигациюКатегорийИЗагрузитьТорговыеПредложения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСпособаДоставки(Элемент)
	
	Если РегионПоиска.РежимОтбора = 0 Тогда 
		ОткрытьВыборРегионаПоиска();
	Иначе
		НайтиТорговыеПредложения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеГиперссылки(Элемент)
	
	Если Не СтрНайти(Элемент.Имя, "ЗаголовокОтбора_") Тогда
		Возврат;
	КонецЕсли;
	
	СтрелкаВверх = "↑";
	СтрелкаВниз = "↓";
	
	ИмяГруппыОтбора = СтрЗаменить(Элемент.Имя, "ЗаголовокОтбора_", "ГруппаОтбора_");
	ГруппаОтбора = Элементы[ИмяГруппыОтбора];
	Если ГруппаОтбора.Видимость Тогда
		ГруппаОтбора.Видимость = Ложь;
		Элемент.Заголовок = СтрЗаменить(Элемент.Заголовок, СтрелкаВверх, СтрелкаВниз);
	ИначеЕсли ГруппаОтбора.ПодчиненныеЭлементы.Количество() Тогда
		ГруппаОтбора.Видимость = Истина;
		Элемент.Заголовок = СтрЗаменить(Элемент.Заголовок, СтрелкаВниз, СтрелкаВверх);
	Иначе
		Идентификатор = СтрЗаменить(Элемент.Имя, "ЗаголовокОтбора_", "");
		СформироватьЭлементыХарактеристики(Идентификатор, Элемент.Подсказка);
		ГруппаОтбора.Видимость = Истина;
		Элемент.Заголовок = СтрЗаменить(Элемент.Заголовок, СтрелкаВниз, СтрелкаВверх);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзменениеОтбора(Элемент)
	
	НайтиТорговыеПредложения()
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие(Элемент)
	
	Если Найти(Элемент.Имя, "ОчиститьОтбор_") Тогда
		
		// Очистка отбора.
		ИмяРеквизита = Сред(Элемент.Имя, СтрНайти(Элемент.Имя, "_") + 1);
		
		Если ИмяРеквизита = "Цена" Тогда
			ЦенаОт = 0; ЦенаДо = 0;
		ИначеЕсли ИмяРеквизита = "НаименованиеКонтрагента" Тогда
			НаименованиеКонтрагента = "";
			Контрагент = Неопределено;
			ИдентификаторКонтрагента = Неопределено;
		Иначе
			ЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
			Если ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
				ЭтотОбъект[ИмяРеквизита] = Ложь;
			ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Число") Тогда
				ЭтотОбъект[ИмяРеквизита] = 0;
			ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
				ЭтотОбъект[ИмяРеквизита] = "";
			ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("СписокЗначений") Тогда 
				Для каждого ЭлементСписка Из ЭтотОбъект[ИмяРеквизита] Цикл
					ЭлементСписка.Пометка = Ложь;
				КонецЦикла;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		НайтиТорговыеПредложения();
		
	ИначеЕсли Найти(Элемент.Имя, "ЗаголовокОтбора_") Тогда
		
		ИмяРеквизита = Сред(Элемент.Имя, СтрНайти(Элемент.Имя, "_") + 1);
		Если ИмяРеквизита = "Цена" Тогда
			Если Найти(Элемент.Заголовок, НСтр("ru = 'от'")) Тогда
				ИмяРеквизита = "ЦенаОт";
			Иначе
				ИмяРеквизита = "ЦенаДо";
			КонецЕсли;
		КонецЕсли;
		
		Если Не Элементы.ГруппаПанельОтборов.Видимость Тогда
			Элементы.ПоказатьСкрытьОтборы.Пометка = Истина;
			Элементы.ГруппаПанельОтборов.Видимость = Истина;
		КонецЕсли;
		
		ТекущийЭлемент = Элементы[ИмяРеквизита];
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНаименованиеПриИзменении(Элемент)
	
	Контрагент = Неопределено;
	ИдентификаторКонтрагента = Неопределено;
	НайтиТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура("ТекущаяСтрока", Контрагент);
	ОбработкаОповещения = Новый ОписаниеОповещения("ВыборКонтрагентаПродолжение", ЭтотОбъект);
	ИмяФормыВыбора = БизнесСетьВызовСервера.ИмяФормыВыбораПоОпределяемомуТипу("КонтрагентБЭД");
	ОчиститьСообщения();
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыОткрытия, ЭтотОбъект,,,, ОбработкаОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНаименованиеОчистка(Элемент, СтандартнаяОбработка)
	
	ИННКонтрагента = "";
	КППКонтрагента = "";
	
КонецПроцедуры

&НаКлиенте
Процедура РегионЗаголовокНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьВыборРегионаПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьЦеныНажатие(Элемент)
	
	Если Товары.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбраны товары для запроса цен.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИдентификаторЗаказа",    ИдентификаторЗаказа);
	ПараметрыОткрытия.Вставить("АдресТоваровВХранилище", АдресХранилищаТоваров());
	ПараметрыОткрытия.Вставить("Валюта", Валюта);
	ТорговыеПредложенияКлиентПереопределяемый.ОткрытьФормуОтправкиЗапросовЦен(ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТребуетсяРегистрацияОрганизации Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросРегистрацииОрганизацииПродолжение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение,
			НСтр("ru = 'Для просмотра информации необходимо зарегистрироваться в сервисе 1С:Бизнес-сеть. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ОбработатьВыборСписка();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НайтиПредложения(Команда)
	
	// Проверка работы подключаемого обработчика ожидания.
	Если Элементы.НайтиПредложения.Пометка Тогда
		Возврат;
	Иначе
		Элементы.НайтиПредложения.Пометка = Истина;
	КонецЕсли;
	
	// Поиск выполняется с обработчиком ожидания для корректной работы фоновых заданий.
	// Для начала поиска пауза 0.1 сек., для отмены поиска 0.8 сек.
	ПодключитьОбработчикОжидания("НайтиТорговыеПредложенияСтарт",
		?(ЗначениеЗаполнено(ФоновоеЗаданиеПоиска), 0.8, 0.1), Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьТовары(Команда)
	
	Если Товары.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Отсутствуют товары для заказа'"));
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОчиститьТоварыПродолжение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Список товаров для заказа будет очищен. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЗаказыТоваров(Команда)
	
	Если Товары.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Отсутствуют товары для заказа.'"));
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ОформитьЗаказыТоваровЗавершение", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИдентификаторЗаказа",    ИдентификаторЗаказа);
	ПараметрыОткрытия.Вставить("АдресТоваровВХранилище", АдресХранилищаТоваров());
	ПараметрыОткрытия.Вставить("Валюта", Валюта);
	ОчиститьСообщения();
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ФормированиеЗаказов", ПараметрыОткрытия, ЭтотОбъект,,,,
		ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимСортировки(Команда)
	
	РежимСортировки = Команда.Имя;
	УстановитьРежимСортировки(Элементы, РежимСортировки, Валюта);
	НайтиТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсходящиеДокументы(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимИсходящихДокументов", Истина);
	ОчиститьСообщения();
	ОткрытьФорму("Обработка.БизнесСеть.Форма.ДокументыОбмена", ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОтборы(Команда)
	
	Элементы.ПоказатьСкрытьОтборы.Пометка = Не Элементы.ПоказатьСкрытьОтборы.Пометка;
	Элементы.ГруппаПанельОтборов.Видимость = Элементы.ПоказатьСкрытьОтборы.Пометка;
	
	Если Элементы.ПоказатьСкрытьОтборы.Пометка Тогда
		Если ЗначениеЗаполнено(ТекущаяКатегория) И ОтборыПоКатегорииАктуальны = Ложь Тогда
			СформироватьОтборыПоКатегории(ТекущаяКатегория);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВалютуПоиска(Команда)
	
	Если Товары.Количество() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ИзменитьВалютуПоискаПродолжение", ЭтотОбъект),
			НСтр("ru = 'При изменении валюты, список товаров для заказа будет очищен.'"),
			РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ИзменитьВалютуПоискаПродолжение(КодВозвратаДиалога.ОК, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапрашиватьКоличество(Команда)
	
	ЗапрашиватьКоличество = Не ЗапрашиватьКоличество;
	Элементы.ЗапрашиватьКоличество.Пометка = ЗапрашиватьКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПоставщику(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеКонтрагента = ТекущиеДанные.НаименованиеКонтрагента;
	ИдентификаторКонтрагента = ТекущиеДанные.ИдентификаторКонтрагента;
	
	НайтиТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборы(Команда)
	
	ОчиститьОтборИОбновитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПригласитьПоставщиков(Команда)
	
	// Приглашение поставщиков в сервис.
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимПриглашения", "Поставщики");
	ОчиститьСообщения();
	ОткрытьФорму("Обработка.БизнесСеть.Форма.ОтправкаПриглашенийКонтрагентам", ПараметрыОткрытия);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВводКоличестваЗавершение(Число, ДополнительныеПараметры) Экспорт
	
	Если Число = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Число <> 0 Тогда
		ДополнительныеПараметры.ПараметрыОповещения.Вставить("Количество", Число);
		Оповестить("ТорговыеПредложения_ИзменитьКоличествоВЗаказе", ДополнительныеПараметры.ПараметрыОповещения);
	Иначе
		ДополнительныеПараметры.ПараметрыОповещения.Вставить("ИдентификаторыПредложений", 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДополнительныеПараметры.ПараметрыОповещения.Идентификатор));
		Оповестить("ТорговыеПредложения_УдалитьИзЗаказа", ДополнительныеПараметры.ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТоварыПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОчиститьТовары();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПризнакУстановкиОтборов(СтрокаОтборов = "")
	
	Элементы.ПоказатьСкрытьОтборы.Заголовок = НСтр("ru = 'Отборы'") + ?(ОтборыУстановлены, " *", "");
	Элементы.ГруппаБыстрыхОтборов.Видимость = ОтборыУстановлены;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьИтогов()
	
	КоличествоТоваров     = Товары.Количество();
	ЭтотОбъект.СуммаВсего = Товары.Итог("Сумма");
	
	Если Товары.Количество() = 0 Тогда
		НадписьПодобраноТоваров = НСтр("ru = 'Отсутствуют товары для заказа'");
	ИначеЕсли Товары.Итог("Сумма") = 0 Тогда
		НадписьПодобраноТоваров = СтрШаблон(НСтр("ru = 'Товаров %1 поз., цены по запросу'"), КоличествоТоваров);
	Иначе
		НадписьПодобраноТоваров = НСтр("ru = 'Товаров %1 поз. на сумму %2 %3'");
		НадписьПодобраноТоваров = СтрШаблон(НадписьПодобраноТоваров, КоличествоТоваров, ЭтотОбъект.СуммаВсего, Валюта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЗаказыТоваровЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ОчиститьТовары();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьЗаполнениеНавигацииКатегорий()
	ОбработчикЗаполнитьНавигациюКатегорий();
КонецПроцедуры

&НаКлиенте
Процедура НайтиТорговыеПредложенияСтарт()
	
	Если ФоновоеЗаданиеПоиска <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ФоновоеЗаданиеПоиска.ИдентификаторЗадания);
		ФоновоеЗаданиеПоиска = Неопределено;
		ПодключитьОбработчикОжидания("НайтиТорговыеПредложенияСтарт", 0.1, Истина);
		Элементы.НайтиПредложения.Пометка = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.НайтиПредложения.Пометка = Ложь;
	НайтиТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиТорговыеПредложения(СледующаяСтраница = Ложь, ОбновитьРегионы = Ложь)
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СледующаяСтраница", СледующаяСтраница);
	ДополнительныеПараметры.Вставить("ОбновитьРегионы",   ОбновитьРегионы);
	
	ИнтернетПоддержкаПодключена = Ложь;
	ФоновоеЗаданиеПоиска = НайтиТорговыеПредложенияВФоне(ИнтернетПоддержкаПодключена, ДополнительныеПараметры);
	
	Если ИнтернетПоддержкаПодключена = Ложь Тогда
		
		// Загрузка с проверкой подключения интернет-поддержки.
		Оповещение = Новый ОписаниеОповещения("НайтиТорговыеПредложенияПродолжение", ЭтотОбъект);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
		Возврат;
		
	Иначе
		
		НайтиТорговыеПредложенияПродолжение(Истина, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиТорговыеПредложенияПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("Логин") Тогда
		// Повторный вызов метода после подключения к Интернет-поддержке.
		ИнтернетПоддержкаПодключена = Ложь;
		ФоновоеЗаданиеПоиска = НайтиТорговыеПредложенияВФоне(ИнтернетПоддержкаПодключена);
	КонецЕсли;
	
	Если ФоновоеЗаданиеПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Установка картинки длительной операции.
	Если ФоновоеЗаданиеПоиска.Статус = "Выполняется" Тогда
		
		// Инициализация обработчик ожидания завершения.
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Поиск торговых предложений.'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		ПараметрыОжидания.Вставить("ИдентификаторЗадания", ФоновоеЗаданиеПоиска.ИдентификаторЗадания);
		ОбработкаЗавершенияПоиска = Новый ОписаниеОповещения("НайтиТорговыеПредложенияЗавершение",
			ЭтотОбъект, ДополнительныеПараметры);
			
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗаданиеПоиска, ОбработкаЗавершенияПоиска,	ПараметрыОжидания);
		
	ИначеЕсли ФоновоеЗаданиеПоиска.Статус = "Выполнено" Тогда
		
		НайтиТорговыеПредложенияЗавершение(ФоновоеЗаданиеПоиска, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Поиск торговых предложений в фоновом задании.
//
// Параметры:
//  ИнтернетПоддержкаПодключена	 - Булево - признак подключения Интернет-поддержки.
//  ДополнительныеПараметры		 - Структура - состав:
//    * ОбновитьРегионы   - Булево - признак обновления региона отбора.
//    * СледующаяСтраница - Булево - признак загрузки следующей страницы.
// 
// Возвращаемое значение:
//  Структура - длительная операция, см. ДлительныеОперации.ВыполнитьВФоне.
//
&НаСервере
Функция НайтиТорговыеПредложенияВФоне(ИнтернетПоддержкаПодключена, ДополнительныеПараметры = Неопределено)
	
	// Проверка подключения Интернет-поддержки пользователей.
	ИнтернетПоддержкаПодключена = ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	Если Не ИнтернетПоддержкаПодключена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.ОбновитьРегионы Тогда
		Если ТребуетсяРегистрацияОрганизации И РегионПоиска.РежимОтбора = 1 Тогда
			РегионПоиска.РежимОтбора = 0;
		КонецЕсли;
		ТорговыеПредложения.ОбновитьСведенияРегионаПоиска(РегионПоиска, РегионЗаголовок, ИдентификаторыРегионов);
		ТорговыеПредложения.СохранитьНастройкиРегионаПоиска(РегионПоиска);
	КонецЕсли;
	
	ПараметрыЗапроса = ТорговыеПредложенияСлужебный.НовыеПараметрыПоискаТорговыхПредложенийСОтборами();
	
	Отказ = Ложь;
	СледующаяСтраница = ?(ДополнительныеПараметры = Неопределено, Ложь, ДополнительныеПараметры.СледующаяСтраница);
	ЗаполнитьПараметрыЗапроса(ПараметрыЗапроса, СледующаяСтраница, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОтборыУстановлены = (ПараметрыЗапроса.Свойство("Свойства") И ПараметрыЗапроса.Свойства.Количество())
		ИЛИ (РазрешитьИзменениеКонтрагента И (ЗначениеЗаполнено(Контрагент) ИЛИ ЗначениеЗаполнено(НаименованиеКонтрагента)))
		ИЛИ ЦенаОт <> 0 ИЛИ ЦенаДо <> 0
		ИЛИ ВозможенСамовывоз ИЛИ ВозможнаДоставка;
		
	ОбновитьПризнакУстановкиОтборов();
	
	Элементы.СписокНаименованиеКонтрагента.Видимость = Не ЗначениеЗаполнено(Контрагент)
		И Не ЗначениеЗаполнено(ИдентификаторКонтрагента);
		
	Если ФоновоеЗаданиеПоиска <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ФоновоеЗаданиеПоиска.ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	Задание.Наименование = НСтр("ru = '1С:Бизнес-сеть. Поиск торговых предложений по отборам.'");
	Задание.ИмяПроцедуры = "ТорговыеПредложенияСлужебный.ПоискТорговыхПредложенийПоОтборуВФоне";
	Задание.ПараметрыПроцедуры = ПараметрыЗапроса;
	
	ДозаполнитьПараметрыПроцедуры(Задание.ПараметрыПроцедуры);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры,
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура НайтиТорговыеПредложенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// Инициализация.
	Отказ = Ложь;
	
	// Вывод сообщений из фонового задания.
	ТорговыеПредложенияКлиент.ОбработатьОшибкиФоновогоЗадания(Результат, Отказ);
	Если Результат = Неопределено Или ФоновоеЗаданиеПоиска = Неопределено Тогда
		УстановитьКартинкуКомандыНайти(Ложь);
		Возврат;
	КонецЕсли;
	
	// Сохранение текущей строки для позиционирования после загрузки.
	ТекущиеДанныеСписка = Неопределено;
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.СледующаяСтраница Тогда
		ТекущиеДанныеСписка = Элементы.Список.ТекущиеДанные.ПолучитьИдентификатор() - 1;
	КонецЕсли;
	
	// Проверка результата поиска.
	Если Не Отказ И Результат.Статус = "Выполнено" Тогда
		Если ЗначениеЗаполнено(Результат.АдресРезультата)
			И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
				ЗагрузитьРезультатПоиска(Результат.АдресРезультата);
				ФоновоеЗаданиеПоиска = Неопределено;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		УстановитьКартинкуКомандыНайти(Ложь);
		Возврат;
	КонецЕсли;
	
	// Подготовка данных для элементов постраничной выдачи данных.
	КоличествоСтрок = Список.Количество();
	Если КоличествоСтрок = 0 Тогда
		СостояниеПоиска = НСтр("ru = 'Торговые предложения не найдены'");
	Иначе
		СостояниеПоиска = СтрШаблон(НСтр("ru = 'Отображается %1 торговых предложений'"), 
			Мин((Страницы.Страница + 1) * Страницы.РазмерСтраницы, Страницы.КоличествоСтрок));
	КонецЕсли;
	
	// Позиционирование на текущей строке списка.
	Если ТекущиеДанныеСписка <> Неопределено Тогда
		Элементы.Список.ТекущаяСтрока = ТекущиеДанныеСписка;
	КонецЕсли;
	
	ЭтотОбъект.ТекущийЭлемент = Элементы.Список;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНавигациюКатегорийИЗагрузитьТорговыеПредложения()
	
	ОбработчикЗаполнитьНавигациюКатегорийИЗагрузитьТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗаполнитьНавигациюКатегорий()
	
	ЗаполнитьНавигациюКатегорий(КатегорияПослеПоиска, СбросКатегорийПослеПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗаполнитьНавигациюКатегорийИЗагрузитьТорговыеПредложения()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	НайтиТорговыеПредложения();
	
	ЗаполнитьНавигациюКатегорий(КатегорияПослеПоиска, СбросКатегорийПослеПоиска);
	
	// Позиционирование на текущей строке.
	Если ТекущиеДанные <> Неопределено Тогда
		СтрокиПоиска = Список.НайтиСтроки(Новый Структура("Идентификатор", ТекущиеДанные.Идентификатор));
		Если СтрокиПоиска.Количество() Тогда
			Элементы.Список.ТекущаяСтрока = СтрокиПоиска[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНавигациюКатегорий(Идентификатор, ОчиститьСтруктуру = Ложь, Отказ = Ложь)
	
	// Заполнение структуры категорий.
	СтруктураКатегорийДанные = РеквизитФормыВЗначение("СтруктураКатегорий");
	
	Если ОчиститьСтруктуру Тогда
		СтруктураКатегорийДанные.Строки.Очистить();
	КонецЕсли;
	
	Если ПустаяСтрока(Идентификатор) Тогда
		СтрокаДобавления = СтруктураКатегорийДанные;
	Иначе
		НайденныеСтроки = СтруктураКатегорийДанные.Строки.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор), Истина);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = СтруктураКатегорийДанные;
			СтрокаДобавления = НоваяСтрока;
		Иначе
			СтрокаДобавления = НайденныеСтроки[0];
		КонецЕсли;
	КонецЕсли;
	
	ЭтоКорневаяКатегория = ТипЗнч(СтрокаДобавления) = Тип("ДеревоЗначений") И Не ЗначениеЗаполнено(Идентификатор);
	КореньСОднойГруппой = СтрокаДобавления.Строки.Количество() = 1 И ЭтоКорневаяКатегория;
	ОтличиеПодчиненных = СтрокаДобавления.Строки.Количество() = 0
		ИЛИ Не ТипЗнч(СтрокаДобавления) = Тип("ДеревоЗначений") И СтрокаДобавления.Строки.Количество() <> СтрокаДобавления.КоличествоПодчиненных;
	
	Если КореньСОднойГруппой ИЛИ ОтличиеПодчиненных Тогда
		
		ПараметрыМетода = Новый Структура;
		Если Идентификатор = "" ИЛИ Идентификатор = Неопределено Тогда
			
			// Инициализация первого уровня.
			ПараметрыКоманды = ТорговыеПредложения.ПараметрыКомандыПолучитьСписокКатегорийПервогоУровня();
			Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
			
			Элементы.ГруппаДекорацийПодкатегорий.Видимость = Истина;
			
			Если Отказ ИЛИ Не ЗначениеЗаполнено(Результат) ИЛИ Результат.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			СтрокаДобавления.Строки.Очистить();
			
			Для каждого Категория Из Результат Цикл
				НоваяСтрока = СтрокаДобавления.Строки.Добавить();
				НоваяСтрока.Идентификатор = Формат(Категория.id, "ЧГ=");
				НоваяСтрока.Представление = Категория.title;
				НоваяСтрока.КоличествоПодчиненных = Категория.childrenCount;
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(Идентификатор)
			И (СтруктураКатегорийДанные.Строки.Количество() = 0 ИЛИ ЭтоКорневаяКатегория) Тогда
			
			// Открытие из другой формы с передачей идентификатора.
			ПараметрыМетода.Вставить("ИдентификаторыКатегории", "[" + Идентификатор  +"]");
			ПараметрыКоманды = ТорговыеПредложения.ПараметрыКомандыПолучитьЦепочкуКатегорийДоКорневой(ПараметрыМетода, Отказ);
			Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
			
			Если Отказ ИЛИ Результат.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			МассивКатегорий = Результат[0];
			Для Индекс = 0 По МассивКатегорий.Количество() - 1 Цикл
				СтрокаДобавления = СтрокаДобавления.Строки.Добавить();
				Категория = МассивКатегорий[МассивКатегорий.Количество() - 1 - Индекс];
				СтрокаДобавления.Идентификатор = Формат(Категория.id, "ЧГ=");
				СтрокаДобавления.Представление = Категория.title;
				СтрокаДобавления.КоличествоПодчиненных = Категория.childrenCount;
			КонецЦикла;
			
		Иначе
			
			// Переход к нижестоящей группе товаров и получение подчиненных групп.
			ПараметрыМетода.Вставить("ИдентификаторКатегории", Идентификатор);
			ПараметрыКоманды = ТорговыеПредложения.ПараметрыКомандыПолучитьСписокДочернихКатегорий(ПараметрыМетода, Отказ);
			Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
			
			Если Не Отказ И Результат.Количество() Тогда
				СтрокаДобавления.Строки.Очистить();
				Для каждого Категория Из Результат Цикл
					НоваяСтрока = СтрокаДобавления.Строки.Добавить();
					НоваяСтрока.Идентификатор = Формат(Категория.id, "ЧГ=");
					НоваяСтрока.Представление = Категория.title;
					НоваяСтрока.КоличествоПодчиненных = Категория.childrenCount;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(СтруктураКатегорийДанные, "СтруктураКатегорий");
	
	// Формирование навигации категорий.
	Если ЭтоКорневаяКатегория Тогда
		Элементы.СтруктураКатегорий.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Все товары'"),,,, "id");
		Заголовок = НСтр("ru = 'Торговые предложения 1С:Бизнес-сеть'");
		СформироватьОтборыПоКатегории(Неопределено);
		
	ИначеЕсли ТипЗнч(СтрокаДобавления) <> Тип("СтрокаДереваЗначений") Тогда
		
		Заголовок = СтрШаблон(НСтр("ru = 'Торговые предложения'"));
		Элементы.СтруктураКатегорий.Заголовок = "";
		
	Иначе
		
		РодительСтроки = СтрокаДобавления;
		МассивСтроки = Новый Массив;
		
		Пока РодительСтроки <> Неопределено Цикл
			Если МассивСтроки.Количество() Тогда
				МассивСтроки.Вставить(0, " • ");
			КонецЕсли;
			МассивСтроки.Вставить(0, Новый ФорматированнаяСтрока(РодительСтроки.Представление,,,, "id"
				+ Формат(РодительСтроки.Идентификатор, "ЧГ=")
				+ ":" + РодительСтроки.Представление));
			РодительСтроки = РодительСтроки.Родитель;
		КонецЦикла;
		
		// Заголовок формы.
		Заголовок = СтрШаблон(НСтр("ru = 'Торговые предложения - %1'"), СтрокаДобавления.Представление);
		
		// Ссылки навигационной панели.
		Элементы.СтруктураКатегорий.Заголовок = Новый ФорматированнаяСтрока(МассивСтроки);
		
	КонецЕсли;
	
	// Формирование навигации подкатегорий.
	МассивСтроки = Новый Массив;
	Для каждого Категория Из СтрокаДобавления.Строки Цикл
		Если МассивСтроки.Количество() Тогда
			МассивСтроки.Добавить("     ");
		КонецЕсли;
		МассивСтроки.Добавить(Новый ФорматированнаяСтрока(Категория.Представление,,,,
			"id" + Формат(Категория.Идентификатор, "ЧГ=") + ":" + Категория.Представление));
	КонецЦикла;
	
	Элементы.ДекорацияПодкатегорий.Видимость = МассивСтроки.Количество();
	Элементы.ДекорацияПодкатегорий.Заголовок = Новый ФорматированнаяСтрока(МассивСтроки);
	
	Если Элементы.ПоказатьСкрытьОтборы.Пометка И Не ОтборыПоКатегорииАктуальны Тогда
		СформироватьОтборыПоКатегории(ТекущаяКатегория);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыЗапроса(ПараметрыЗапроса, СледующаяСтраница, Отказ)
	
	// Постраничный вывод.
	Если СледующаяСтраница Тогда
		Если Страницы.Страница < Страницы.КоличествоСтраниц - 1 Тогда
			Страницы.Страница = Страницы.Страница + 1;
		Иначе
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	Иначе
		Страницы.Страница = 0;
	КонецЕсли;
	
	ПараметрыЗапроса.Страница = Страницы.Страница;
	ПараметрыЗапроса.РазмерСтраницы = Страницы.РазмерСтраницы;
	
	ПараметрыЗапроса.Валюта = Валюта;
	
	Если ЗначениеЗаполнено(ТекущаяКатегория) Тогда
		ПараметрыЗапроса.ИдентификаторКатегории = ТекущаяКатегория;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборНаименование) Тогда
		ПараметрыЗапроса.Наименование = ОтборНаименование;
	ИначеЕсли ЗначениеЗаполнено(СтрокаПоиска) Тогда
		ПараметрыЗапроса.Наименование = СтрокаПоиска;
	КонецЕсли;
	
	// Сброс наименования если размер строки менее минимального значения.
	Если СтрДлина(ПараметрыЗапроса.Наименование) < 3 Тогда
		ПараметрыЗапроса.Наименование = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборАртикул) Тогда
		ПараметрыЗапроса.Артикулы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОтборАртикул);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборШтрихкоды) Тогда
		ПараметрыЗапроса.Штрихкоды = ОтборШтрихкоды.ВыгрузитьЗначения();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборНоменклатураСервиса) Тогда
		НовыйОтбор = ПараметрыЗапроса.НоменклатураСервиса.Добавить();
		НовыйОтбор.ИдентификаторНоменклатуры = ОтборНоменклатураСервиса;
		НовыйОтбор.ИдентификаторХарактеристики = ОтборХарактеристикаСервиса;
	КонецЕсли;
	
	ПараметрыЗапроса.Сортировка = РежимСортировки;
	
	// Отборы.
	Если ЗначениеЗаполнено(Контрагент) Тогда
		СтрокаПараметрыКонтрагента = ПараметрыЗапроса.Контрагенты.Добавить();
		СтрокаПараметрыКонтрагента.Ссылка = Контрагент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИННКонтрагента) ИЛИ ЗначениеЗаполнено(КППКонтрагента) ИЛИ ЗначениеЗаполнено(НаименованиеКонтрагента) Тогда
		СтрокаПараметрыКонтрагента = ПараметрыЗапроса.Контрагенты.Добавить();
		Если ЗначениеЗаполнено(ИННКонтрагента) Тогда
			СтрокаПараметрыКонтрагента.ИНН = ИННКонтрагента;
		КонецЕсли;
		Если ЗначениеЗаполнено(ИННКонтрагента) Тогда
			СтрокаПараметрыКонтрагента.КПП = КППКонтрагента;
		КонецЕсли;
		ТипЧисло = Новый ОписаниеТипов("Число");
		Если ПустаяСтрока(ИННКонтрагента) И ТипЧисло.ПривестиЗначение(НаименованиеКонтрагента) <> 0 Тогда
			СтрокаПараметрыКонтрагента.ИНН = НаименованиеКонтрагента;
		Иначе
			СтрокаПараметрыКонтрагента.Наименование = НаименованиеКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗапроса.ЦенаОт = ЦенаОт;
	ПараметрыЗапроса.ЦенаДо = ЦенаДо;
	
	// Регионы поиска.
	Если (ЗначениеЗаполнено(РегионПоиска) И РегионПоиска.РежимОтбора <> 0)
		И ИдентификаторыРегионов.Количество() Тогда
		
		ЗначениеИдентификаторыРегионов =РеквизитФормыВЗначение("ИдентификаторыРегионов", Тип("ТаблицаЗначений"));
		Для каждого ЭлементКоллекции Из ЗначениеИдентификаторыРегионов Цикл
			НастройкиРегионов = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ЭлементКоллекции);
			Если ВозможенСамовывоз = ВозможнаДоставка Тогда 
				// Если выбраны обе опции или не выбрана ни одна - это одно и тоже, надо установить отбор по всем способам доставки
				ПараметрыЗапроса.РегионыПоиска.Добавить(НастройкиРегионов);
			ИначеЕсли (ВозможенСамовывоз И ЭлементКоллекции.ДляСамовывоза)
				ИЛИ (ВозможнаДоставка И ЭлементКоллекции.ДляДоставки) Тогда
				// Если выбрана одна из опций - это осознанное решение и отбор делается по одному способу доставки
				ПараметрыЗапроса.РегионыПоиска.Добавить(НастройкиРегионов);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьЭлементыОтборовФормы(ПараметрыЗапроса);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыОтборовФормы(ПараметрыЗапроса)
	
	// Быстрые отборы на форме.
	БыстрыеОтборы.Очистить();
	
	Если Не ПустаяСтрока(НаименованиеКонтрагента) И РазрешитьИзменениеКонтрагента Тогда
		БыстрыеОтборы.Добавить("НаименованиеКонтрагента", СтрШаблон(НСтр("ru = 'Поставщик: %1'"), НаименованиеКонтрагента));
	КонецЕсли;
	Если ЦенаОт <> 0 ИЛИ ЦенаДо <> 0 Тогда
		БыстрыеОтборы.Добавить("Цена", СтрШаблон(НСтр("ru = 'Цена, %1: %2'"), Валюта,
			?(ЦенаОт = 0, "", СтрШаблон(НСтр("ru = 'от %1'"), ЦенаОт))
			+ ?(ЦенаОт <> 0 И ЦенаДо <> 0, " ", "")
			+ ?(ЦенаДо = 0, "", СтрШаблон(НСтр("ru = 'до %1'"), ЦенаДо))));
	КонецЕсли;
	
	Если ВозможнаДоставка Тогда
		ПараметрыЗапроса.Вставить("ВозможнаДоставка", Истина);
		БыстрыеОтборы.Добавить("ВозможнаДоставка", СтрШаблон(НСтр("ru = 'Возможна доставка'")));
	КонецЕсли;
	
	Если ВозможенСамовывоз Тогда
		ПараметрыЗапроса.Вставить("ВозможенСамовывоз", Истина);
		БыстрыеОтборы.Добавить("ВозможенСамовывоз", СтрШаблон(НСтр("ru = 'Возможен самовывоз'")));
	КонецЕсли;
	
	Если ОтборыПоКатегорииАктуальны Тогда
		
		Для каждого ИмяРеквизита Из СписокДобавленныхРеквизитов Цикл
			
			ЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита.Значение];
			ИдентификаторРеквизита = СтрРазделить(ИмяРеквизита.Значение, "_")[1];
			Если ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
				Если ЗначениеРеквизита <> Ложь Тогда
					БыстрыеОтборы.Добавить(ИмяРеквизита.Значение, ИмяРеквизита.Представление + ": " + ЗначениеРеквизита);
					СтрокаСвойств = ПараметрыЗапроса.Свойства.Добавить();
					СтрокаСвойств.Идентификатор = ИдентификаторРеквизита;
					СтрокаСвойств.Значение = ЗначениеРеквизита;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("СписокЗначений") Тогда 
				СтрокаЗначенийОтборов = "";
				Для каждого ЭлементСписка Из ЗначениеРеквизита Цикл
					Если ЭлементСписка.Пометка Тогда
						СтрокаСвойств = ПараметрыЗапроса.Свойства.Добавить();
						СтрокаСвойств.Идентификатор = ИдентификаторРеквизита;
						СтрокаСвойств.Значение = ЭлементСписка.Значение;
						
						СтрокаЗначенийОтборов = СтрокаЗначенийОтборов + ?(ПустаяСтрока(СтрокаЗначенийОтборов), "", ", ")
							+ ЭлементСписка.Представление;
					КонецЕсли;
				КонецЦикла;
				Если Не ПустаяСтрока(СтрокаЗначенийОтборов) Тогда
					БыстрыеОтборы.Добавить(ИмяРеквизита.Значение, ИмяРеквизита.Представление + ": " + СтрокаЗначенийОтборов);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				БыстрыеОтборы.Добавить(ИмяРеквизита.Значение, ИмяРеквизита.Представление + ": " + ЗначениеРеквизита);
				СтрокаСвойств = ПараметрыЗапроса.Свойства.Добавить();
				СтрокаСвойств.Идентификатор = ИдентификаторРеквизита;
				СтрокаСвойств.Значение = ЗначениеРеквизита;
			КонецЕсли;
			
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Удаление старых элементов быстрых отборов.
	МассивЭлементовУдаления = Новый Массив;
	КоличествоЭлементов = Элементы.ГруппаБыстрыхОтборов.ПодчиненныеЭлементы.Количество();
	Для ОбратныйИндекс = 1 По КоличествоЭлементов Цикл
		ЭлементОтбора = Элементы.ГруппаБыстрыхОтборов.ПодчиненныеЭлементы[КоличествоЭлементов - ОбратныйИндекс];
		Если ЭлементОтбора.Видимость Тогда
			Элементы.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	// Создание новых элементов быстрых отборов.
	Для каждого ЭлементОтбора Из БыстрыеОтборы Цикл
		
		// Добавление пустой группы.
		НоваяГруппа = Элементы.Добавить("ГруппаБыстрогоОтбора_" + ЭлементОтбора.Значение, Тип("ГруппаФормы"), Элементы.ГруппаБыстрыхОтборов);
		НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
		НоваяГруппа.ОтображатьЗаголовок = Ложь;
		НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		НоваяГруппа.Видимость = Истина;
		НоваяГруппа.ОтображатьОтступСлева = Ложь;
		НоваяГруппа.ЦветФона = WebЦвета.СветлоЖелтый;
		НоваяГруппа.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
		
		НовыйЭлемент = Элементы.Добавить("ЗаголовокОтбора_" + ЭлементОтбора.Значение, Тип("ДекорацияФормы"), НоваяГруппа);
		
		// Разбитие на форматированную строку.
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(Лев(ЭлементОтбора.Представление, СтрНайти(ЭлементОтбора.Представление, ":")));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			Сред(ЭлементОтбора.Представление, СтрНайти(ЭлементОтбора.Представление, ":")+1),, ЦветаСтиля.ЦветТекстаФормы));
		НовыйЭлемент.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		
		НовыйЭлемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		НовыйЭлемент.Гиперссылка = Истина;
		НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_Нажатие");
		
		НовыйЭлемент = Элементы.Добавить("ОчиститьОтбор_" + ЭлементОтбора.Значение, Тип("ДекорацияФормы"), НоваяГруппа);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Картинка;
		НовыйЭлемент.Картинка = БиблиотекаКартинок.Очистить;
		НовыйЭлемент.Гиперссылка = Истина;
		НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_Нажатие");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДозаполнитьПараметрыПроцедуры(ПараметрыПоиска)
	
	ПараметрыПоиска.Вставить("КодВалюты", ТорговыеПредложенияПовтИсп.КодВалюты(ПараметрыПоиска.Валюта));
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПоиска(АдресРезультата)
	
	УстановитьКартинкуКомандыНайти(Ложь);
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") 
			И Результат.Свойство("Список") Тогда
			
			// Если страница не равна 0 значит запрашивается следующая страница.
			Если Результат.Страницы.Страница = 0 Тогда
				Список.Очистить();
			Иначе
				// Удаление последней строки.
				Список.Удалить(Список.Количество() - 1);
			КонецЕсли;
			
			Если Результат.Список <> Неопределено Тогда
				
				// Дополнительная обработка результата.
				Для каждого ЭлементКоллекции Из Результат.Список Цикл
					
					// Проверка единицы измерения если есть упаковка.
					Если ЗначениеЗаполнено(ЭлементКоллекции.НаименованиеУпаковки)
						И ЭлементКоллекции.НаименованиеУпаковки <> ЭлементКоллекции.ЕдиницаИзмерения Тогда
						ЭлементКоллекции.ЕдиницаИзмерения = ЭлементКоллекции.НаименованиеУпаковки;
					КонецЕсли;
					
					// Проверка возврата описания.
					Если ЗначениеЗаполнено(ЭлементКоллекции.Заголовок) Тогда
						ЭлементКоллекции.НаименованиеНоменклатуры = ЭлементКоллекции.Заголовок;
					КонецЕсли;
					
				КонецЦикла;
				
				Если Список.Количество() = 0 Тогда
					// Загрузка строк в таблицу.
					Список.Загрузить(Результат.Список);
				Иначе
					// Добавление строк в таблицу.
					Для каждого ЭлементКоллекции Из Результат.Список Цикл
						ЗаполнитьЗначенияСвойств(Список.Добавить(), ЭлементКоллекции);
					КонецЦикла;
				КонецЕсли;
				
				Если Результат.Список.Количество() = Страницы.РазмерСтраницы Тогда
					НоваяСтрока = Список.Добавить();
					НоваяСтрока.ГиперссылкаПоказатьЕще = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Страницы, Результат.Страницы);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Поиск товаров для заказа.
	Для каждого СтрокаТовары Из Товары Цикл
		СтрокиСписка = Список.НайтиСтроки(Новый Структура("Идентификатор", СтрокаТовары.Идентификатор));
		Если СтрокиСписка.Количество() Тогда
			СтрокиСписка[0].ГиперссылкаДобавить = ?(СтрокаТовары.Количество = 0,
				НСтр("ru = 'Добавить'"), СтрокаТовары.Количество);
		КонецЕсли;
	КонецЦикла;
	
	Если Элементы.ПоказатьСкрытьОтборы.Пометка И Не ОтборыПоКатегорииАктуальны Тогда
		СформироватьОтборыПоКатегории(ТекущаяКатегория);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресХранилищаТоваров()
	
	ТоварыОбъект = РеквизитФормыВЗначение("Товары");
	АдресТоваровВХранилище = ПоместитьВоВременноеХранилище(ТоварыОбъект, УникальныйИдентификатор);
	
	Возврат АдресТоваровВХранилище;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьТовары()
	
	Для каждого ПозицияТовары Из Товары Цикл
		СтрокаСписка = Список.НайтиСтроки(Новый Структура("Идентификатор", ПозицияТовары.Идентификатор));
		Если СтрокаСписка.Количество() Тогда
			СтрокаСписка[0].ГиперссылкаДобавить = "";
		КонецЕсли;
	КонецЦикла;
	Товары.Очистить();
	ОбновитьНадписьИтогов();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтборыПоКатегории(ИдентификаторКатегории)
	
	// Удаление данных.
	МассивУдаления = Новый Массив;
	Для каждого ПодчиненныйЭлемент Из Элементы.ГруппаОтборов0.ПодчиненныеЭлементы Цикл
		МассивУдаления.Добавить(ПодчиненныйЭлемент);
	КонецЦикла;
	Для каждого ПодчиненныйЭлемент Из Элементы.ГруппаОтборов1.ПодчиненныеЭлементы Цикл
		МассивУдаления.Добавить(ПодчиненныйЭлемент);
	КонецЦикла;
	Для каждого ЭлементУдаления Из МассивУдаления Цикл
		Элементы.Удалить(ЭлементУдаления);
	КонецЦикла;
	ИзменитьРеквизиты(, СписокДобавленныхРеквизитов.ВыгрузитьЗначения());
	СписокДобавленныхРеквизитов.Очистить();
	
	Если Не ЗначениеЗаполнено(ИдентификаторКатегории) Тогда
		Возврат;
	КонецЕсли;
	
	// Чтение характеристик в сервисе.
	Отказ = Ложь;
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ИдентификаторКатегории", ИдентификаторКатегории);
	ПараметрыКоманды = ТорговыеПредложения.ПараметрыКомандыПолучитьСписокХарактеристикКатегории(ПараметрыМетода, Отказ);
	Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	Если Отказ ИЛИ Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоВКолонке = Результат.Количество();
	Если КоличествоВКолонке > 20 Тогда
		КоличествоВКолонке = Окр(Результат.Количество() / 2, 0, РежимОкругления.Окр15как10) + 1;
	КонецЕсли;
	
	// Формирование элементов формы.
	СчетчикХарактеристики = 0;
	Для каждого Характеристика Из Результат Цикл
		
		Представление = Характеристика.title + ?(ПустаяСтрока(Характеристика.unitCode),"", ", " + Характеристика.unitCode);
		
		// Проверка на служебные характеристики.
		Если СтрНайти(Характеристика.sourceId, "-") ИЛИ СтрНайти(Характеристика.sourceId, "shipping")
			ИЛИ Характеристика.title = "Минимальная цена" ИЛИ Характеристика.title = "Максимальная цена" Тогда
			Продолжить;
		КонецЕсли;
		
		НомерГруппы = Цел(СчетчикХарактеристики / КоличествоВКолонке);
		ГруппаОтборов = Элементы["ГруппаОтборов" + НомерГруппы];
		СчетчикХарактеристики = СчетчикХарактеристики + 1;
		
		ИдентификаторХарактеристики = Формат(Характеристика.id,"ЧРГ=; ЧГ=");
		
		Если ВРег(Характеристика.type) = "ENUMERATION" Тогда
			
			СтрелкаВниз = "↓";
			
			НовыйЭлемент = Элементы.Добавить("ЗаголовокОтбора_" + ИдентификаторХарактеристики, Тип("ДекорацияФормы"), ГруппаОтборов);
			НовыйЭлемент.Заголовок = Представление + " " + СтрелкаВниз;
			НовыйЭлемент.Гиперссылка = Истина;
			НовыйЭлемент.Подсказка = Представление;
			НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_НажатиеГиперссылки");
			
			// Добавление пустой группы.
			НоваяГруппа = Элементы.Добавить("ГруппаОтбора_" + ИдентификаторХарактеристики, Тип("ГруппаФормы"), ГруппаОтборов);
			НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
			НоваяГруппа.ОтображатьЗаголовок = Ложь;
			НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			НоваяГруппа.Видимость = Ложь;
			НоваяГруппа.ОтображатьОтступСлева = Ложь;
			
		ИначеЕсли ВРег(Характеристика.type) = "BOOLEAN" Тогда
			
			МассивРеквизитов = Новый Массив;
			Реквизит = Новый РеквизитФормы("Отбор_" + ИдентификаторХарактеристики, Новый ОписаниеТипов("Булево"));
			МассивРеквизитов.Добавить(Реквизит);
			ИзменитьРеквизиты(МассивРеквизитов);
			СписокДобавленныхРеквизитов.Добавить(Реквизит.Имя, Представление);
			
			НовыйЭлемент = Элементы.Добавить("Отбор_" + ИдентификаторХарактеристики, Тип("ПолеФормы"), ГруппаОтборов);
			НовыйЭлемент.Заголовок = Представление;
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
			НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			НовыйЭлемент.ПутьКДанным = Реквизит.Имя;
			НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ИзменениеОтбора");
			
		ИначеЕсли ВРег(Характеристика.type) = "NUMBER" Тогда 
			
			МассивРеквизитов = Новый Массив;
			Реквизит = Новый РеквизитФормы("Отбор_" + ИдентификаторХарактеристики, Новый ОписаниеТипов("Число"));
			МассивРеквизитов.Добавить(Реквизит);
			ИзменитьРеквизиты(МассивРеквизитов);
			СписокДобавленныхРеквизитов.Добавить(Реквизит.Имя, Представление);
			
			НовыйЭлемент = Элементы.Добавить("Отбор_" + ИдентификаторХарактеристики, Тип("ПолеФормы"), ГруппаОтборов);
			НовыйЭлемент.Заголовок = Представление;
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.Ширина = 0;
			НовыйЭлемент.ПутьКДанным = Реквизит.Имя;
			НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ИзменениеОтбора");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОтборыПоКатегорииАктуальны = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРежимСортировки(Элементы, НовыйРежим, Валюта)

	// Установка пометки.
	Для каждого Элемент Из Элементы.ПодменюСортировка.ПодчиненныеЭлементы Цикл
		Элемент.Пометка = (Элемент.Имя = НовыйРежим);
	КонецЦикла;
	
	Стрелка = ?(СтрНайти(НовыйРежим, "Возрастание"), "↑", "↓");
	Элементы.СписокЦена.Заголовок = СтрШаблон(НСтр("ru = 'Цена, %1'"), Валюта);
	
	Если СтрНайти(НовыйРежим, "Цена") Тогда
		Элементы.СписокЦена.Заголовок = Элементы.СписокЦена.Заголовок + " " + Стрелка;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьЭлементыХарактеристики(Идентификатор, Представление)
	
	Отказ = Ложь;
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ИдентификаторКатегории", ТекущаяКатегория);
	ПараметрыМетода.Вставить("ИдентификаторХарактеристики", Идентификатор);
	ПараметрыКоманды = ТорговыеПредложения.ПараметрыКомандыПолучитьЗначенияХарактеристики(ПараметрыМетода, Отказ);
	Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	МассивРеквизитов = Новый Массив;
	Реквизит = Новый РеквизитФормы("Отбор_" + Идентификатор, Новый ОписаниеТипов("СписокЗначений"));
	МассивРеквизитов.Добавить(Реквизит);
	ИзменитьРеквизиты(МассивРеквизитов);
	СписокДобавленныхРеквизитов.Добавить(Реквизит.Имя, Представление);
	СписокДобавленныхРеквизитов.СортироватьПоЗначению();
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Если Результат.Количество() > 1 Тогда
			Для каждого ЗначениеМассива Из Результат Цикл
				ЭтотОбъект[Реквизит.Имя].Добавить(ЗначениеМассива.Идентификатор, ЗначениеМассива.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Сортировка элементов.
	ЭтотОбъект[Реквизит.Имя].СортироватьПоПредставлению();
	
	ГруппаОтборов = Элементы["ГруппаОтбора_" + Идентификатор];
	
	НовыйЭлемент = Элементы.Добавить("Отбор_" + Идентификатор, Тип("ТаблицаФормы"), ГруппаОтборов);
	НовыйЭлемент.Отображение = ОтображениеТаблицы.Список;
	НовыйЭлемент.АвтоМаксимальнаяВысота = Истина;
	Если Результат.Количество() <= 5 Тогда
		НовыйЭлемент.Высота = Результат.Количество() + 1;
	Иначе
		НовыйЭлемент.Высота = 6;
		НовыйЭлемент.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.ИспользоватьВсегда;
	КонецЕсли;
	НовыйЭлемент.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	НовыйЭлемент.РастягиватьПоВертикали = Ложь;
	НовыйЭлемент.ПутьКДанным = Реквизит.Имя;
	НовыйЭлемент.КоманднаяПанель.Видимость = Ложь;
	НовыйЭлемент.ЧередованиеЦветовСтрок = Истина;
	НовыйЭлемент.ЦветРамки = ЦветаСтиля.ЦветФонаФормы;
	НовыйЭлемент.Шрифт = Новый Шрифт(, 8);
	НовыйЭлемент.ИзменятьПорядокСтрок = Ложь;
	НовыйЭлемент.ИзменятьСоставСтрок = Ложь;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ИзменениеОтбора");
	
	ЭлементКолонки = Элементы.Добавить(НовыйЭлемент.Имя + "_Пометка", Тип("ПолеФормы"), НовыйЭлемент);
	ЭлементКолонки.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементКолонки.ШиринаЭлемента = 1;
	ЭлементКолонки.ПутьКДанным = Реквизит.Имя + ".Пометка";
	ЭлементКолонки = Элементы.Добавить(НовыйЭлемент.Имя + "_Значение", Тип("ПолеФормы"), НовыйЭлемент);
	ЭлементКолонки.АвтоМаксимальнаяВысота = Истина;
	ЭлементКолонки.АвтоВысотаЯчейки = Истина;
	ЭлементКолонки.ТолькоПросмотр = Истина;
	ЭлементКолонки.ПутьКДанным = Реквизит.Имя + ".Значение";
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КатегорииПоНаименованию(Текст)
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("СтрокаПоиска", Текст);
	ПараметрыМетода.Вставить("ТолькоЭлементы", Истина);
	
	Отказ = Ложь;
	ПараметрыКоманды = ТорговыеПредложения.ПараметрыКомандыПоискКатегорий(ПараметрыМетода, Отказ);
	Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ ИЛИ Результат = Неопределено
		ИЛИ ТипЗнч(Результат) <> Тип("Массив")
		ИЛИ Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый СписокЗначений;
	СписокКатегорий = "";
	Для каждого ЗначениеМассива Из Результат Цикл
		СписокКатегорий = СписокКатегорий + ?(ПустаяСтрока(СписокКатегорий),"", ", ") + Формат(ЗначениеМассива.id, "ЧГ=");
	КонецЦикла;
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ИдентификаторыКатегории", "[" + СписокКатегорий + "]");
	ПараметрыКоманды = ТорговыеПредложения.ПараметрыКомандыПолучитьЦепочкуКатегорийДоКорневой(ПараметрыМетода, Отказ);
	РезультатЦепочкиКатегорий = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ ИЛИ РезультатЦепочкиКатегорий = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Индекс = 0;
	Для каждого ЗначениеМассива Из Результат Цикл
		
		Идентификатор = Формат(ЗначениеМассива.id, "ЧГ=");
		Наименование = ЗначениеМассива.title;
		
		Длина = СтрДлина(Текст);
		Позиция = СтрНайти(НРег(Наименование), НРег(Текст));
		ЛеваяЧасть = Лев(Наименование, Позиция-1);
		СредняяЧасть = Сред(Наименование, Позиция, Длина);
		ПраваяЧасть = Сред(Наименование, Позиция + Длина);
		
		ПредставлениеЭлемента = Новый Массив;
		ПредставлениеЭлемента.Добавить(ЛеваяЧасть);
		ПредставлениеЭлемента.Добавить(Новый ФорматированнаяСтрока(СредняяЧасть, Новый Шрифт(,, Истина), WebЦвета.Зеленый));
		ПредставлениеЭлемента.Добавить(ПраваяЧасть);
		
		ТекстРодитель = "";
		МассивРодителей = РезультатЦепочкиКатегорий[Индекс];
		Для каждого Родитель Из МассивРодителей Цикл
			Если ЗначениеМассива.id = Родитель.id Тогда
				Продолжить;
			КонецЕсли;
			ТекстРодитель = ТекстРодитель + " - " + Родитель.title;
		КонецЦикла;
		
		ПредставлениеРодителя = Новый Массив;
		Если ПустаяСтрока(ТекстРодитель) Тогда
			ПредставлениеРодителя.Добавить("");
		Иначе
			ПредставлениеРодителя.Добавить(" ");
			ПредставлениеРодителя.Добавить(ТекстРодитель);
		КонецЕсли;
		ПредставлениеРодителя = Новый ФорматированнаяСтрока(ПредставлениеРодителя,, ЦветаСтиля.ПоясняющийТекст);
		
		Представление = Новый ФорматированнаяСтрока(ПредставлениеЭлемента, ПредставлениеРодителя);
		
		ВозвращаемоеЗначение.Добавить(Идентификатор, Представление,, БиблиотекаКартинок.БизнесСеть);
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Процедура ДобавитьТоварыДляЗаказа(ПараметрыТовара, Количество)
	
	РежимДобавления = Ложь;
	Если Количество = Неопределено Тогда
		РежимДобавления = Истина;
		Количество = 1;
	КонецЕсли;
	
	СтрокиТоваров = Товары.НайтиСтроки(Новый Структура("Идентификатор", ПараметрыТовара.Идентификатор));
	Если СтрокиТоваров.Количество() Тогда
		
		СтрокаТоваров = СтрокиТоваров[0];
		СтрокаТоваров.Количество = ?(РежимДобавления, СтрокаТоваров.Количество + Количество, Количество);
		
		Если СтрокаТоваров.Количество <= 0 Тогда
			Товары.Удалить(Товары.Индекс(СтрокаТоваров));
			Возврат;
		КонецЕсли;
		
	Иначе
		
		СтрокиСписка = Список.НайтиСтроки(Новый Структура("Идентификатор", ПараметрыТовара.Идентификатор));
		СтрокаТоваров = Товары.Добавить();
		Если СтрокиСписка.Количество() Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТоваров, СтрокиСписка[0]);
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаТоваров, ПараметрыТовара);
		КонецЕсли;
		СтрокаТоваров.Количество = Количество;
		
	КонецЕсли;
	
	СтрокаТоваров.Сумма = СтрокаТоваров.Цена * СтрокаТоваров.Количество;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Гиперссылка списка формы Добавить.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокГиперссылкаДобавить.Имя);
	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ГиперссылкаДобавить");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = 'Добавить'");
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ГиперссылкаДобавить");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Добавить'"));
	
	// Срок поставки "в наличии".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСрокПоставки.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.СписокСрокПоставки.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 1;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'в наличии'"));
	
	// Срок поставки "по запросу".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСрокПоставки.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.СписокСрокПоставки.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Неопределено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'по запросу'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", 
		ГоризонтальноеПоложение.Право);
	
	// Цена "по запросу".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЦена.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.СписокЦена.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'по запросу'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	
	// Наличие "по запросу".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокНаличиеТекстом.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.СписокНаличие.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'по запросу'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	
	// Наличие "мало",
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокНаличиеТекстом.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.СписокНаличие.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'мало'"));
	
	// Наличие "достаточно".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокНаличиеТекстом.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.СписокНаличие.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'достаточно'"));
	
	// Наличие "много".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокНаличиеТекстом.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.СписокНаличие.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 3;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'много'"));
	
	// Гиперссылка списка формы Очистить.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокГиперссылкаОчистить.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ГиперссылкаДобавить");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Х'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Элементы.ГруппаПанельОтборов.Видимость = Элементы.ПоказатьСкрытьОтборы.Пометка;
	Элементы.СоздатьОтправитьЗаказы.Доступность = БизнесСеть.ПравоВыполненияОбменаДокументами();
	Элементы.ЗапроситьЦены.Доступность = БизнесСеть.ПравоВыполненияОбменаДокументами();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРегистрациюОрганизаций()
	
	ОрганизацияЗарегистрирована = БизнесСеть.ОрганизацияЗарегистрирована();
	ТребуетсяРегистрацияОрганизации = Не ОрганизацияЗарегистрирована;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКонтрагентаПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеКонтрагента = Строка(Результат);
	Контрагент = Результат;
	НайтиТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросРегистрацииОрганизацииПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Оповещение = Новый ОписаниеОповещения("СписокВыборПродолжение", ЭтотОбъект);
		ОчиститьСообщения();
		ОткрытьФорму("Обработка.БизнесСеть.Форма.РегистрацияОрганизаций",, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ОбработатьВыборСписка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСписка()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Идентификатор",            ТекущиеДанные.Идентификатор);
	ПараметрыОткрытия.Вставить("ИдентификаторЗаказа",      ИдентификаторЗаказа);
	ПараметрыОткрытия.Вставить("ИдентификаторКонтрагента", ТекущиеДанные.ИдентификаторКонтрагента);
	ПараметрыОткрытия.Вставить("Валюта",                   Валюта);
	ПараметрыОткрытия.Вставить("Цена",                     ТекущиеДанные.Цена);
	ПараметрыОткрытия.Вставить("Наименование",             ТекущиеДанные.НаименованиеНоменклатуры);
	
	ИмяКолонки = Элементы.Список.ТекущийЭлемент.Имя;
	Если ИмяКолонки = Элементы.СписокГиперссылкаДобавить.Имя Тогда
		
		СтрокаЗаказа = Товары.НайтиСтроки(Новый Структура("Идентификатор", ТекущиеДанные.Идентификатор));
		Если СтрокаЗаказа.Количество() Тогда
			КоличествоВЗаказе = СтрокаЗаказа[0].Количество;
		Иначе
			КоличествоВЗаказе = 0;
		КонецЕсли;
			
		Если ЗапрашиватьКоличество Тогда
			ПараметрыОткрытия.Вставить("КоличествоВЗаказе", КоличествоВЗаказе);
			ВводКоличестваЗавершение = Новый ОписаниеОповещения("ВводКоличестваЗавершение",
				ЭтотОбъект,
				Новый Структура("ПараметрыОповещения", ПараметрыОткрытия));
			ПоказатьВводЧисла(ВводКоличестваЗавершение, КоличествоВЗаказе, НСтр("ru = 'Укажите количество'"), 15, 3);
		Иначе
			КоличествоВЗаказе = КоличествоВЗаказе + 1; // Добавление товара в заказ 1 шт.
			ПараметрыОткрытия.Вставить("Количество", КоличествоВЗаказе);
			Оповестить("ТорговыеПредложения_ИзменитьКоличествоВЗаказе", ПараметрыОткрытия);
		КонецЕсли;
		
	ИначеЕсли ИмяКолонки = Элементы.СписокГиперссылкаОчистить.Имя Тогда
		СтрокаЗаказа = Товары.НайтиСтроки(новый Структура("Идентификатор", ТекущиеДанные.Идентификатор));
		Если СтрокаЗаказа.Количество() Тогда
			КоличествоВЗаказе = 0;
			ПараметрыОткрытия.Вставить("Количество", КоличествоВЗаказе);
			Оповестить("ТорговыеПредложения_ИзменитьКоличествоВЗаказе", ПараметрыОткрытия);
		КонецЕсли;
	ИначеЕсли ИмяКолонки = Элементы.СписокГиперссылкаПоказатьЕще.Имя Тогда
		НайтиТорговыеПредложения(Истина);
	Иначе
		ТорговыеПредложенияКлиент.ОткрытьТорговоеПредложение(ПараметрыОткрытия, ЭтотОбъект, ТекущиеДанные.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборИОбновитьСписок()
	
	Если РазрешитьИзменениеКонтрагента Тогда
		Контрагент = Неопределено;
		НаименованиеКонтрагента = "";
		ИННКонтрагента = "";
		КППКонтрагента = "";
		ИдентификаторКонтрагента = "";
	КонецЕсли;
	
	ЦенаОт = 0;
	ЦенаДо = 0;
	ВозможнаДоставка = Ложь;
	ВозможенСамовывоз = Ложь;
	СтрокаПоиска = "";
	
	ОтборыПоКатегорииАктуальны = Ложь;
	НайтиТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборРегионаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("РегионРежимОтбора") Тогда
		Результат.Свойство("РегионРежимОтбора",   РегионПоиска.РежимОтбора);
		Результат.Свойство("РегионПредставление", РегионПоиска.Представление);
		Результат.Свойство("РегионЗначенияПолей", РегионПоиска.ЗначенияПолей);
	КонецЕсли;
	
	Если РегионПоиска.РежимОтбора = 0
		И ВозможенСамовывоз + ВозможнаДоставка > 0 Тогда
		ВозможенСамовывоз = Ложь;
		ВозможнаДоставка = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		НайтиТорговыеПредложения(Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВалютуПоискаПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Товары.Очистить();
		ОбновитьНадписьИтогов();
		ПоказатьВводЗначения(Новый ОписаниеОповещения("ИзменитьВалютуПоискаЗавершение", ЭтотОбъект), Валюта,
			НСтр("ru = 'Валюта поиска'"), Тип("СправочникСсылка.Валюты"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВалютуПоискаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Валюта = Результат;
		Элементы.ИзменитьВалютуПоиска.Заголовок = СтрШаблон(НСтр("ru = 'Валюта: %1'"), Валюта);
		УстановитьРежимСортировки(Элементы, РежимСортировки, Валюта);
		НайтиТорговыеПредложения();
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОтборПоКонтрагенту(ПараметрыКонтрагента, Форма)
	
	Форма.Контрагент = Неопределено;
	Форма.НаименованиеКонтрагента = "";
	Форма.ИдентификаторКонтрагента = "";
	Форма.ИННКонтрагента = "";
	Форма.КППКонтрагента = "";
	
	Если ТипЗнч(ПараметрыКонтрагента) = Тип("Структура") Тогда
		ПараметрыКонтрагента.Свойство("Ссылка",        Форма.Контрагент);
		ПараметрыКонтрагента.Свойство("Наименование",  Форма.НаименованиеКонтрагента);
		ПараметрыКонтрагента.Свойство("Идентификатор", Форма.ИдентификаторКонтрагента);
		ПараметрыКонтрагента.Свойство("ИНН",           Форма.ИННКонтрагента);
		ПараметрыКонтрагента.Свойство("КПП",           Форма.КППКонтрагента);
	Иначе
		Форма.Контрагент = ПараметрыКонтрагента;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыборРегионаПоиска()
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РегионРежимОтбора",   РегионПоиска.РежимОтбора);
	ПараметрыОткрытия.Вставить("РегионПредставление", РегионПоиска.Представление);
	ПараметрыОткрытия.Вставить("РегионЗначенияПолей", РегионПоиска.ЗначенияПолей);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборРегионаЗавершение", ЭтотОбъект);
	ОчиститьСообщения();
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ВыборРегионаПоиска", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуКомандыНайти(ЭтоДлительнаяОперация)
	
	Если ЭтоДлительнаяОперация Тогда
		Элементы.НайтиПредложения.Картинка = БиблиотекаКартинок.ДлительнаяОперация16;
	Иначе
		Элементы.НайтиПредложения.Картинка = БиблиотекаКартинок.УправлениеПоиском;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
