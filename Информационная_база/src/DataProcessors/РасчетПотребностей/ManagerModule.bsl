
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура производит расчет потребностей
// Вызывается в фоновом задании из формы обработки РасчетПотребностей.
//
// Параметры:
//  Параметры					 - Структура - Параметры используемые для расчета, обязательные ключи:
//										* Период - период расчет потребностей,
//										* СпособПополнения - ПеречислениеСсылка.СпособыПополненияЗапасов - способ пополнения, по которому будет отобрана номенклатура,
//										* Настройки - НастройкиКомпоновкиДанных - настройки КД, содержащие отборы для расчета потребностей
//  ВременноеХранилищеРезультата - Строка	 - Возвращаемый в родительский сеанс параметр. Содержит рассчитанное дерево потребностей.
//
Процедура ПолучитьДанные(Параметры, ВременноеХранилищеРезультата) Экспорт
	
	УстановитьПараметр(Параметры.Настройки, "ДатаОстатки", ?(НачалоДня(Параметры.Период.ДатаНачала)=НачалоДня(ТекущаяДатаСеанса()), ТекущаяДатаСеанса(), Параметры.Период.ДатаНачала));
	УстановитьПараметр(Параметры.Настройки, "ДатаНачала", Параметры.Период.ДатаНачала);
	УстановитьПараметр(Параметры.Настройки, "ДатаОкончания", Параметры.Период.ДатаОкончания);
	СпособПополнения = Новый СписокЗначений;
	Если Параметры.СпособПополнения=СпособПополненияЗакупка() ИЛИ Параметры.СпособПополнения=СпособПополненияЗакупкаПереработка() Тогда
		СпособПополнения.Добавить(Перечисления.СпособыПополненияЗапасов.Закупка);
		СпособПополнения.Добавить(Перечисления.СпособыПополненияЗапасов.Переработка);
	ИначеЕсли Параметры.СпособПополнения=СпособПополненияПроизводство() Тогда
		СпособПополнения.Добавить(Перечисления.СпособыПополненияЗапасов.Производство);
	Иначе
		СпособПополнения.Добавить(Перечисления.СпособыПополненияЗапасов.Закупка);
		СпособПополнения.Добавить(Перечисления.СпособыПополненияЗапасов.Переработка);
		СпособПополнения.Добавить(Перечисления.СпособыПополненияЗапасов.Производство);
	КонецЕсли;
	УстановитьПараметр(Параметры.Настройки, "СпособПополнения", СпособПополнения);
	ПараметрКомпоновки = Параметры.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Контрагент"));
	Если ЗначениеЗаполнено(ПараметрКомпоновки.Значение) Тогда
		ВидыЦенКонтрагентов = ПолучитьАктуальныеВидЦенКонтрагента(Параметры.Период.ДатаНачала, ПараметрКомпоновки.Значение);
		УстановитьПараметр(Параметры.Настройки, "ВидыЦенКонтрагентов", ВидыЦенКонтрагентов);
	Иначе
		УстановитьПараметр(Параметры.Настройки, "ВидыЦенКонтрагентов", Новый СписокЗначений);
	КонецЕсли;
	Компания = Константы.Компания.Получить();
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		УстановитьПараметр(Параметры.Настройки, "Организация", ПредопределенноеЗначение("Справочник.Организации.ОсновнаяОрганизация"));
	ИначеЕсли ЗначениеЗаполнено(Компания) Тогда 
		УстановитьПараметр(Параметры.Настройки, "Организация", Компания);
	КонецЕсли;
	ПараметрКомпоновки = Параметры.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Организация"));
	Если ПараметрКомпоновки<>Неопределено И ПараметрКомпоновки.Использование Тогда
		Параметры.Вставить("Организация", ПараметрКомпоновки.Значение);
	КонецЕсли;
	
	ДобавитьОтборПоСоставуЗаказов(Параметры);
	
	СхемаКомпоновкиДанных = Обработки.РасчетПотребностей.ПолучитьМакет("СхемаКомпоновкиДанных");
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, Параметры.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Создадим и инициализируем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат); 
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	РассчитатьГрафикДвиженияЗапасов(ТаблицаРезультат);
	УчестьРазмещенныеЗаказы(ТаблицаРезультат, Параметры);
	
	ДеревоРезультат = СформироватьДерево(ТаблицаРезультат, Параметры);
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Дерево", ДеревоРезультат);
	
	ПоместитьВоВременноеХранилище(СтруктураРезультат, ВременноеХранилищеРезультата);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ГруппировкиОбщее

Функция СформироватьДерево(ТаблицаДанных, Параметры)
	
	Построитель = Новый ПостроительЗапроса;	
	ОписаниеИсточника = Новый ОписаниеИсточникаДанных(ТаблицаДанных);
	ОписаниеИсточника.Колонки.Заказ.Измерение = Истина;
	ОписаниеИсточника.Колонки.Номенклатура.Измерение = Истина;
	ОписаниеИсточника.Колонки.Характеристика.Измерение = Истина;
	ОписаниеИсточника.Колонки.ЕдиницаИзмерения.Измерение = Истина;
	ОписаниеИсточника.Колонки.Период.Измерение = Истина;
	Построитель.ИсточникДанных = ОписаниеИсточника;
	Построитель.Измерения.Очистить();
	Если Параметры.Группировать=ГруппировкаНоменклатура() Тогда
		Построитель.Измерения.Добавить(ИмяГруппировкиНоменклатура());
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			Построитель.Измерения.Добавить(ИмяГруппировкиХарактеристика());
		КонецЕсли; 
		Построитель.Измерения.Добавить(ИмяГруппировкиЕдиницаИзмерения());
	ИначеЕсли Параметры.Группировать=ГруппировкаНоменклатураДень() Тогда
		Построитель.Измерения.Добавить(ИмяГруппировкиНоменклатура());
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			Построитель.Измерения.Добавить(ИмяГруппировкиХарактеристика());
		КонецЕсли; 
		Построитель.Измерения.Добавить(ИмяГруппировкиЕдиницаИзмерения());
		Построитель.Измерения.Добавить(ИмяГруппировкиПериод());
	ИначеЕсли Параметры.Группировать=ГруппировкаДеньНоменклатура() Тогда
		Построитель.Измерения.Добавить(ИмяГруппировкиПериод());
		Построитель.Измерения.Добавить(ИмяГруппировкиНоменклатура());
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			Построитель.Измерения.Добавить(ИмяГруппировкиХарактеристика());
		КонецЕсли; 
		Построитель.Измерения.Добавить(ИмяГруппировкиЕдиницаИзмерения());
	ИначеЕсли Параметры.Группировать=ГруппировкаЗаказНоменклатура() Тогда
		Построитель.Измерения.Добавить(ИмяГруппировкиЗаказ());
		Построитель.Измерения.Добавить(ИмяГруппировкиНоменклатура());
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			Построитель.Измерения.Добавить(ИмяГруппировкиХарактеристика());
		КонецЕсли; 
		Построитель.Измерения.Добавить(ИмяГруппировкиЕдиницаИзмерения());
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	Если Параметры.ПоЗаказам И НЕ Параметры.Группировать=ГруппировкаЗаказНоменклатура() Тогда
		Построитель.Измерения.Добавить(ИмяГруппировкиЗаказ());
	КонецЕсли; 
	Если Параметры.Группировать=ГруппировкаНоменклатура() Тогда
		Построитель.Измерения.Добавить(ИмяГруппировкиПериод());
	КонецЕсли;
	Для каждого Измерение Из Построитель.Измерения Цикл
		Если Измерение.Имя=ИмяГруппировкиПериод() Тогда
			ИмяЭлементаПорядка = Измерение.Имя;
		ИначеЕсли Измерение.Имя=ИмяГруппировкиЗаказ() Тогда
			ИмяЭлементаПорядка = Измерение.Имя + ".Дата";
		Иначе
			ИмяЭлементаПорядка = Измерение.Имя + ".Наименование";
		КонецЕсли; 
		Построитель.Порядок.Добавить(ИмяЭлементаПорядка);
	КонецЦикла;
	Построитель.Выполнить();
	Дерево = Построитель.Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	Дерево.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Дерево.Колонки.Добавить("ИмяГруппировки", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Дерево.Колонки.Добавить("ПорядокЗаказа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1)));
	Дерево.Колонки.Добавить("ДатаЗаказа", Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Дерево.Колонки.Добавить("ЭтоПополнениеЗапасов", Новый ОписаниеТипов("Булево"));
	ЗаполнитьИмяГруппировкиРекурсивно(Дерево.Строки, Построитель.Измерения);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		ОбъединитьГруппировки(Дерево, Построитель.Измерения, ИмяГруппировкиНоменклатура()); // Номенклатура + Характеристика
	КонецЕсли;
	ОбъединитьГруппировки(Дерево, Построитель.Измерения, ИмяГруппировкиНоменклатура()); // Номенклатура + ЕдиницаИзмерения
	СортироватьДеревоРекурсивно(Дерево.Строки);
	
	Если Параметры.Группировать=ГруппировкаНоменклатура() Тогда
		ТекущийПериод = Параметры.Период.ДатаНачала;
		Пока НачалоДня(ТекущийПериод) <= НачалоДня(Параметры.Период.ДатаОкончания) Цикл
			Дерево.Колонки.Добавить(ИмяКолонкиПериод(ТекущийПериод), Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
			ТекущийПериод = ТекущийПериод + 86400;
		КонецЦикла;
		Дерево.Колонки.Добавить("Пополнение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		Если Параметры.ПоЗаказам Тогда
			ПеренестиПериодВКолонкиПоЗаказамРекурсивно(Дерево.Строки);
		Иначе
			ПеренестиПериодВКолонкиРекурсивно(Дерево.Строки);
		КонецЕсли;
		РассчитатьИтогиНоменклатураРекурсивно(Дерево.Строки, Дерево.Колонки);
	ИначеЕсли Параметры.Группировать=ГруппировкаНоменклатураДень() Тогда 
		СуммироватьДетальныеЗаписиРекурсивно(Дерево.Строки);
		РассчитатьИтогиНоменклатураДеньРекурсивно(Дерево.Строки, Дерево.Колонки, Параметры.Группировать);
	ИначеЕсли Параметры.Группировать=ГруппировкаДеньНоменклатура() Тогда 
		СуммироватьДетальныеЗаписиРекурсивно(Дерево.Строки);
		РассчитатьИтогиДеньНоменклатураРекурсивно(Дерево.Строки, Дерево.Колонки, Параметры.Группировать);
	ИначеЕсли Параметры.Группировать=ГруппировкаЗаказНоменклатура() Тогда 
		СуммироватьДетальныеЗаписиРекурсивно(Дерево.Строки);
		РассчитатьИтогиЗаказНоменклатураРекурсивно(Дерево.Строки, Дерево.Колонки, Параметры.Группировать);
	КонецЕсли;
	
	Если Параметры.ТолькоДефицит Тогда
		УдалитьНоменклатуруБезДефицитаРекурсивно(Дерево.Строки);
	КонецЕсли;
	ЗаполнитьПараметрыПоступления(Дерево, Параметры);
	
	Возврат Дерево;
	
КонецФункции

Процедура СортироватьДеревоРекурсивно(Строки)
	
	Если Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	ИмяГруппировки = Строки[0].ИмяГруппировки;
	Если ИмяГруппировки=ИмяГруппировкиНоменклатура() Тогда
		Строки.Сортировать("Номенклатура, Характеристика");
	КонецЕсли;
	Если ИмяГруппировки=ИмяГруппировкиЗаказ() ИЛИ ИмяГруппировки=ИмяГруппировкиЗаказРекомендации() Тогда
		МассивЗаказовПокупателей = Новый Массив;
		МассивЗаказовПоставщику = Новый Массив;
		МассивЗаказовНаПроизводство = Новый Массив;
		Для каждого Строка Из Строки Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Заказ) Тогда
				Строка.ПорядокЗаказа = 0;
			ИначеЕсли ТипЗнч(Строка.Заказ)=Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				Строка.ПорядокЗаказа = 1;
				МассивЗаказовПоставщику.Добавить(Строка.Заказ);
			ИначеЕсли ТипЗнч(Строка.Заказ)=Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
				Строка.ПорядокЗаказа = 2;
				МассивЗаказовНаПроизводство.Добавить(Строка.Заказ);
			ИначеЕсли ТипЗнч(Строка.Заказ)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				Строка.ПорядокЗаказа = 3;
				МассивЗаказовПокупателей.Добавить(Строка.Заказ);
			Иначе
				Строка.ПорядокЗаказа = 4;
			КонецЕсли;
		КонецЦикла;
		ЗначенияЗаказыПокупателей = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивЗаказовПокупателей, "ДатаОтгрузки");
		ЗначенияЗаказыПоставщику = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивЗаказовПоставщику, "ДатаПоступления");
		ЗначенияЗаказыНаПроизводство = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивЗаказовНаПроизводство, "Финиш");
		Для каждого Строка Из Строки Цикл
			Если ТипЗнч(Строка.Заказ)=Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				Строка.ДатаЗаказа = ЗначенияЗаказыПоставщику.Получить(Строка.Заказ);
			ИначеЕсли ТипЗнч(Строка.Заказ)=Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
				Строка.ДатаЗаказа = ЗначенияЗаказыНаПроизводство.Получить(Строка.Заказ);
			ИначеЕсли ТипЗнч(Строка.Заказ)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				Строка.ДатаЗаказа = ЗначенияЗаказыПокупателей.Получить(Строка.Заказ);
			КонецЕсли;
		КонецЦикла; 
		Строки.Сортировать("ПорядокЗаказа, ДатаЗаказа");
	КонецЕсли; 
	Для каждого Строка Из Строки Цикл
		СортироватьДеревоРекурсивно(Строка.Строки);
	КонецЦикла; 
	
КонецПроцедуры

Процедура РассчитатьГрафикДвиженияЗапасов(ТаблицаРезультатЗапроса)
	
	Если ТаблицаРезультатЗапроса.Колонки.Найти("Характеристика")=Неопределено Тогда
		ТаблицаРезультатЗапроса.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли; 
	
	Для каждого СтрокаРезультатЗапрос Из ТаблицаРезультатЗапроса Цикл
		
		Если СтрокаРезультатЗапрос.ЗаказОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоЗаказОстаток 			= СтрокаРезультатЗапрос.ЗаказОстаток;
		КоличествоОстатокПоступление 	= СтрокаРезультатЗапрос.ЗаказОстаток;
		КоличествоОстатокПотребность 	= СтрокаРезультатЗапрос.ЗаказОстаток;
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура", СтрокаРезультатЗапрос.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаРезультатЗапрос.Характеристика);
		СтруктураПоиска.Вставить("Заказ", СтрокаРезультатЗапрос.Заказ);
		
		РезультатЗаказы = ТаблицаРезультатЗапроса.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаЗаказы Из РезультатЗаказы Цикл
			
			// Поступление.
			Если СтрокаЗаказы.ТипДвижения = Перечисления.ТипыДвиженийЗапасов.Поступление Тогда
				
				КоличествоОстатокПоступление = КоличествоОстатокПоступление - СтрокаЗаказы.Поступление;
				
			КонецЕсли;
			
			Если СтрокаЗаказы.Поступление <> 0 Тогда
	
				Поступление = МИН(КоличествоЗаказОстаток, СтрокаЗаказы.Поступление);
				КоличествоЗаказОстаток = КоличествоЗаказОстаток - СтрокаЗаказы.Поступление;
				СтрокаЗаказы.Поступление = Поступление;
				
			КонецЕсли;
			
			// Потребность.
			Если СтрокаЗаказы.ТипДвижения = Перечисления.ТипыДвиженийЗапасов.Отгрузка Тогда
				
				КоличествоОстатокПотребность = КоличествоОстатокПотребность - СтрокаЗаказы.Потребность;
				
			КонецЕсли;
			
			Если СтрокаЗаказы.Потребность <> 0 Тогда
				
				Потребность = МИН(КоличествоЗаказОстаток, СтрокаЗаказы.Потребность);
				КоличествоЗаказОстаток = КоличествоЗаказОстаток - СтрокаЗаказы.Потребность;
				СтрокаЗаказы.Потребность = Потребность;
				
			КонецЕсли;
			
			СтрокаЗаказы.ЗаказОстаток = 0;
			
		КонецЦикла;
		
		Для каждого СтрокаЗаказы Из РезультатЗаказы Цикл
			
			Если СтрокаЗаказы.ТипДвижения = Перечисления.ТипыДвиженийЗапасов.Поступление Тогда
				
				Если КоличествоОстатокПоступление > 0 Тогда
					СтрокаЗаказы.Поступление = КоличествоОстатокПоступление;
					КоличествоОстатокПоступление = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаЗаказы.ТипДвижения = Перечисления.ТипыДвиженийЗапасов.Отгрузка Тогда
				
				Если КоличествоОстатокПотребность > 0 Тогда
					СтрокаЗаказы.Потребность = КоличествоОстатокПотребность;
					КоличествоОстатокПотребность = 0;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИмяГруппировкиРекурсивно(Строки, Измерения, Уровень = 0)
	
	ИмяГруппировки = ?(Уровень>=Измерения.Количество(), "", Измерения[Уровень].Имя);
	Для каждого Строка Из Строки Цикл
		Строка.ИмяГруппировки = ИмяГруппировки;
		Если Строка.Строки.Количество()>0 Тогда
			ЗаполнитьИмяГруппировкиРекурсивно(Строка.Строки, Измерения, Уровень + 1);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОбъединитьГруппировки(Дерево, Измерения, Группировка1)
	
	Уровень = 1;
	Для каждого Измерение Из Измерения Цикл
		Если Измерение.Имя=Группировка1 Тогда
			Прервать;
		КонецЕсли; 
		Уровень = Уровень + 1;
	КонецЦикла; 	
	
	Строки = СтрокиДереваПоУровнюРекурсивно(Дерево.Строки, Уровень);
	Для каждого Строка Из Строки Цикл
		Если Строка.Родитель=Неопределено Тогда
			Приемник = Дерево.Строки;
		Иначе
			Приемник = Строка.Родитель.Строки;
		КонецЕсли; 
		Для каждого ПодСтрока Из Строка.Строки Цикл
			НоваяСтрока = СкопироватьСтрокуДереваРекурсивно(ПодСтрока, Приемник, Строка);
			НоваяСтрока[Группировка1] = Строка[Группировка1];
			НоваяСтрока.ИмяГруппировки = Группировка1;
		КонецЦикла; 
		Приемник.Удалить(Строка);
	КонецЦикла; 
	
КонецПроцедуры

Функция СтрокиДереваПоУровнюРекурсивно(Строки, Уровень, ТекущийУровень = 1)
	
	МассивСтрок = Новый Массив;
	Для каждого Строка Из Строки Цикл
		Если Уровень=ТекущийУровень Тогда
			МассивСтрок.Добавить(Строка);
		ИначеЕсли Уровень>ТекущийУровень Тогда
			МассивВложенныхСтрок = СтрокиДереваПоУровнюРекурсивно(Строка.Строки, Уровень, ТекущийУровень + 1);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрок, МассивВложенныхСтрок);
		КонецЕсли; 
	КонецЦикла;
	Возврат МассивСтрок;
	
КонецФункции

Функция СкопироватьСтрокуДереваРекурсивно(Строка, Приемник, СтрокаВставки = Неопределено)
	
	Если СтрокаВставки=Неопределено Тогда
		НоваяСтрока = Приемник.Добавить();
	Иначе
		Индекс = Приемник.Индекс(СтрокаВставки);
		Если Индекс<0 Тогда
			НоваяСтрока = Приемник.Добавить();
		Иначе
			НоваяСтрока = Приемник.Вставить(Индекс);
		КонецЕсли; 
	КонецЕсли; 
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	Для каждого ПодСтрока Из Строка.Строки Цикл
		СкопироватьСтрокуДереваРекурсивно(ПодСтрока, НоваяСтрока.Строки);
	КонецЦикла; 
	Возврат НоваяСтрока;
	
КонецФункции
 
Процедура СуммироватьДетальныеЗаписиРекурсивно(Строки)
	
	Если Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 	
	
	Если НЕ ПустаяСтрока(Строки[0].ИмяГруппировки) Тогда
		Для каждого Строка Из Строки Цикл
			СуммироватьДетальныеЗаписиРекурсивно(Строка.Строки)
		КонецЦикла; 
	Иначе
		СтруктураИтогов = Новый Структура;
		СтруктураИтогов.Вставить("НачальныйОстаток", 0);
		СтруктураИтогов.Вставить("Поступление", 0);
		СтруктураИтогов.Вставить("ПоступлениеПросрочено", 0);
		СтруктураИтогов.Вставить("Потребность", 0);
		СтруктураИтогов.Вставить("ПотребностьПросрочено", 0);
		Для каждого Строка Из Строки Цикл
			Для каждого КлючИЗначение Из СтруктураИтогов Цикл
				ИзменитьЧисло(СтруктураИтогов[КлючИЗначение.Ключ], Строка[КлючИЗначение.Ключ]);
			КонецЦикла;
			Если ЗначениеЗаполнено(Строка.МинимальныйЗапас) Тогда
				Строки.Родитель.МинимальныйЗапас = Строка.МинимальныйЗапас;
			КонецЕсли; 
			Если ЗначениеЗаполнено(Строка.МаксимальныйЗапас) Тогда
				Строки.Родитель.МаксимальныйЗапас = Строка.МаксимальныйЗапас;
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(Строки.Родитель, СтруктураИтогов);
		Строки.Очистить();
	КонецЕсли; 
	
КонецПроцедуры

Процедура УдалитьНоменклатуруБезДефицитаРекурсивно(Строки)
	
	МассивКУдалению = Новый Массив;
	Для каждого Строка Из Строки Цикл
		Если Строка.ИмяГруппировки=ИмяГруппировкиНоменклатура() Тогда
			Если НЕ ЗначениеЗаполнено(Строка.Дефицит) ИЛИ Строка.Дефицит<=0 Тогда
				МассивКУдалению.Добавить(Строка);
				Если Строка.Родитель<>Неопределено Тогда
					Строка.Родитель.Поступление = Строка.Родитель.Поступление - Строка.Поступление;
					Строка.Родитель.Потребность = Строка.Родитель.Потребность - Строка.Потребность;
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли Строка.Строки.Количество()>0 Тогда 
			УдалитьНоменклатуруБезДефицитаРекурсивно(Строка.Строки);
			Если Строка.Строки.Количество()=0 Тогда
				МассивКУдалению.Добавить(Строка);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	Для каждого Строка Из МассивКУдалению Цикл
		Строки.Удалить(Строка);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеГруппировки(Строка)
	
	Если НЕ ПустаяСтрока(Строка.Представление) Тогда
		Возврат;
	КонецЕсли; 
	Если Строка.ИмяГруппировки=ИмяГруппировкиПериод() Тогда
		Если ЗначениеЗаполнено(Строка.Период) Тогда
			Строка.Представление = Формат(Строка.Период, "ДЛФ=D");
		Иначе
			Строка.Представление = НСтр("ru = 'Просрочено'");
		КонецЕсли;
	ИначеЕсли Строка.ИмяГруппировки=ИмяГруппировкиЗаказ() Тогда
		Если ЗначениеЗаполнено(Строка.Заказ) Тогда
			Строка.Представление = ПредставлениеЗаказа(Строка.Заказ);
		Иначе
			Строка.Представление = НСтр("ru = '<Не указан>'");
		КонецЕсли;
	КонецЕсли; 	
	
КонецПроцедуры

Функция ПредставлениеЗаказа(Заказ)
	
	Если НЕ ЗначениеЗаполнено(Заказ) Тогда
		Возврат НСтр("ru = '<Не указан>'");
	КонецЕсли;
	
	Возврат Строка(Заказ); 
	
КонецФункции

Функция ИтогиПоКолонкам(Строка, Структура)
	
	Результат = 0;
	Для каждого КлючИЗначение Из Структура Цикл
		Результат = Результат + ?(ТипЗнч(Строка[КлючИЗначение.Ключ])=Тип("Число"), Строка[КлючИЗначение.Ключ], 0);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура СуммаКолонок(Строки, СтруктураИтогов, Рекурсивно = Ложь)
	
	Для каждого Строка Из Строки Цикл
		Для каждого КлючИЗначение Из СтруктураИтогов Цикл
			СтруктураИтогов[КлючИЗначение.Ключ] = СтруктураИтогов[КлючИЗначение.Ключ] + ?(ТипЗнч(Строка[КлючИЗначение.Ключ])<>Тип("Число"), 0, Строка[КлючИЗначение.Ключ]);
		КонецЦикла;
		Если Рекурсивно И Строка.Строки.Количество()>0 Тогда
			СуммаКолонок(Строка.Строки, СтруктураИтогов, Рекурсивно);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ГруппировкаНоменклатура

Процедура ПеренестиПериодВКолонкиПоЗаказамРекурсивно(Строки, СтруктураСтрок = Неопределено, СтрокиВставки = Неопределено)
	
	МассивУдаленныхСтрок = Новый Массив;
	Для каждого СтрокаДерева Из Строки Цикл
		Если НЕ ПустаяСтрока(СтрокаДерева.Представление) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаДерева.Период<>Null Тогда
			Если СтрокаДерева.Строки.Количество()>0 Тогда
				// Переход к детальным записям
				ПеренестиПериодВКолонкиПоЗаказамРекурсивно(СтрокаДерева.Строки, СтруктураСтрок, СтрокиВставки);
			Иначе
				ИмяКолонки = ИмяКолонкиПериод(СтрокаДерева.Период);
				ИзменитьЧисло(СтруктураСтрок.Рекомендовано[ИмяКолонки], СтрокаДерева.Дефицит);
				ИзменитьЧисло(СтруктураСтрок.НачальныйОстаток[ИмяКолонки], СтрокаДерева.НачальныйОстаток);
				Если СтруктураСтрок.Свойство(ИмяГруппировкиМаксимальныйЗапас()) И ЗначениеЗаполнено(СтрокаДерева.МаксимальныйЗапас) Тогда
					СтруктураСтрок.МаксимальныйЗапас[ИмяКолонки] = СтрокаДерева.МаксимальныйЗапас;
				КонецЕсли; 
				Если СтруктураСтрок.Свойство(ИмяГруппировкиМинимальныйЗапас()) И ЗначениеЗаполнено(СтрокаДерева.МинимальныйЗапас) Тогда
					СтруктураСтрок.МинимальныйЗапас[ИмяКолонки] = СтрокаДерева.МинимальныйЗапас;
				КонецЕсли; 
				ДобавитьСтрокуЗаказа(СтрокаДерева, СтруктураСтрок, ИмяГруппировкиПоступление(), "Поступление", ИмяКолонки);
				ДобавитьСтрокуЗаказа(СтрокаДерева, СтруктураСтрок, ИмяГруппировкиПотребность(), "Потребность", ИмяКолонки);
				// Общие данные
				ДобавитьСтрокуЗаказа(СтрокаДерева, СтруктураСтрок, ИмяГруппировкиПоступление(), "ПоступлениеПросрочено", "ПоступлениеПросрочено");
				ДобавитьСтрокуЗаказа(СтрокаДерева, СтруктураСтрок, ИмяГруппировкиПотребность(), "ПотребностьПросрочено", "ПотребностьПросрочено");
				Если СтрокаДерева.НачальныйОстаток<>0 Тогда
					СтрокиВставки.Родитель.НачальныйОстаток = СтрокаДерева.НачальныйОстаток;
				КонецЕсли; 
			КонецЕсли; 
			МассивУдаленныхСтрок.Добавить(СтрокаДерева);
		ИначеЕсли СтрокаДерева.Заказ<>Null Тогда
			Если СтрокиВставки=Неопределено Тогда
				СтрокиВставки = СтрокаДерева.Родитель.Строки;
			КонецЕсли;
			Если СтруктураСтрок=Неопределено Тогда
				СтруктураСтрок = Новый Структура;
			КонецЕсли; 
			Если СтруктураСтрок.Количество()=0 Тогда
				ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиНачальныйОстаток(), НСтр("ru = 'Начальный остаток'"));
				ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиПоступление(), НСтр("ru = 'Поступление'"));
				ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиПотребность(), НСтр("ru = 'Потребность'"));
				ИспользуетсяУправлениеЗапасами = ОпределитьИспользованиеУправленияЗапасамиРекурсивно(Строки);
				Если ИспользуетсяУправлениеЗапасами Тогда
					ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиМинимальныйЗапас(), НСтр("ru = 'Минимальный запас'"));
					ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиМаксимальныйЗапас(), НСтр("ru = 'Максимальный запас'"));
				КонецЕсли;
				ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиКонечныйОстаток(), НСтр("ru = 'Конечный остаток'"));
				ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиРекомендовано(), НСтр("ru = 'Рекомендации и заказ'"));
			КонецЕсли; 
			ПеренестиПериодВКолонкиПоЗаказамРекурсивно(СтрокаДерева.Строки, СтруктураСтрок, СтрокиВставки);
			МассивУдаленныхСтрок.Добавить(СтрокаДерева);
		Иначе
			ПеренестиПериодВКолонкиПоЗаказамРекурсивно(СтрокаДерева.Строки);
		КонецЕсли; 
	КонецЦикла;
	Для каждого СтрокаДерева Из МассивУдаленныхСтрок Цикл
		Строки.Удалить(СтрокаДерева);
	КонецЦикла; 
	
КонецПроцедуры

Функция ОпределитьИспользованиеУправленияЗапасамиРекурсивно(Строки)
	
	Для каждого Строка Из Строки Цикл
		Если ЗначениеЗаполнено(Строка.МинимальныйЗапас) ИЛИ ЗначениеЗаполнено(Строка.МаксимальныйЗапас) Тогда
			Возврат Истина;
		КонецЕсли;
		Если ОпределитьИспользованиеУправленияЗапасамиРекурсивно(Строка.Строки) Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла; 
	Возврат Ложь;
	
КонецФункции

Процедура ПеренестиПериодВКолонкиРекурсивно(Строки, СтруктураСтрок = Неопределено, СтрокиВставки = Неопределено)
	
	МассивУдаленныхСтрок = Новый Массив;
	Для каждого СтрокаДерева Из Строки Цикл
		Если НЕ ПустаяСтрока(СтрокаДерева.Представление) Тогда
			Продолжить;
		КонецЕсли; 
		Если СтрокаДерева.Период=Null Тогда
			ПеренестиПериодВКолонкиРекурсивно(СтрокаДерева.Строки);
		Иначе
			Если СтрокиВставки=Неопределено Тогда
				СтрокиВставки = СтрокаДерева.Родитель.Строки;
			КонецЕсли;
			Если СтруктураСтрок=Неопределено Тогда
				СтруктураСтрок = Новый Структура;
			КонецЕсли; 
			Если СтрокаДерева.Строки.Количество()>0 Тогда
				// Переход к детальным записям
				ПеренестиПериодВКолонкиРекурсивно(СтрокаДерева.Строки, СтруктураСтрок, СтрокиВставки);
			Иначе
				ИспользуетсяУправлениеЗапасами = (СтрокаДерева.МинимальныйЗапас<>0 ИЛИ СтрокаДерева.МаксимальныйЗапас<>0);
				Если СтруктураСтрок.Количество()=0 Тогда
					ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиНачальныйОстаток(), НСтр("ru = 'Начальный остаток'"));
					ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиПоступление(), НСтр("ru = 'Поступление'"));
					ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиПотребность(), НСтр("ru = 'Потребность'"));
					Если ИспользуетсяУправлениеЗапасами Тогда
						ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиМинимальныйЗапас(), НСтр("ru = 'Минимальный запас'"));
						ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиМаксимальныйЗапас(), НСтр("ru = 'Максимальный запас'"));
					КонецЕсли;
					ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиКонечныйОстаток(), НСтр("ru = 'Конечный остаток'"));
				КонецЕсли; 
				ИмяКолонки = ИмяКолонкиПериод(СтрокаДерева.Период);
				ИзменитьЧисло(СтруктураСтрок.НачальныйОстаток[ИмяКолонки], СтрокаДерева.НачальныйОстаток);
				Если СтруктураСтрок.Свойство(ИмяГруппировкиМаксимальныйЗапас()) И ЗначениеЗаполнено(СтрокаДерева.МаксимальныйЗапас) Тогда
					СтруктураСтрок.МаксимальныйЗапас[ИмяКолонки] = СтрокаДерева.МаксимальныйЗапас;
				КонецЕсли; 
				Если СтруктураСтрок.Свойство(ИмяГруппировкиМинимальныйЗапас()) И ЗначениеЗаполнено(СтрокаДерева.МинимальныйЗапас) Тогда
					СтруктураСтрок.МинимальныйЗапас[ИмяКолонки] = СтрокаДерева.МинимальныйЗапас;
				КонецЕсли;
				ИзменитьЧисло(СтруктураСтрок.Поступление[ИмяКолонки], СтрокаДерева.Поступление);
				ИзменитьЧисло(СтруктураСтрок.Потребность[ИмяКолонки], СтрокаДерева.Потребность);
				// Общие данные
				Если СтрокаДерева.ПоступлениеПросрочено<>0 Тогда
					СтрокиВставки.Родитель.ПоступлениеПросрочено = СтрокаДерева.ПоступлениеПросрочено;
				КонецЕсли; 
				Если СтрокаДерева.ПотребностьПросрочено<>0 Тогда
					СтрокиВставки.Родитель.ПотребностьПросрочено = СтрокаДерева.ПотребностьПросрочено;
				КонецЕсли; 
				Если СтрокаДерева.НачальныйОстаток<>0 Тогда
					СтрокиВставки.Родитель.НачальныйОстаток = СтрокаДерева.НачальныйОстаток;
				КонецЕсли; 
			КонецЕсли; 
			МассивУдаленныхСтрок.Добавить(СтрокаДерева);
		КонецЕсли; 
	КонецЦикла;
	Для каждого СтрокаДерева Из МассивУдаленныхСтрок Цикл
		Строки.Удалить(СтрокаДерева);
	КонецЦикла; 
	
КонецПроцедуры

Функция РассчитатьИтогиНоменклатураРекурсивно(Строки, Колонки)
	
	СтруктураИтогов = Новый Структура;
	МассивКолонок = Новый Массив;
	Для каждого Колонка Из Колонки Цикл
		Если Колонка.Имя="Период" Тогда
			Продолжить;
		КонецЕсли; 
		Если Колонка.Имя="Просрочено" ИЛИ Колонка.Имя="Пополнение" ИЛИ Найти(Колонка.Имя, "Период")>0 Тогда
			МассивКолонок.Добавить(Колонка.Имя);
			СтруктураИтогов.Вставить(Колонка.Имя, 0);
		КонецЕсли; 
	КонецЦикла;
	
	СтруктураСтрок = Новый Структура("НачальныйОстаток, Поступление, Потребность, МинимальныйЗапас, МаксимальныйЗапас, КонечныйОстаток, Рекомендовано");
	ЭтоРазворотПоДням = Ложь;
	Для каждого Строка Из Строки Цикл
		ИнициализироватьЧисловыеЗначения(Строка, Колонки);
		Если СтруктураСтрок.Свойство(Строка.ИмяГруппировки) Тогда
			СтруктураСтрок.Вставить(Строка.ИмяГруппировки, Строка);
			ЭтоРазворотПоДням = Истина;
		КонецЕсли; 
	КонецЦикла;
	
	Если ЭтоРазворотПоДням Тогда
		НачальныйОстаток = 0;
		ПоЗаказам = (СтруктураСтрок.Рекомендовано<>Неопределено);
		Для каждого ИмяКолонки Из МассивКолонок Цикл
			Если ЗначениеЗаполнено(СтруктураСтрок.НачальныйОстаток[ИмяКолонки]) Тогда
				НачальныйОстаток = СтруктураСтрок.НачальныйОстаток[ИмяКолонки];
				СтруктураСтрок.НачальныйОстаток.Дефицит = НачальныйОстаток;
			Иначе
				СтруктураСтрок.НачальныйОстаток[ИмяКолонки] = НачальныйОстаток;
			КонецЕсли;
			Если СтруктураСтрок.МинимальныйЗапас<>Неопределено И ЗначениеЗаполнено(СтруктураСтрок.МинимальныйЗапас[ИмяКолонки]) Тогда
				СтруктураСтрок.МинимальныйЗапас.Дефицит = СтруктураСтрок.МинимальныйЗапас[ИмяКолонки];
				СтруктураСтрок.МинимальныйЗапас[ИмяКолонки] = 0;
			КонецЕсли;
			Если СтруктураСтрок.МинимальныйЗапас<>Неопределено И ЗначениеЗаполнено(СтруктураСтрок.МаксимальныйЗапас[ИмяКолонки]) Тогда 
				СтруктураСтрок.МаксимальныйЗапас.Дефицит = СтруктураСтрок.МаксимальныйЗапас[ИмяКолонки];
				СтруктураСтрок.МаксимальныйЗапас[ИмяКолонки] = 0;
			КонецЕсли;
			ИзменитьЧисло(СтруктураСтрок.Поступление[ИмяКолонки], 0);
			ИзменитьЧисло(СтруктураСтрок.Потребность[ИмяКолонки], 0);
			ИзменитьЧисло(СтруктураСтрок.КонечныйОстаток[ИмяКолонки], СтруктураСтрок.НачальныйОстаток[ИмяКолонки] + СтруктураСтрок.Поступление[ИмяКолонки] - СтруктураСтрок.Потребность[ИмяКолонки]);
			Если СтруктураСтрок.КонечныйОстаток[ИмяКолонки]<0 Тогда
				Если ПоЗаказам Тогда
					СтруктураСтрок.Рекомендовано[ИмяКолонки] = -СтруктураСтрок.КонечныйОстаток[ИмяКолонки];
				КонецЕсли; 
				СтруктураИтогов.Вставить(ИмяКолонки, -СтруктураСтрок.КонечныйОстаток[ИмяКолонки]); 
				СтруктураСтрок.КонечныйОстаток[ИмяКолонки] = 0;
			КонецЕсли;
			НачальныйОстаток = СтруктураСтрок.КонечныйОстаток[ИмяКолонки];
		КонецЦикла;
		Если ПоЗаказам Тогда
			СтруктураСтрок.Рекомендовано.Дефицит = ИтогиПоКолонкам(СтруктураСтрок.Рекомендовано, СтруктураИтогов);
		КонецЕсли; 
		СтруктураСтрок.Поступление.Дефицит = ИтогиПоКолонкам(СтруктураСтрок.Поступление, СтруктураИтогов);
		СтруктураСтрок.Потребность.Дефицит = ИтогиПоКолонкам(СтруктураСтрок.Потребность, СтруктураИтогов);
		СтруктураСтрок.КонечныйОстаток.Дефицит = НачальныйОстаток;
		Если ПоЗаказам Тогда
			РаспределитьРекомендацииПоЗаказам(СтруктураСтрок.Рекомендовано, СтруктураСтрок.Потребность, СтруктураСтрок.Поступление, Колонки);
		КонецЕсли; 
		УчестьПоддержаниеОстаткаНоменклатура(СтруктураСтрок, СтруктураИтогов);
	Иначе 
		Для каждого Строка Из Строки Цикл
			Если Строка.Строки.Количество()>0 Тогда
				ИтогиВложенных = РассчитатьИтогиНоменклатураРекурсивно(Строка.Строки, Колонки);
				ЗаполнитьЗначенияСвойств(Строка, ИтогиВложенных);
				Строка.Дефицит = ИтогиПоКолонкам(Строка, ИтогиВложенных);
			Иначе
				ИтогиВложенных = Новый Структура;
				Для каждого КлючИЗначение Из СтруктураИтогов Цикл
					ИтогиВложенных.Вставить(КлючИЗначение.Ключ, Строка[КлючИЗначение.Ключ]);
				КонецЦикла; 
			КонецЕсли;
			Для каждого КлючИЗначение Из СтруктураИтогов Цикл
				СтруктураИтогов[КлючИЗначение.Ключ] = СтруктураИтогов[КлючИЗначение.Ключ] + ИтогиВложенных[КлючИЗначение.Ключ];
			КонецЦикла; 
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураИтогов;
	
КонецФункции

Процедура УчестьПоддержаниеОстаткаНоменклатура(СтруктураСтрок, СтруктураИтогов)
	
	Если СтруктураСтрок.МинимальныйЗапас=Неопределено ИЛИ СтруктураСтрок.МаксимальныйЗапас=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СтруктураСтрок.МинимальныйЗапас.Пополнение = СтруктураСтрок.МинимальныйЗапас.Дефицит;
	СтруктураСтрок.МаксимальныйЗапас.Пополнение = СтруктураСтрок.МаксимальныйЗапас.Дефицит;
	Если СтруктураСтрок.КонечныйОстаток.Дефицит<=СтруктураСтрок.МинимальныйЗапас.Дефицит Тогда
		ПоЗаказам = (СтруктураСтрок.Рекомендовано<>Неопределено);
		Пополнение = СтруктураСтрок.МаксимальныйЗапас.Дефицит - СтруктураСтрок.КонечныйОстаток.Дефицит;
		Если ПоЗаказам Тогда
			ИзменитьЧисло(СтруктураСтрок.Рекомендовано.Дефицит, Пополнение);
		КонецЕсли; 
		СтруктураСтрок.КонечныйОстаток.Дефицит = СтруктураСтрок.МаксимальныйЗапас.Дефицит;
		СтруктураСтрок.КонечныйОстаток.Пополнение = СтруктураСтрок.МаксимальныйЗапас.Дефицит;
		СтруктураИтогов.Вставить("Пополнение", Пополнение);
		Если ПоЗаказам Тогда
			СтрокаПустойЗаказ = СтруктураСтрок.Рекомендовано.Строки.Найти(Неопределено, "Заказ");
			Если СтрокаПустойЗаказ=Неопределено Тогда
				СтрокаПустойЗаказ = СтруктураСтрок.Рекомендовано.Строки.Добавить();
				СтрокаПустойЗаказ.ИмяГруппировки = ИмяГруппировкиЗаказРекомендации();
				СтрокаПустойЗаказ.Заказ = Неопределено;
				СтрокаПустойЗаказ.Представление = ПредставлениеЗаказа(СтрокаПустойЗаказ.Заказ);
			КонецЕсли;
			ИзменитьЧисло(СтрокаПустойЗаказ.Дефицит, Пополнение);
			ИзменитьЧисло(СтрокаПустойЗаказ.Пополнение, Пополнение);
			ИзменитьЧисло(СтруктураСтрок.Рекомендовано.Пополнение, Пополнение);
		КонецЕсли; 
	КонецЕсли;
		
КонецПроцедуры

Процедура РаспределитьРекомендацииПоЗаказам(СтрокаРекомендации, СтрокаПотребность, СтрокаПоступления, Колонки)
	
	МассивКолонок = Новый Массив;
	Для каждого Колонка Из Колонки Цикл
		Если Колонка.Имя="Период" Тогда
			Продолжить;
		КонецЕсли; 
		Если Колонка.Имя="Просрочено" ИЛИ Найти(Колонка.Имя, "Период")>0 Тогда
			МассивКолонок.Добавить(Колонка.Имя);
		КонецЕсли; 
	КонецЦикла; 
	
	ТаблицаОстатков = Новый ТаблицаЗначений;
	ТаблицаОстатков.Колонки.Добавить("Заказ");
	ТаблицаОстатков.Колонки.Добавить("Остаток");
	Для каждого Строка Из СтрокаПотребность.Строки Цикл
		СтрокаЗаказа = СтрокаПоступления.Строки.Найти(Строка.Заказ, "Заказ");
		Остаток = Строка.Дефицит - ?(СтрокаЗаказа=Неопределено, 0, СтрокаЗаказа.Дефицит);
		Если Остаток>0 Тогда
			НоваяСтрока = ТаблицаОстатков.Добавить();
			НоваяСтрока.Заказ = Строка.Заказ;
			НоваяСтрока.Остаток = Остаток;
		КонецЕсли; 
	КонецЦикла;
	
	Если ТаблицаОстатков.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого ИмяКолонки Из МассивКолонок Цикл
		Распределить = СтрокаРекомендации[ИмяКолонки];
		Если НЕ ЗначениеЗаполнено(Распределить) Тогда
			Продолжить;
		КонецЕсли; 
		Для каждого СтрокаОстатков Из ТаблицаОстатков Цикл
			Если СтрокаОстатков.Остаток<=0 Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаЗаказа = СтрокаРекомендации.Строки.Найти(СтрокаОстатков.Заказ, "Заказ");
			Если СтрокаЗаказа=Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			РаспределеноНаСтроку = Мин(Распределить, СтрокаОстатков.Остаток);
			СтрокаЗаказа[ИмяКолонки] = РаспределеноНаСтроку;
			ИзменитьЧисло(СтрокаЗаказа.Дефицит, РаспределеноНаСтроку);
			Распределить = Распределить - РаспределеноНаСтроку;
			СтрокаОстатков.Остаток = СтрокаОстатков.Остаток - РаспределеноНаСтроку;
			Если Распределить<=0 Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти 

#Область ГруппировкаНоменклатураДень

Функция РассчитатьИтогиНоменклатураДеньРекурсивно(Строки, Колонки, Группировать, Остатки = Неопределено)
	
	Если Остатки=Неопределено Тогда
		ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
		Остатки = Новый ТаблицаЗначений;
		Остатки.Колонки.Добавить("Номенклатура");
		Остатки.Колонки.Добавить("Характеристика");
		Остатки.Колонки.Добавить("МинимальныйЗапас", ТипЧисло);
		Остатки.Колонки.Добавить("МаксимальныйЗапас", ТипЧисло);
	КонецЕсли;
	
	СтруктураИтогов = Новый Структура("Потребность, Поступление, Дефицит", 0, 0, 0);
	
	НачальныйОстаток = 0;
	КонечныйОстаток = 0;
	ОбновитьРодителя = Ложь;
	СтрокаПустойЗаказ = Неопределено;
	Для каждого Строка Из Строки Цикл
		Если Строка.ИмяГруппировки=ИмяГруппировкиЗаказ() И НЕ  ЗначениеЗаполнено(Строка.Заказ) Тогда
			СтрокаПустойЗаказ = Строка;
		КонецЕсли; 
		ИнициализироватьЧисловыеЗначения(Строка, Колонки);
		Если КонечныйОстаток<>0 Тогда
			Строка.НачальныйОстаток = КонечныйОстаток;
		КонецЕсли; 
		Если Строка.Строки.Количество()>0 Тогда
			ИтогиВложенных = РассчитатьИтогиНоменклатураДеньРекурсивно(Строка.Строки, Колонки, Группировать, Остатки);
			ЗаполнитьЗначенияСвойств(Строка, ИтогиВложенных);
		КонецЕсли; 
		Если Строка.Родитель<>Неопределено И (Строка.ИмяГруппировки=ИмяГруппировкиПериод() ИЛИ Строка.ИмяГруппировки=ИмяГруппировкиЗаказ() ИЛИ Строка.ИмяГруппировки=ИмяГруппировкиНоменклатура()) Тогда
			Если Строки.Родитель<>Неопределено И ЗначениеЗаполнено(Строки.Родитель.НачальныйОстаток) И НЕ ЗначениеЗаполнено(НачальныйОстаток) Тогда
				НачальныйОстаток = Строки.Родитель.НачальныйОстаток;
				Строка.НачальныйОстаток = НачальныйОстаток;
			ИначеЕсли ЗначениеЗаполнено(Строка.НачальныйОстаток) И НЕ ЗначениеЗаполнено(НачальныйОстаток) Тогда
				НачальныйОстаток = Строка.НачальныйОстаток;
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.МинимальныйЗапас) Тогда
				ОбновитьОстаток(Остатки, Строка, Строка.МинимальныйЗапас, "МинимальныйЗапас");
				Строка.МинимальныйЗапас = 0;
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.МаксимальныйЗапас) Тогда
				ОбновитьОстаток(Остатки, Строка, Строка.МаксимальныйЗапас, "МаксимальныйЗапас");
				Строка.МаксимальныйЗапас = 0;
			КонецЕсли;
			Строка.КонечныйОстаток = Строка.НачальныйОстаток + Строка.Поступление - Строка.Потребность;
			Если Строка.КонечныйОстаток<0 Тогда
				Строка.Дефицит = -Строка.КонечныйОстаток;
				Строка.КонечныйОстаток = 0;
			Иначе
				Строка.Дефицит = 0;
			КонецЕсли;
			Если Строка.ИмяГруппировки<>ИмяГруппировкиНоменклатура() Тогда
				КонечныйОстаток = Строка.КонечныйОстаток;
			КонецЕсли; 
			ОбновитьРодителя = (Строка.ИмяГруппировки<>ИмяГруппировкиНоменклатура());
		КонецЕсли; 
		ЗаполнитьПредставлениеГруппировки(Строка);
		ПерваяСтрока = Ложь;
	КонецЦикла;
	УчестьПоддержаниеОстаткаНоменклатураДень(Строки, Остатки, КонечныйОстаток);
	СуммаКолонок(Строки, СтруктураИтогов);
	Если ОбновитьРодителя И Строки.Родитель<>Неопределено Тогда
		Строки.Родитель.НачальныйОстаток = НачальныйОстаток;
		Строки.Родитель.КонечныйОстаток = КонечныйОстаток;
	КонецЕсли;
	
	Возврат СтруктураИтогов;
	
КонецФункции

Процедура УчестьПоддержаниеОстаткаНоменклатураДень(Строки, Остатки, КонечныйОстаток)
		
	Если Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	Если Строки[0].ИмяГруппировки<>ИмяГруппировкиПериод() Тогда
		Возврат;
	КонецЕсли;
	
	МинимальныйЗапас = ОстатокИзТаблицы(Остатки, Строки.Родитель.Номенклатура, Строки.Родитель.Характеристика, "МинимальныйЗапас");
	Если МинимальныйЗапас<=0 Тогда
		Возврат;
	КонецЕсли; 
	МаксимальныйЗапас = ОстатокИзТаблицы(Остатки, Строки.Родитель.Номенклатура, Строки.Родитель.Характеристика, "МаксимальныйЗапас");
	
	СтрокаПериод = Строки[Строки.Количество() - 1];
	Если НЕ СтрокаПериод.ЭтоПополнениеЗапасов Тогда
		СтрокаПериод = Строки.Добавить();
		СтрокаПериод.ЭтоПополнениеЗапасов = Истина;
		СтрокаПериод.Представление = НСтр("ru = 'Пополнение запасов'");
		СтрокаПериод.ИмяГруппировки = ИмяГруппировкиПериод();
		СтрокаПериод.Поступление = 0;
		СтрокаПериод.Потребность = 0;
		СтрокаПериод.НачальныйОстаток = КонечныйОстаток;
	КонецЕсли; 
	СтрокаПериод.МинимальныйЗапас = МинимальныйЗапас;
	СтрокаПериод.МаксимальныйЗапас = МаксимальныйЗапас;
	СтрокаПериод.КонечныйОстаток = СтрокаПериод.НачальныйОстаток + СтрокаПериод.Поступление - СтрокаПериод.Потребность;
	Если СтрокаПериод.КонечныйОстаток<=СтрокаПериод.МинимальныйЗапас Тогда
		СтрокаПериод.Дефицит = СтрокаПериод.МаксимальныйЗапас - СтрокаПериод.КонечныйОстаток;
		СтрокаПериод.КонечныйОстаток = СтрокаПериод.МаксимальныйЗапас;
	КонецЕсли; 
	Если СтрокаПериод.Строки.Количество()>0 Тогда
		// По заказам
		СтрокаПустойЗаказ = СтрокаПериод.Строки.Найти(Неопределено, "Заказ");
		Если СтрокаПустойЗаказ=Неопределено Тогда
			СтрокаПустойЗаказ = СтрокаПериод.Строки.Добавить();
			СтрокаПустойЗаказ.ИмяГруппировки = ИмяГруппировкиЗаказ();
			СтрокаПустойЗаказ.Заказ = Неопределено;
			СтрокаПустойЗаказ.Представление = ПредставлениеЗаказа(СтрокаПустойЗаказ.Заказ);
			СтрокаПустойЗаказ.Поступление = 0;
			СтрокаПустойЗаказ.Потребность = 0;
			СтрокаПустойЗаказ.Дефицит = 0;
			СтрокаПустойЗаказ.НачальныйОстаток = КонечныйОстаток;
		КонецЕсли;
		СтрокаПустойЗаказ.МинимальныйЗапас = МинимальныйЗапас;
		СтрокаПустойЗаказ.МаксимальныйЗапас = МаксимальныйЗапас;
		СтрокаПустойЗаказ.КонечныйОстаток = СтрокаПустойЗаказ.НачальныйОстаток + СтрокаПустойЗаказ.Поступление - СтрокаПустойЗаказ.Потребность;
		Если СтрокаПустойЗаказ.КонечныйОстаток<=СтрокаПустойЗаказ.МинимальныйЗапас Тогда
			СтрокаПустойЗаказ.Дефицит = СтрокаПустойЗаказ.МаксимальныйЗапас - СтрокаПустойЗаказ.КонечныйОстаток;
			СтрокаПустойЗаказ.КонечныйОстаток = СтрокаПустойЗаказ.МаксимальныйЗапас;
			СтрокаПериод.КонечныйОстаток = СтрокаПустойЗаказ.КонечныйОстаток;
		КонецЕсли;
		СтруктураИтогов = Новый Структура("Потребность, Поступление, Дефицит", 0, 0, 0);
		СуммаКолонок(СтрокаПериод.Строки, СтруктураИтогов);
		ЗаполнитьЗначенияСвойств(СтрокаПериод, СтруктураИтогов);
	КонецЕсли;
	
КонецПроцедуры
 
#КонецОбласти 

#Область ГруппировкаДеньНоменклатура

Функция РассчитатьИтогиДеньНоменклатураРекурсивно(Строки, Колонки, Группировать, Остатки = Неопределено)
	
	Если Остатки=Неопределено Тогда
		ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
		Остатки = Новый ТаблицаЗначений;
		Остатки.Колонки.Добавить("Номенклатура");
		Остатки.Колонки.Добавить("Характеристика");
		Остатки.Колонки.Добавить("ЕдиницаИзмерения");
		Остатки.Колонки.Добавить("Остаток", ТипЧисло);
		Остатки.Колонки.Добавить("МинимальныйЗапас", ТипЧисло);
		Остатки.Колонки.Добавить("МаксимальныйЗапас", ТипЧисло);
	КонецЕсли;
	
	СтруктураИтогов = Новый Структура("Потребность, Поступление, Дефицит", 0, 0, 0);
	
	НачальныйОстаток = 0;
	КонечныйОстаток = 0;
	ОбновитьРодителя = Ложь;
	ПерваяСтрока = Истина;
	СтрокаПустойЗаказ = Неопределено;
	Для каждого Строка Из Строки Цикл
		Если Строка.ИмяГруппировки=ИмяГруппировкиЗаказ() И НЕ  ЗначениеЗаполнено(Строка.Заказ) Тогда
			СтрокаПустойЗаказ = Строка;
		КонецЕсли; 
		ИнициализироватьЧисловыеЗначения(Строка, Колонки);
		Если КонечныйОстаток<>0 Тогда
			Строка.НачальныйОстаток = КонечныйОстаток;
		ИначеЕсли Остатки<>Неопределено И ПерваяСтрока И НЕ ЗначениеЗаполнено(Строка.НачальныйОстаток) Тогда 
			Строка.НачальныйОстаток = ОстатокИзТаблицы(Остатки, Строка.Номенклатура, Строка.Характеристика);
		КонецЕсли; 
		Если Строка.Строки.Количество()>0 Тогда
			ИтогиВложенных = РассчитатьИтогиДеньНоменклатураРекурсивно(Строка.Строки, Колонки, Группировать, Остатки);
			ЗаполнитьЗначенияСвойств(Строка, ИтогиВложенных);
		КонецЕсли; 
		Если Строка.Родитель<>Неопределено И (Строка.ИмяГруппировки=ИмяГруппировкиПериод() ИЛИ Строка.ИмяГруппировки=ИмяГруппировкиЗаказ() ИЛИ Строка.ИмяГруппировки=ИмяГруппировкиНоменклатура()) Тогда
			Если Строки.Родитель<>Неопределено И ЗначениеЗаполнено(Строки.Родитель.НачальныйОстаток) И НЕ ЗначениеЗаполнено(НачальныйОстаток) Тогда
				НачальныйОстаток = Строки.Родитель.НачальныйОстаток;
				Строка.НачальныйОстаток = НачальныйОстаток;
			ИначеЕсли ЗначениеЗаполнено(Строка.НачальныйОстаток) И НЕ ЗначениеЗаполнено(НачальныйОстаток) Тогда
				НачальныйОстаток = Строка.НачальныйОстаток;
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.МинимальныйЗапас) Тогда
				ОбновитьОстаток(Остатки, Строка, Строка.МинимальныйЗапас, "МинимальныйЗапас");
				Строка.МинимальныйЗапас = 0;
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.МаксимальныйЗапас) Тогда
				ОбновитьОстаток(Остатки, Строка, Строка.МаксимальныйЗапас, "МаксимальныйЗапас");
				Строка.МаксимальныйЗапас = 0;
			КонецЕсли;
			Строка.КонечныйОстаток = Строка.НачальныйОстаток + Строка.Поступление - Строка.Потребность;
			Если Строка.КонечныйОстаток<0 Тогда
				Строка.Дефицит = -Строка.КонечныйОстаток;
				Строка.КонечныйОстаток = 0;
			Иначе
				Строка.Дефицит = 0;
			КонецЕсли;
			Если Строка.ИмяГруппировки<>ИмяГруппировкиНоменклатура() Тогда
				КонечныйОстаток = Строка.КонечныйОстаток;
			КонецЕсли; 
			ОбновитьОстаток(Остатки, Строка, Строка.КонечныйОстаток, "Остаток");
			ОбновитьРодителя = (Строка.ИмяГруппировки<>ИмяГруппировкиНоменклатура());
		КонецЕсли; 
		Для каждого КлючИЗначение Из СтруктураИтогов Цикл
			ИзменитьЧисло(СтруктураИтогов[КлючИЗначение.Ключ], Строка[КлючИЗначение.Ключ]);
		КонецЦикла;
		ЗаполнитьПредставлениеГруппировки(Строка);
		ПерваяСтрока = Ложь;
	КонецЦикла;
	УчестьПоддержаниеОстаткаДеньНоменклатура(Строки, Остатки);
	Если ОбновитьРодителя И Строки.Родитель<>Неопределено Тогда
		Строки.Родитель.НачальныйОстаток = НачальныйОстаток;
		Строки.Родитель.КонечныйОстаток = КонечныйОстаток;
	КонецЕсли; 
	
	Возврат СтруктураИтогов;
	
КонецФункции

Процедура УчестьПоддержаниеОстаткаДеньНоменклатура(Строки, Остатки)
		
	Если Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	Если Строки[0].ИмяГруппировки<>ИмяГруппировкиПериод() Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПериод = Строки.Добавить();
	СтрокаПериод.ЭтоПополнениеЗапасов = Истина;
	СтрокаПериод.Представление = НСтр("ru = 'Пополнение запасов'");
	СтрокаПериод.ИмяГруппировки = ИмяГруппировкиПериод();
	СтрокаПериод.Поступление = 0;
	СтрокаПериод.Потребность = 0;
	
	Для каждого СтрокаОстатка Из Остатки Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", СтрокаОстатка.Номенклатура);
		СтруктураОтбора.Вставить("Характеристика", СтрокаОстатка.Характеристика);
		СтрокиНоменклатуры = СтрокаПериод.Строки.НайтиСтроки(СтруктураОтбора);
		Если СтрокиНоменклатуры.Количество()=0 Тогда
			НоваяСтрока = СтрокаПериод.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатка);
			НоваяСтрока.ИмяГруппировки = ИмяГруппировкиНоменклатура();
			НоваяСтрока.Поступление = 0;
			НоваяСтрока.Потребность = 0;
			НоваяСтрока.НачальныйОстаток = СтрокаОстатка.Остаток;
		Иначе
			НоваяСтрока = СтрокиНоменклатуры[0];
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатка, "МинимальныйЗапас, МаксимальныйЗапас");
		НоваяСтрока.КонечныйОстаток = НоваяСтрока.НачальныйОстаток + НоваяСтрока.Поступление - НоваяСтрока.Потребность;
		Если НоваяСтрока.КонечныйОстаток<=СтрокаОстатка.МинимальныйЗапас Тогда
			НоваяСтрока.Дефицит = СтрокаОстатка.МаксимальныйЗапас - НоваяСтрока.КонечныйОстаток;
			НоваяСтрока.КонечныйОстаток = СтрокаОстатка.МаксимальныйЗапас;
		КонецЕсли; 
	КонецЦикла;
	
	Если СтрокаПериод.Строки.Количество()=0 Тогда
		Строки.Удалить(СтрокаПериод);
	Иначе
		СтруктураИтогов = Новый Структура("Потребность, Поступление, Дефицит", 0, 0, 0);
		СуммаКолонок(СтрокаПериод.Строки, СтруктураИтогов);
		ЗаполнитьЗначенияСвойств(СтрокаПериод, СтруктураИтогов);
	КонецЕсли; 
		
КонецПроцедуры

#КонецОбласти

#Область ГруппировкаЗаказНоменклатура

Функция РассчитатьИтогиЗаказНоменклатураРекурсивно(Строки, Колонки, Группировать, Остатки = Неопределено)
	
	Если Остатки=Неопределено Тогда
		ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
		Остатки = Новый ТаблицаЗначений;
		Остатки.Колонки.Добавить("Номенклатура");
		Остатки.Колонки.Добавить("Характеристика");
		Остатки.Колонки.Добавить("ЕдиницаИзмерения");
		Остатки.Колонки.Добавить("Остаток", ТипЧисло);
		Остатки.Колонки.Добавить("МинимальныйЗапас", ТипЧисло);
		Остатки.Колонки.Добавить("МаксимальныйЗапас", ТипЧисло);
	КонецЕсли;
	
	СтруктураИтогов = Новый Структура("Потребность, Поступление, Дефицит", 0, 0, 0);
	
	ОбновитьРодителя = Ложь;
	ПерваяСтрока = Истина;
	СтрокаПустойЗаказ = Неопределено;
	Для каждого Строка Из Строки Цикл
		Если Строка.ИмяГруппировки=ИмяГруппировкиЗаказ() И НЕ ЗначениеЗаполнено(Строка.Заказ) Тогда
			СтрокаПустойЗаказ = Строка;
		КонецЕсли; 
		ИнициализироватьЧисловыеЗначения(Строка, Колонки);
		Если НЕ ЗначениеЗаполнено(Строка.НачальныйОстаток) Тогда 
			Строка.НачальныйОстаток = ОстатокИзТаблицы(Остатки, Строка.Номенклатура, Строка.Характеристика);
		КонецЕсли; 
		Если Строка.Строки.Количество()>0 Тогда
			ИтогиВложенных = РассчитатьИтогиЗаказНоменклатураРекурсивно(Строка.Строки, Колонки, Группировать, Остатки);
			ЗаполнитьЗначенияСвойств(Строка, ИтогиВложенных);
		КонецЕсли; 
		Если Строка.Родитель<>Неопределено И (Строка.ИмяГруппировки=ИмяГруппировкиПериод() ИЛИ Строка.ИмяГруппировки=ИмяГруппировкиЗаказ() ИЛИ Строка.ИмяГруппировки=ИмяГруппировкиНоменклатура()) Тогда
			Если ЗначениеЗаполнено(Строка.МинимальныйЗапас) Тогда
				ОбновитьОстаток(Остатки, Строка, Строка.МинимальныйЗапас, "МинимальныйЗапас");
				Строка.МинимальныйЗапас = 0;
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.МаксимальныйЗапас) Тогда
				ОбновитьОстаток(Остатки, Строка, Строка.МаксимальныйЗапас, "МаксимальныйЗапас");
				Строка.МаксимальныйЗапас = 0;
			КонецЕсли;
			Строка.КонечныйОстаток = Строка.НачальныйОстаток + Строка.Поступление - Строка.Потребность;
			Если Строка.КонечныйОстаток<0 Тогда
				Строка.Дефицит = -Строка.КонечныйОстаток;
				Строка.КонечныйОстаток = 0;
			Иначе
				Строка.Дефицит = 0;
			КонецЕсли;
			ОбновитьОстаток(Остатки, Строка, Строка.КонечныйОстаток, "Остаток");
		КонецЕсли; 
		Для каждого КлючИЗначение Из СтруктураИтогов Цикл
			ИзменитьЧисло(СтруктураИтогов[КлючИЗначение.Ключ], Строка[КлючИЗначение.Ключ]);
		КонецЦикла;
		ЗаполнитьПредставлениеГруппировки(Строка);
		ПерваяСтрока = Ложь;
	КонецЦикла;
	УчестьПоддержаниеОстаткаЗаказНоменклатура(Строки, Остатки);
	
	Возврат СтруктураИтогов;
	
КонецФункции

Процедура УчестьПоддержаниеОстаткаЗаказНоменклатура(Строки, Остатки)
	
	Если Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	Если Строки[0].ИмяГруппировки<>ИмяГруппировкиЗаказ() Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПустойЗаказ = Строки.Добавить();
	СтрокаПустойЗаказ.ЭтоПополнениеЗапасов = Истина;
	СтрокаПустойЗаказ.ИмяГруппировки = ИмяГруппировкиЗаказ();
	СтрокаПустойЗаказ.Заказ = Неопределено;
	СтрокаПустойЗаказ.Представление = НСтр("ru = 'Пополнение запасов'");
	
	Для каждого СтрокаОстатка Из Остатки Цикл
		Если СтрокаОстатка.МинимальныйЗапас<=0 Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", СтрокаОстатка.Номенклатура);
		СтруктураОтбора.Вставить("Характеристика", СтрокаОстатка.Характеристика);
		СтрокиНоменклатуры = СтрокаПустойЗаказ.Строки.НайтиСтроки(СтруктураОтбора);
		Если СтрокиНоменклатуры.Количество()=0 Тогда
			НоваяСтрока = СтрокаПустойЗаказ.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатка);
			НоваяСтрока.ИмяГруппировки = ИмяГруппировкиНоменклатура();
			НоваяСтрока.Поступление = 0;
			НоваяСтрока.Потребность = 0;
		Иначе
			НоваяСтрока = СтрокиНоменклатуры[0];
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатка, "МинимальныйЗапас, МаксимальныйЗапас");
		НоваяСтрока.НачальныйОстаток = СтрокаОстатка.Остаток;
		НоваяСтрока.КонечныйОстаток = НоваяСтрока.НачальныйОстаток + НоваяСтрока.Поступление - НоваяСтрока.Потребность;
		Если НоваяСтрока.КонечныйОстаток<=СтрокаОстатка.МинимальныйЗапас Тогда
			НоваяСтрока.Дефицит = СтрокаОстатка.МаксимальныйЗапас - НоваяСтрока.КонечныйОстаток;
			НоваяСтрока.КонечныйОстаток = СтрокаОстатка.МаксимальныйЗапас;
		КонецЕсли; 
	КонецЦикла;
	
	Если СтрокаПустойЗаказ.Строки.Количество()=0 Тогда
		Строки.Удалить(СтрокаПустойЗаказ);
	Иначе
		СтруктураИтогов = Новый Структура("Потребность, Поступление, Дефицит", 0, 0, 0);
		СуммаКолонок(СтрокаПустойЗаказ.Строки, СтруктураИтогов);
		ЗаполнитьЗначенияСвойств(СтрокаПустойЗаказ, СтруктураИтогов);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область ПараметрыПоступления

Процедура ЗаполнитьПараметрыПоступления(Дерево, Параметры)
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения, СправочникСсылка.КлассификаторЕдиницИзмерения"));
	ЗаполнитьНоменклатуруРекурсивно(Дерево.Строки, ТаблицаНоменклатуры);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.УстановитьПараметр("ДатаЦен", Параметры.Период.ДатаНачала);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаНоменклатуры.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаНоменклатуры.Номенклатура.СпособПополнения КАК СпособПополнения,
	|	ТаблицаНоменклатуры.Номенклатура.СрокПополнения КАК СрокПополнения,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.Номенклатура.СпособПополнения = ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Закупка)
	|			ТОГДА ТаблицаНоменклатуры.Номенклатура.Поставщик
	|		КОГДА ТаблицаНоменклатуры.Номенклатура.СпособПополнения = ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Переработка)
	|			ТОГДА ТаблицаНоменклатуры.Номенклатура.Производитель
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.Номенклатура.СпособПополнения = ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Закупка)
	|			ТОГДА ТаблицаНоменклатуры.Номенклатура.Поставщик
	|		КОГДА ТаблицаНоменклатуры.Номенклатура.СпособПополнения = ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Переработка)
	|			ТОГДА ТаблицаНоменклатуры.Номенклатура.Производитель
	|		КОГДА ТаблицаНоменклатуры.Номенклатура.СпособПополнения = ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Производство)
	|				И НЕ ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Значение
	|				И ФункциональнаяОпцияУчетПоНесколькимСкладам.Значение
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ОсновнойСклад)
	|		КОГДА ТаблицаНоменклатуры.Номенклатура.СпособПополнения = ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Производство)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ОсновноеПодразделение)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Источник
	|ПОМЕСТИТЬ НоменклатураИКонтрагенты
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры,
	|	Константа.ФункциональнаяОпцияУчетПоНесколькимПодразделениям КАК ФункциональнаяОпцияУчетПоНесколькимПодразделениям,
	|	Константа.ФункциональнаяОпцияУчетПоНесколькимСкладам КАК ФункциональнаяОпцияУчетПоНесколькимСкладам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеДоговорыКонтрагента.Контрагент КАК Контрагент,
	|	ОсновныеДоговорыКонтрагента.Договор КАК Договор,
	|	ОсновныеДоговорыКонтрагента.Договор.ВидЦенКонтрагента КАК ВидЦенКонтрагента
	|ПОМЕСТИТЬ ВременнаяТаблицаДоговора
	|ИЗ
	|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|ГДЕ
	|	ОсновныеДоговорыКонтрагента.Организация = &Организация
	|	И ОсновныеДоговорыКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.СПоставщиком)
	|	И ОсновныеДоговорыКонтрагента.Контрагент В
	|			(ВЫБРАТЬ
	|				НоменклатураИКонтрагенты.Поставщик
	|			ИЗ
	|				НоменклатураИКонтрагенты
	|			ГДЕ
	|				НоменклатураИКонтрагенты.СпособПополнения В (ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Закупка), ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Переработка)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураИКонтрагенты.Номенклатура КАК Номенклатура,
	|	НоменклатураИКонтрагенты.Характеристика КАК Характеристика,
	|	НоменклатураИКонтрагенты.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НоменклатураИКонтрагенты.СпособПополнения КАК СпособПополнения,
	|	НоменклатураИКонтрагенты.СрокПополнения КАК СрокПополнения,
	|	НоменклатураИКонтрагенты.Источник КАК Источник,
	|	ЕСТЬNULL(ОсновныеДоговорыКонтрагента.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор,
	|	ЕСТЬNULL(ОсновныеДоговорыКонтрагента.ВидЦенКонтрагента, ЗНАЧЕНИЕ(Справочник.ВидыЦенКонтрагентов.ПустаяСсылка)) КАК ВидЦен,
	|	ЕСТЬNULL(ОсновныеДоговорыКонтрагента.ВидЦенКонтрагента.ВалютаЦены, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК Валюта
	|ПОМЕСТИТЬ НоменклатураПоставщикВидЦен
	|ИЗ
	|	НоменклатураИКонтрагенты КАК НоменклатураИКонтрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаДоговора КАК ОсновныеДоговорыКонтрагента
	|		ПО НоменклатураИКонтрагенты.Поставщик = ОсновныеДоговорыКонтрагента.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ЕдиницыИзмерения.Ссылка) КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ВременнаяТаблицаЕдиницыИзмерения
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО ТаблицаНоменклатуры.Номенклатура = ЕдиницыИзмерения.Владелец
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураПоставщикВидЦен.Номенклатура КАК Номенклатура,
	|	НоменклатураПоставщикВидЦен.Характеристика КАК Характеристика,
	|	НоменклатураПоставщикВидЦен.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НоменклатураПоставщикВидЦен.СпособПополнения КАК СпособПополнения,
	|	НоменклатураПоставщикВидЦен.СрокПополнения КАК СрокПополнения,
	|	НоменклатураПоставщикВидЦен.Источник КАК Источник,
	|	НоменклатураПоставщикВидЦен.Договор КАК Договор,
	|	НоменклатураПоставщикВидЦен.ВидЦен КАК ВидЦен,
	|	НоменклатураПоставщикВидЦен.Валюта КАК Валюта,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА НоменклатураПоставщикВидЦен.ЕдиницаИзмерения = ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения
	|				ТОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена
	|			ИНАЧЕ ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена * ВЫБОР
	|					КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|						ТОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения.Коэффициент
	|					ИНАЧЕ 1
	|				КОНЕЦ / ВЫБОР
	|					КОГДА НоменклатураПоставщикВидЦен.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|							И ВЫРАЗИТЬ(НоменклатураПоставщикВидЦен.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент <> 0
	|						ТОГДА ВЫРАЗИТЬ(НоменклатураПоставщикВидЦен.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	ВЫБОР
	|		КОГДА ПроверкаНаличияЕдиницИзмерения.ЕдиницаИзмерения ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НесколькоЕдиницИзмерения
	|ИЗ
	|	НоменклатураПоставщикВидЦен КАК НоменклатураПоставщикВидЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
	|				&ДатаЦен,
	|				(ВидЦенКонтрагента, Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						НоменклатураПоставщикВидЦен.ВидЦен,
	|						НоменклатураПоставщикВидЦен.Номенклатура,
	|						НоменклатураПоставщикВидЦен.Характеристика
	|					ИЗ
	|						НоменклатураПоставщикВидЦен)) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	|		ПО НоменклатураПоставщикВидЦен.ВидЦен = ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента
	|			И НоменклатураПоставщикВидЦен.Номенклатура = ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура
	|			И НоменклатураПоставщикВидЦен.Характеристика = ЦеныНоменклатурыКонтрагентовСрезПоследних.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаЕдиницыИзмерения КАК ПроверкаНаличияЕдиницИзмерения
	|		ПО НоменклатураПоставщикВидЦен.Номенклатура = ПроверкаНаличияЕдиницИзмерения.Номенклатура";
	ТаблицаПараметров = Запрос.Выполнить().Выгрузить();
	ТаблицаПараметров.Индексы.Добавить("Номенклатура, Характеристика");
	
	Дерево.Колонки.Добавить("СпособПополнения");
	Дерево.Колонки.Добавить("Источник");
	Дерево.Колонки.Добавить("Договор");
	Дерево.Колонки.Добавить("ВидЦен");
	Дерево.Колонки.Добавить("Валюта");
	Дерево.Колонки.Добавить("Цена");
	Дерево.Колонки.Добавить("ДатаПоступления");
	Дерево.Колонки.Добавить("НесколькоЕдиницИзмерения");
	Дерево.Колонки.Добавить("СрокПополнения");
	
	Параметры.Вставить("УчетЦенКонтрагентов", ПолучитьФункциональнуюОпцию("УчетЦенКонтрагентов"));
	Параметры.Вставить("УчетВалютныхОпераций", ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций"));
	Параметры.Вставить("ВалютаУчета", Константы.ВалютаУчета.Получить());
	ЗаполнитьПараметрыНоменклатурыРекурсивно(Дерево.Строки, ТаблицаПараметров, Параметры);
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруРекурсивно(Строки, ТаблицаНоменклатуры)
	
	Для каждого Строка Из Строки Цикл
		Если Строка.ИмяГруппировки=ИмяГруппировкиНоменклатура() Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", Строка.Номенклатура);
			СтруктураОтбора.Вставить("Характеристика", Строка.Характеристика);
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество()=0 Тогда
				НоваяСтрока = ТаблицаНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЕсли;
		ИначеЕсли Строка.Строки.Количество()>0 Тогда 
			ЗаполнитьНоменклатуруРекурсивно(Строка.Строки, ТаблицаНоменклатуры);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыНоменклатурыРекурсивно(Строки, ТаблицаПараметров, Параметры)
	
	Для каждого Строка Из Строки Цикл
		Если Строка.ИмяГруппировки=ИмяГруппировкиНоменклатура() Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", Строка.Номенклатура);
			Если Строка.Характеристика<>Null Тогда
				СтруктураОтбора.Вставить("Характеристика", Строка.Характеристика);
			КонецЕсли; 
			НайденныеСтроки = ТаблицаПараметров.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество()>0 Тогда
				ЗаполнитьЗначенияСвойств(Строка, НайденныеСтроки[0], "СпособПополнения, Источник, Договор, ВидЦен, Валюта, Цена, НесколькоЕдиницИзмерения, СрокПополнения");
			КонецЕсли;
			Если НЕ Параметры.УчетВалютныхОпераций ИЛИ НЕ ЗначениеЗаполнено(Строка.Валюта) Тогда
				Строка.Валюта = Параметры.ВалютаУчета;
			КонецЕсли; 
			Если Строки.Родитель<>Неопределено И Строки.Родитель.ИмяГруппировки=ИмяГруппировкиПериод() Тогда
				СрокПополнения = ?(НайденныеСтроки.Количество()=0, 0, НайденныеСтроки[0].СрокПополнения);
				Если НЕ ЗначениеЗаполнено(Строки.Родитель.Период) Тогда
					Строка.ДатаПоступления =  НачалоДня(Параметры.Период.ДатаНачала) + СрокПополнения * 86400;
				Иначе
					Строка.ДатаПоступления =  Макс(НачалоДня(Параметры.Период.ДатаНачала) + СрокПополнения * 86400, Строки.Родитель.Период);
				КонецЕсли; 
			ИначеЕсли Строки.Родитель<>Неопределено И Строки.Родитель.ИмяГруппировки=ИмяГруппировкиЗаказ() Тогда
				СрокПополнения = ?(НайденныеСтроки.Количество()=0, 0, НайденныеСтроки[0].СрокПополнения);
				Строка.ДатаПоступления = НачалоДня(Параметры.Период.ДатаНачала) + СрокПополнения * 86400;
			ИначеЕсли Параметры.Группировать=ГруппировкаНоменклатура() Тогда 
				Строка.ДатаПоступления = НСтр("ru = '<Авто>'");
			КонецЕсли; 
		ИначеЕсли Строка.ИмяГруппировки=ИмяГруппировкиПериод() Тогда
			Если Строки.Родитель<>Неопределено И Строки.Родитель.ИмяГруппировки=ИмяГруппировкиНоменклатура() Тогда
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Номенклатура", Строки.Родитель.Номенклатура);
				Если Строка.Характеристика<>Null Тогда
					СтруктураОтбора.Вставить("Характеристика", Строки.Родитель.Характеристика);
				КонецЕсли; 
				НайденныеСтроки = ТаблицаПараметров.НайтиСтроки(СтруктураОтбора);
				СрокПополнения = ?(НайденныеСтроки.Количество()=0, 0, НайденныеСтроки[0].СрокПополнения);
				Если НЕ ЗначениеЗаполнено(Строка.Период) Тогда
					Строка.ДатаПоступления = НачалоДня(Параметры.Период.ДатаНачала) + СрокПополнения * 86400;
				Иначе
					Строка.ДатаПоступления =  Макс(НачалоДня(Параметры.Период.ДатаНачала) + СрокПополнения * 86400, Строка.Период);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		Если Строка.Строки.Количество()>0 Тогда
			ЗаполнитьПараметрыНоменклатурыРекурсивно(Строка.Строки, ТаблицаПараметров, Параметры);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти 

#Область Прочее

Процедура ДобавитьОтборПоСоставуЗаказов(Параметры)
		
	НайденныеОтборыЗаказ = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Параметры.Настройки.Отбор, "ЗаказПокупателя");
	МассивЗаказов = Новый Массив;
	Для каждого ЭлементОтбора Из НайденныеОтборыЗаказ Цикл
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли; 
		Если ТипЗнч(ЭлементОтбора.ПравоеЗначение)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			Если ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) И МассивЗаказов.Найти(ЭлементОтбора.ПравоеЗначение)=Неопределено Тогда
				МассивЗаказов.Добавить(ЭлементОтбора.ПравоеЗначение);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение)=Тип("СписокЗначений") Тогда
			Для каждого ЭлементСписка Из ЭлементОтбора.ПравоеЗначение Цикл
				Если ЗначениеЗаполнено(ЭлементСписка.Значение) И МассивЗаказов.Найти(ЭлементСписка.Значение)=Неопределено Тогда
					МассивЗаказов.Добавить(ЭлементСписка.Значение);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	
	НайденныеОтборыПодразделение = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Параметры.Настройки.Отбор, "Подразделение");
	МассивПодразделений = Новый Массив;
	Для каждого ЭлементОтбора Из НайденныеОтборыПодразделение Цикл
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли; 
		Если ТипЗнч(ЭлементОтбора.ПравоеЗначение)=Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
			Если ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) И МассивПодразделений.Найти(ЭлементОтбора.ПравоеЗначение)=Неопределено Тогда
				МассивПодразделений.Добавить(ЭлементОтбора.ПравоеЗначение);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение)=Тип("СписокЗначений") Тогда
			Для каждого ЭлементСписка Из ЭлементОтбора.ПравоеЗначение Цикл
				Если ЗначениеЗаполнено(ЭлементСписка.Значение) И МассивПодразделений.Найти(ЭлементСписка.Значение)=Неопределено Тогда
					МассивПодразделений.Добавить(ЭлементСписка.Значение);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	Если МассивПодразделений.Количество()>0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СтруктурныеЕдиницы", МассивПодразделений);
		Запрос.УстановитьПараметр("ДатаОстатки", ?(НачалоДня(Параметры.Период.ДатаНачала)=НачалоДня(ТекущаяДатаСеанса()), ТекущаяДатаСеанса(), Параметры.Период.ДатаНачала));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатки, ЗаказПокупателя.СтруктурнаяЕдиницаПродажи В (&СтруктурныеЕдиницы)) КАК ЗаказыПокупателейОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыПокупателейОстатки.ЗаказПокупателя";
		Если МассивЗаказов.Количество()=0 Тогда
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Выборка.ЗаказПокупателя) И МассивЗаказов.Найти(Выборка.ЗаказПокупателя)=Неопределено Тогда
					МассивЗаказов.Добавить(Выборка.ЗаказПокупателя);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЗаказыПоПодразделению = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗаказПокупателя");
			НовыйМассивЗаказов = Новый Массив;
			Для каждого ЗаказПокупателя Из МассивЗаказов Цикл
				Если ЗаказыПоПодразделению.Найти(ЗаказПокупателя)=Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				НовыйМассивЗаказов.Добавить(ЗаказПокупателя);
			КонецЦикла;
			МассивЗаказов = НовыйМассивЗаказов;
		КонецЕсли; 
	КонецЕсли; 
	
	Если МассивЗаказов.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	Параметры.Вставить("ОтборЗаказов", МассивЗаказов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказы", МассивЗаказов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка В(&Заказы)
	|	И ЗаказПокупателяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу)
	|	И ЗаказПокупателяЗапасы.Ссылка.ОсновнойВариантКП = ЗаказПокупателяЗапасы.НомерВариантаКП
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяЗапасы.Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателяМатериалыЗаказчика.Номенклатура,
	|	ЗаказПокупателяМатериалыЗаказчика.Характеристика
	|ИЗ
	|	Документ.ЗаказПокупателя.МатериалыЗаказчика КАК ЗаказПокупателяМатериалыЗаказчика
	|ГДЕ
	|	ЗаказПокупателяМатериалыЗаказчика.Ссылка В(&Заказы)
	|	И ЗаказПокупателяМатериалыЗаказчика.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяМатериалыЗаказчика.Характеристика,
	|	ЗаказПокупателяМатериалыЗаказчика.Номенклатура";
	СписокНоменклатуры = Новый СписокЗначений;
	СписокХарактеристик = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
			СписокХарактеристик.Добавить(Выборка.Характеристика);
		Иначе
			СписокНоменклатуры.Добавить(Выборка.Номенклатура);
		КонецЕсли; 	
	КонецЦикла;
	Если СписокНоменклатуры.Количество()=0 И СписокХарактеристик.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	ГруппаОтборов = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(Параметры.Настройки.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	Если СписокНоменклатуры.Количество()>0 Тогда
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Номенклатура", СписокНоменклатуры, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	Если СписокХарактеристик.Количество()>0 Тогда
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Характеристика", СписокХарактеристик, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли; 
	
КонецПроцедуры

Процедура УчестьРазмещенныеЗаказы(ТаблицаРезультат, Параметры)
	
	Для каждого Строка Из ТаблицаРезультат Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Заказ) Тогда
			Строка.Заказ = Неопределено;
		КонецЕсли; 
	КонецЦикла; 
	ТаблицаРезультат.Индексы.Добавить("Номенклатура, Характеристика, Заказ");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаРезультат", ТаблицаРезультат);
	Запрос.УстановитьПараметр("КонецПериода", Параметры.Период.ДатаОкончания);
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Источник.Номенклатура КАК Номенклатура,
	|	Источник.Характеристика КАК Характеристика,
	|	Источник.Заказ КАК ИсточникОбеспечения
	|ПОМЕСТИТЬ ТаблицаИзмерений
	|ИЗ
	|	&ТаблицаРезультат КАК Источник
	|ГДЕ
	|	Источник.Поступление > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИзмерений.Номенклатура КАК Номенклатура,
	|	ТаблицаИзмерений.Характеристика КАК Характеристика,
	|	ТаблицаИзмерений.ИсточникОбеспечения КАК ИсточникОбеспечения
	|ПОМЕСТИТЬ ТаблицаИзмеренийСвернуто
	|ИЗ
	|	ТаблицаИзмерений КАК ТаблицаИзмерений
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаИзмерений.ИсточникОбеспечения,
	|	ТаблицаИзмерений.Характеристика,
	|	ТаблицаИзмерений.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РазмещениеЗаказовОстатки.ИсточникОбеспечения КАК ИсточникОбеспечения,
	|	РазмещениеЗаказовОстатки.Номенклатура КАК Номенклатура,
	|	РазмещениеЗаказовОстатки.Характеристика КАК Характеристика,
	|	РазмещениеЗаказовОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	РазмещениеЗаказовОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.РазмещениеЗаказов.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И (ИсточникОбеспечения, Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						ТаблицаИзмеренийСвернуто.ИсточникОбеспечения,
	|						ТаблицаИзмеренийСвернуто.Номенклатура,
	|						ТаблицаИзмеренийСвернуто.Характеристика
	|					ИЗ
	|						ТаблицаИзмеренийСвернуто)) КАК РазмещениеЗаказовОстатки
	|ГДЕ
	|	РазмещениеЗаказовОстатки.КоличествоОстаток > 0";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураОтбора.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураОтбора.Вставить("Заказ", Выборка.ИсточникОбеспечения);
		ОстатокРаспределения = Выборка.Количество;
		Строки = ТаблицаРезультат.НайтиСтроки(СтруктураОтбора);
		Для каждого Строка Из Строки Цикл
			Если Строка.Поступление<=0 Тогда
				Продолжить;
			КонецЕсли; 
			Распределить = Мин(ОстатокРаспределения, Строка.Поступление);
			Если Строка.Поступление=Распределить Тогда
				Строка.Заказ = Выборка.ЗаказПокупателя;
				Если Параметры.Свойство("ОтборЗаказов") И Параметры.ОтборЗаказов.Найти(Выборка.ЗаказПокупателя)=Неопределено Тогда
					ТаблицаРезультат.Удалить(Строка);
				КонецЕсли; 
			Иначе
				Строка.Поступление = Строка.Поступление - Распределить;
				Если Параметры.Свойство("ОтборЗаказов") И Параметры.ОтборЗаказов.Найти(Выборка.ЗаказПокупателя)=Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				НоваяСтрока = ТаблицаРезультат.Вставить(ТаблицаРезультат.Индекс(Строка));
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Поступление = Распределить;
				НоваяСтрока.Заказ = Выборка.ЗаказПокупателя;
			КонецЕсли;
			ОстатокРаспределения = ОстатокРаспределения - Распределить;
			Если ОстатокРаспределения<=0 Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура УстановитьПараметр(Настройки, ИмяФильтра, Знач Значение)
	
	ПараметрКомпоновки = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяФильтра));
	Если ПараметрКомпоновки=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ПараметрКомпоновки.Значение = Значение;
	ПараметрКомпоновки.Использование = Истина;
	
КонецПроцедуры

Процедура ОбновитьОстаток(Остатки, СтрокаДерева, Значение, ИмяКолонки)
		
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура", СтрокаДерева.Номенклатура);
	СтруктураОтбора.Вставить("Характеристика", СтрокаДерева.Характеристика);
	Строки = Остатки.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		НоваяСтрока = Остатки.Добавить();
		НоваяСтрока.Номенклатура = СтрокаДерева.Номенклатура;
		НоваяСтрока.Характеристика = СтрокаДерева.Характеристика;
		Если Остатки.Колонки.Найти("ЕдиницаИзмерения")<>Неопределено Тогда
			НоваяСтрока.ЕдиницаИзмерения = СтрокаДерева.ЕдиницаИзмерения;
		КонецЕсли; 
	Иначе
		НоваяСтрока = Строки[0];
	КонецЕсли;
	Если Значение<>Неопределено Тогда
		НоваяСтрока[ИмяКолонки] = Значение;
	КонецЕсли; 
	
КонецПроцедуры

Функция ОстатокИзТаблицы(Остатки, Номенклатура, Характеристика, ИмяКолонки = "Остаток")
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	СтруктураОтбора.Вставить("Характеристика", Характеристика);
	Строки = Остатки.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		Возврат 0;
	Иначе
		Возврат Строки[0][ИмяКолонки];
	КонецЕсли; 
	
КонецФункции

Процедура ДобавитьСтрокуДерева(Строки, СтруктураСтрок, Имя, Представление)
	
	НоваяСтрока = Строки.Добавить();
	НоваяСтрока.Представление = Представление;
	НоваяСтрока.ИмяГруппировки = Имя;
	СтруктураСтрок.Вставить(Имя, НоваяСтрока);
	
КонецПроцедуры

Процедура ДобавитьСтрокуЗаказа(СтрокаДерева, СтруктураСтрок, ИмяЭлементаСтруктуры, ИмяИсточник, ИмяПриемник)
	
	Если СтрокаДерева[ИмяИсточник]<>0 Тогда
		СтрокаРекомендации = СтруктураСтрок.Рекомендовано.Строки.Найти(СтрокаДерева.Заказ, "Заказ");
		Если СтрокаРекомендации=Неопределено Тогда
			СтрокаРекомендации = СтруктураСтрок.Рекомендовано.Строки.Добавить();
			СтрокаРекомендации.Заказ = СтрокаДерева.Заказ;
			СтрокаРекомендации.Представление = ПредставлениеЗаказа(СтрокаДерева.Заказ);
			СтрокаРекомендации.ИмяГруппировки = ИмяГруппировкиЗаказРекомендации();
		КонецЕсли; 
		СтрокаЗаказа = СтруктураСтрок[ИмяЭлементаСтруктуры].Строки.Найти(СтрокаДерева.Заказ, "Заказ");
		Если СтрокаЗаказа=Неопределено Тогда
			СтрокаЗаказа = СтруктураСтрок[ИмяЭлементаСтруктуры].Строки.Добавить();
			СтрокаЗаказа.Заказ = СтрокаДерева.Заказ;
			СтрокаЗаказа.Представление = ПредставлениеЗаказа(СтрокаДерева.Заказ);
			СтрокаЗаказа.ИмяГруппировки = ИмяГруппировкиЗаказ();
		КонецЕсли; 
		ИзменитьЧисло(СтрокаЗаказа[ИмяПриемник], СтрокаДерева[ИмяИсточник]);
		ИзменитьЧисло(СтрокаЗаказа.Родитель[ИмяПриемник], СтрокаДерева[ИмяИсточник]);
		ИзменитьЧисло(СтрокаЗаказа.Дефицит, СтрокаДерева[ИмяИсточник]);
	КонецЕсли; 
	
КонецПроцедуры

Функция ПолучитьАктуальныеВидЦенКонтрагента(ДатаНачала, Контрагент)
	
	СписокВидовЦен = Новый СписокЗначений();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента КАК ВидЦенКонтрагента
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(&ДатаНачала, ВидЦенКонтрагента.Владелец = &Контрагент) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	|ГДЕ
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Актуальность";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВидовЦен.Добавить(Выборка.ВидЦенКонтрагента);
	КонецЦикла;
	
	Возврат СписокВидовЦен;
	
КонецФункции

Функция ИмяКолонкиПериод(Дата)
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Возврат "Просрочено";
	КонецЕсли; 
	Возврат "Период" + Формат(Дата, "ДФ=yyyyMMdd");
	
КонецФункции

Процедура ИнициализироватьЧисловыеЗначения(Строка, Колонки)
	
	Для каждого Колонка Из Колонки Цикл
		Если Колонка.ТипЗначения.Типы().Найти(Тип("Число"))=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(Строка[Колонка.Имя]) И ТипЗнч(Строка[Колонка.Имя])<>Тип("Число") Тогда
			Строка[Колонка.Имя] = 0;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ИзменитьЧисло(Значение, Дельта)
	
	Если ТипЗнч(Значение)<>Тип("Число") Тогда
		Значение = 0;
	КонецЕсли;
	Если ТипЗнч(Дельта)<>Тип("Число") Тогда
		Возврат;
	КонецЕсли; 
	Значение = Значение + Дельта;
	
КонецПроцедуры
 
#КонецОбласти 

#Область ФиксированныеСтроки

Функция СпособПополненияЗакупкаПереработка()
	
	Возврат "ЗакупкаПереработка";	
	
КонецФункции 

Функция СпособПополненияЗакупка()
	
	Возврат "Закупка";	
	
КонецФункции 

Функция СпособПополненияПроизводство()
	
	Возврат "Производство";	
	
КонецФункции 

Функция ГруппировкаНоменклатура()
	
	Возврат "Номенклатура";	
	
КонецФункции 

Функция ГруппировкаНоменклатураДень()
	
	Возврат "НоменклатураДень";	
	
КонецФункции 

Функция ГруппировкаДеньНоменклатура()
	
	Возврат "ДеньНоменклатура";	
	
КонецФункции 

Функция ГруппировкаЗаказНоменклатура()
	
	Возврат "ЗаказНоменклатура";	
	
КонецФункции 

Функция ИмяГруппировкиНоменклатура()
	
	Возврат "Номенклатура";	
	
КонецФункции 

Функция ИмяГруппировкиЗаказ()
	
	Возврат "Заказ";	
	
КонецФункции 

Функция ИмяГруппировкиЗаказРекомендации()
	
	Возврат "ЗаказРекомендации";	
	
КонецФункции 

Функция ИмяГруппировкиПериод()
	
	Возврат "Период";	
	
КонецФункции 

Функция ИмяГруппировкиХарактеристика()
	
	Возврат "Характеристика";	
	
КонецФункции 

Функция ИмяГруппировкиЕдиницаИзмерения()
	
	Возврат "ЕдиницаИзмерения";	
	
КонецФункции 

Функция ИмяГруппировкиНачальныйОстаток()
	
	Возврат "НачальныйОстаток";	
	
КонецФункции 

Функция ИмяГруппировкиКонечныйОстаток()
	
	Возврат "КонечныйОстаток";	
	
КонецФункции 

Функция ИмяГруппировкиПоступление()
	
	Возврат "Поступление";	
	
КонецФункции 

Функция ИмяГруппировкиПотребность()
	
	Возврат "Потребность";	
	
КонецФункции 

Функция ИмяГруппировкиМинимальныйЗапас()
	
	Возврат "МинимальныйЗапас";	
	
КонецФункции 

Функция ИмяГруппировкиМаксимальныйЗапас()
	
	Возврат "МаксимальныйЗапас";	
	
КонецФункции 

Функция ИмяГруппировкиРекомендовано()
	
	Возврат "Рекомендовано";	
	
КонецФункции 

#КонецОбласти 

#КонецОбласти 

#КонецЕсли 