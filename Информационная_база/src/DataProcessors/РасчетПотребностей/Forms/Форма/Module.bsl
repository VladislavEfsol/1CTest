
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновитьПараметрыФормы();
	
	ДоступныЗакупки = РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ДобавлениеИзменениеПодсистемыЗакупки");
	ДоступнаПереработка = ПравоДоступа("ИнтерактивноеПроведение", Метаданные.Документы.ОтчетПереработчика)
		И ПолучитьФункциональнуюОпцию("ПередачаСырьяВПереработку");
	ДоступноПроизводство = (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ДобавлениеИзменениеПодсистемыПроизводство"))
		И ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство");
	Если Параметры.Свойство("ТолькоЗакупки") И Параметры.ТолькоЗакупки Тогда
		Если ДоступнаПереработка Тогда
			ОтборСпособПополнения = СпособПополненияЗакупкаПереработка();
		Иначе
			ОтборСпособПополнения = СпособПополненияЗакупка();
		КонецЕсли;
	КонецЕсли;
	
	Обработка = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных = Обработка.ПолучитьМакет("СхемаКомпоновкиДанных");
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ВосстановитьНастройкиОтборов();
	
	ЗаполнитьОписанияПараметров();
	ЗаполнитьОписанияФильтров();
	ОбновитьПоляОтборов();
	ОбновитьМеткиФильтров();
	
	УправлениеФормой();
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНадписьНетДанных;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СформироватьПредставлениеПериодаПотребности();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		СохранитьНастройкиОтборов();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимПриИзменении(Элемент)
	
	Если Режим=2 И Заказы.Количество()=0 Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Нет заказов для отображения'"), , НСтр("ru = 'Сначала следует сформировать заказы на этапе планирование'"), БиблиотекаКартинок.Предупреждение32, СтатусОповещенияПользователя.Информация);
		Режим = 1;
	КонецЕсли;
	
	Если Режим=1 Тогда
		ОтметитьЗаказываемыеРекурсивно(Запасы.ПолучитьЭлементы());
		ТекущаяСтрока = Элементы.Запасы.ТекущиеДанные;
		Если ТекущаяСтрока=Неопределено ИЛИ НЕ ТекущаяСтрока.Показывать Тогда
			ТекущаяСтрока = НайтиСтрокуДереваРекурсивно(Запасы.ПолучитьЭлементы(), "Показывать", Истина);
			Если ТекущаяСтрока<>Неопределено Тогда
				Элементы.Запасы.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	УправлениеФормой(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = ПериодПланирования;
	
	Диалог.Показать(Новый ОписаниеОповещения("ПредставлениеПериодаНажатиеЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатиеЗавершение(НовыйПериод, Параметры) Экспорт
	
	ПериодПланирования = НовыйПериод;
	Если НЕ ЗначениеЗаполнено(ПериодПланирования) Тогда
		ПериодПланирования = ПериодПланированияПоУмолчанию();
	КонецЕсли; 
	СформироватьПредставлениеПериодаПотребности();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПриИзменении(Элемент)
	
	УправлениеФормой(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоЗаказамПриИзменении(Элемент)
	
	УправлениеФормой(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСпособПополненияПриИзменении(Элемент)
	
	УправлениеФормой(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрПриИзменении(Элемент)
	
	ОписаниеФильтра = ОписаниеФильтра(Фильтры, "ИмяЭлемента", Элемент.Имя);
	Если ОписаниеФильтра=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПриИзмененииФильтра(ОписаниеФильтра, ОписаниеФильтра.ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) ИЛИ ТипЗнч(ВыбранноеЗначение)=Тип("Тип") Тогда
		Возврат;
	КонецЕсли; 
	СтандартнаяОбработка = Ложь;
	ОписаниеФильтра = ОписаниеФильтра(Фильтры, "ИмяЭлемента", Элемент.Имя);
	Если ОписаниеФильтра=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПриИзмененииФильтра(ОписаниеФильтра, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииФильтра(ОписаниеФильтра, Значение)
	
	Если Значение=Неопределено И ОписаниеФильтра.ВыборСписка Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Значение)<>Тип("Массив") Тогда 
		МассивЗначений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Значение);
	Иначе
		МассивЗначений = Значение;
	КонецЕсли;
	
	Для каждого ВыбранноеЗначение Из МассивЗначений Цикл
		
		Если ОписаниеФильтра.ЭтоПараметр Тогда
			ОписаниеФильтра.Значение = ВыбранноеЗначение;
			УстановитьПараметр(ОписаниеФильтра.Имя, ОписаниеФильтра.Значение);
		ИначеЕсли НЕ ОписаниеФильтра.ВыборСписка Тогда
			ОписаниеФильтра.Значение = ?(ЗначениеЗаполнено(ВыбранноеЗначение), ВыбранноеЗначение, Неопределено);
			УстановитьФильтр(ОписаниеФильтра.Имя, ОписаниеФильтра.Значение, ОписаниеФильтра.Пользовательский);
		Иначе
			Если ОписаниеТиповСостоитИзТипа(ОписаниеФильтра.Тип, Тип("Булево")) Тогда
				ОписаниеФильтра.Значение = ОписаниеФильтра.ВыбранноеЗначениеБулево;
			Иначе
				Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
					Продолжить;
				КонецЕсли;
				Если ТипЗнч(ОписаниеФильтра.Значение)<>Тип("СписокЗначений") И ОписаниеФильтра.Значение=ВыбранноеЗначение Тогда
					Продолжить;
				КонецЕсли;
				Если ТипЗнч(ОписаниеФильтра.Значение)<>Тип("СписокЗначений") Тогда
					Список = Новый СписокЗначений;
					Если ЗначениеЗаполнено(ОписаниеФильтра.Значение) Тогда
						Список.Добавить(ОписаниеФильтра.Значение);
					КонецЕсли; 
					Список.Добавить(ВыбранноеЗначение);
					ОписаниеФильтра.Значение = Список;
				ИначеЕсли ОписаниеФильтра.Значение.НайтиПоЗначению(ВыбранноеЗначение)=Неопределено Тогда
					ОписаниеФильтра.Значение.Добавить(ВыбранноеЗначение);	
				КонецЕсли;
				Если ЗначениеЗаполнено(ОписаниеФильтра.ВыбранноеЗначение) Тогда
					ОписаниеФильтра.ВыбранноеЗначение = Неопределено;
				КонецЕсли; 
			КонецЕсли;
			УстановитьМеткуИОтбор(ОписаниеФильтра.Имя, ВыбранноеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеДействияПриИзмененииФильтра(ЭтотОбъект, ОписаниеФильтра);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИерархияФильтраНажатие(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяЭлемента = СтрЗаменить(Элемент.Имя, "_Иерархия", "");
	ОписаниеФильтра = ОписаниеФильтра(Фильтры, "ИмяЭлемента", ИмяЭлемента);
	Если ОписаниеФильтра=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭлементПоле = Элементы[ИмяЭлемента];
	Если ЭлементПоле.ВыборГруппИЭлементов=ГруппыИЭлементы.Элементы Тогда
		ЭлементПоле.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		ЭлементПоле.ПодсказкаВвода = ОписаниеФильтра.Заголовок + НСтр("ru = ' (группа)'");
		Элемент.Подсказка = НСтр("ru = 'Используется выбор групп. Нажмите для выбора элементов.'");
		Элемент.Картинка = БиблиотекаКартинок.РежимВыбораГрупп;
	Иначе
		ЭлементПоле.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
		ЭлементПоле.ПодсказкаВвода = ОписаниеФильтра.Заголовок;
		Элемент.Подсказка = НСтр("ru = 'Используется выбор элементов. Нажмите для выбора групп.'");
		Элемент.Картинка = БиблиотекаКартинок.РежимВыбораЭлементов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьПравуюПанельНажатие(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
		
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьПравуюПанельНажатие(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекСтр = Элементы.Запасы.ТекущиеДанные;
	Если ТекСтр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЕдиницаИзмеренияПриИзмененииСервер(ТекСтр.ПолучитьИдентификатор(), ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ЕдиницаИзмеренияПриИзмененииСервер(Идентификатор, НоваяЕдиница)
	
	ТекСтр = Запасы.НайтиПоИдентификатору(Идентификатор);
	СтарыйКоэффициент = ?(ТипЗнч(ТекСтр.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения"), ТекСтр.ЕдиницаИзмерения.Коэффициент, 1);
	Если НЕ ЗначениеЗаполнено(СтарыйКоэффициент) Тогда
		СтарыйКоэффициент = 1;
	КонецЕсли; 
	НовыйКоэффициент = ?(ТипЗнч(НоваяЕдиница)=Тип("СправочникСсылка.ЕдиницыИзмерения"), НоваяЕдиница.Коэффициент, 1);
	Если НЕ ЗначениеЗаполнено(НовыйКоэффициент) Тогда
		НовыйКоэффициент = 1;
	КонецЕсли;
	
	КоэффициентПересчета = СтарыйКоэффициент / НовыйКоэффициент;
	ПересчитатьПоКоэффициентуРекурсивно(ТекСтр, КоэффициентПересчета);
	Если ТекСтр.ПолучитьРодителя()<>Неопределено Тогда
		ПересчитатьИтогиРекурсивно(ТекСтр, "Заказать", ПараметрыФормы, ИтогоСумма);
		ПересчитатьИтогиРекурсивно(ТекСтр, "Дефицит", ПараметрыФормы, ИтогоСумма);
		ПересчитатьИтогиРекурсивно(ТекСтр, "Потребность", ПараметрыФормы, ИтогоСумма);
		ПересчитатьИтогиРекурсивно(ТекСтр, "Поступление", ПараметрыФормы, ИтогоСумма);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьПоКоэффициентуРекурсивно(Строка, КоэффициентПересчета)
	
	Строка.Дефицит = Строка.Дефицит * КоэффициентПересчета;
	Строка.Заказать = Строка.Заказать * КоэффициентПересчета;
	Если Строка.Заказать<>0 Тогда
		Строка.Цена = Строка.Сумма / Строка.Заказать;
	КонецЕсли; 
	Если Группировать=ГруппировкаНоменклатура() Тогда
		Строка.Просрочено = Строка.Просрочено * КоэффициентПересчета;
		ТекущийПериод = ПериодПланирования.ДатаНачала;
		Пока ТекущийПериод<ПериодПланирования.ДатаОкончания Цикл
			ИмяКолонки = ИмяКолонкиПериод(ТекущийПериод);
			Строка[ИмяКолонки] = Строка[ИмяКолонки] * КоэффициентПересчета; 
			ТекущийПериод = ТекущийПериод + 86400;
		КонецЦикла; 
		Строка.Пополнение = Строка.Пополнение * КоэффициентПересчета;
	Иначе
		Строка.НачальныйОстаток = Строка.НачальныйОстаток * КоэффициентПересчета;
		Строка.Потребность = Строка.Потребность * КоэффициентПересчета;
		Строка.Поступление = Строка.Поступление * КоэффициентПересчета;
		Строка.КонечныйОстаток = Строка.КонечныйОстаток * КоэффициентПересчета;
		Строка.МинимальныйЗапас = Строка.МинимальныйЗапас * КоэффициентПересчета;
		Строка.МаксимальныйЗапас = Строка.МаксимальныйЗапас * КоэффициентПересчета;
	КонецЕсли;
	
	Для каждого ПодСтрока Из Строка.ПолучитьЭлементы() Цикл
		ПересчитатьПоКоэффициентуРекурсивно(ПодСтрока, КоэффициентПересчета);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыбранПриИзменении(Элемент)
	
	ТекСтр = Элементы.Запасы.ТекущиеДанные;
	Если ТекСтр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПриОтметкеСтроки(ТекСтр);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОтметкеСтроки(ТекСтр)
	
	Если ТекСтр.Выбран Тогда
		ТекСтр.Заказать = ТекСтр.Дефицит;
	Иначе
		ТекСтр.Заказать = 0;
	КонецЕсли;
	СписокГруппировок = Новый СписокЗначений;
	СписокГруппировок.Добавить(ИмяГруппировкиНоменклатура());
	СписокГруппировок.Добавить(ИмяГруппировкиРекомендовано());
	Если Группировать=ГруппировкаНоменклатура() Тогда
		СписокГруппировок.Добавить(ИмяГруппировкиЗаказРекомендации());
	ИначеЕсли Группировать<>ГруппировкаЗаказНоменклатура() Тогда 
		СписокГруппировок.Добавить(ИмяГруппировкиЗаказ());
	КонецЕсли;
	Если СписокГруппировок.НайтиПоЗначению(ТекСтр.ИмяГруппировки)<>Неопределено Тогда
		ОбработатьИзменениеКоличестваЗаказа(ТекСтр);
	Иначе
		Для каждого Подстрока Из ТекСтр.ПолучитьЭлементы() Цикл
			Если Подстрока.Дефицит<=0 Тогда
				Продолжить;
			КонецЕсли;
			Если Режим=1 И ТекСтр.Выбран И НЕ Подстрока.Показывать Тогда
				Продолжить;
			КонецЕсли; 
			Подстрока.Выбран = ТекСтр.Выбран;
			Если Подстрока.Выбран Тогда
				Подстрока.Заказать = Подстрока.Дефицит;
			Иначе
				Подстрока.Заказать = 0;
			КонецЕсли;
			ОбработатьИзменениеКоличестваЗаказа(Подстрока, Ложь);
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЗаказатьПриИзменении(Элемент)
	
	ТекСтр = Элементы.Запасы.ТекущиеДанные;
	Если ТекСтр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекСтр.Выбран = (ТекСтр.Заказать>0);
	ОбработатьИзменениеКоличестваЗаказа(ТекСтр);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеКоличестваЗаказа(ТекСтр, ОбновлятьРодителя = Истина)
	
	Если ТекСтр.ИмяГруппировки=ИмяГруппировкиНоменклатура() Тогда
		ТекСтр.Сумма = ТекСтр.Заказать * ТекСтр.Цена;
		ПересчитатьСуммуРегл(ТекСтр, ПараметрыФормы, ИтогоСумма);
	КонецЕсли; 
	
	ИмяГруппировкиЗаказ = ?(Группировать=ГруппировкаНоменклатура(), ИмяГруппировкиЗаказРекомендации(), ИмяГруппировкиЗаказ());
	Если ТекСтр.ИмяГруппировки=ИмяГруппировкиЗаказ И ЗначениеЗаполнено(ТекСтр.Заказ) И ТекСтр.Заказать>ТекСтр.Дефицит Тогда
		ТекСтр.Заказать = ТекСтр.Дефицит;
	КонецЕсли; 
	Если ТекСтр.ИмяГруппировки<>ИмяГруппировкиЗаказ И ТекСтр.ПолучитьЭлементы().Количество()>0 Тогда
		ПерваяСтрока = ТекСтр.ПолучитьЭлементы().Получить(0);
		Если ПерваяСтрока.ИмяГруппировки=ИмяГруппировкиПериод() Тогда
			Распределить = ТекСтр.Заказать;
			Для каждого ВложеннаяСтрока Из ТекСтр.ПолучитьЭлементы() Цикл
				Заказать = Мин(Распределить, ВложеннаяСтрока.Дефицит); 
				ВложеннаяСтрока.Заказать = Заказать;
				ЗаполнитьВыбранПоказыватьПоСтроке(ВложеннаяСтрока);
				Распределить = Распределить - Заказать;
				Если ВложеннаяСтрока.ПолучитьЭлементы().Количество()>0 Тогда
					РаспределитьПоЗаказам(ВложеннаяСтрока);
				КонецЕсли; 
			КонецЦикла;
			Если Распределить>0 Тогда
				ПоследняяСтрока = ТекСтр.ПолучитьЭлементы().Получить(ТекСтр.ПолучитьЭлементы().Количество()-1);
				Если ТипЗнч(ПоследняяСтрока.Номенклатура)=Тип("Дата") Тогда
					ПоследняяСтрока = ТекСтр.ПолучитьЭлементы().Добавить();
					ПоследняяСтрока.ИмяГруппировки = ИмяГруппировкиПериод();
					ПоследняяСтрока.Номенклатура = НСтр("ru = 'Пополнение запасов'");
				КонецЕсли; 
				ПоследняяСтрока.Заказать = Распределить;
				ЗаполнитьВыбранПоказыватьПоСтроке(ПоследняяСтрока);
			КонецЕсли; 
		ИначеЕсли ПерваяСтрока.ИмяГруппировки=ИмяГруппировкиЗаказ Тогда
			РаспределитьПоЗаказам(ТекСтр);
		Иначе
			Для каждого ВложеннаяСтрока Из ТекСтр.ПолучитьЭлементы() Цикл
				Если ВложеннаяСтрока.ИмяГруппировки=ИмяГруппировкиРекомендовано() Тогда
					ВложеннаяСтрока.Заказать = ТекСтр.Заказать;
					ЗаполнитьВыбранПоказыватьПоСтроке(ВложеннаяСтрока);
					РаспределитьПоЗаказам(ВложеннаяСтрока);
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;
	
	Если ОбновлятьРодителя Тогда
		ПересчитатьИтогиРекурсивно(ТекСтр, "Заказать", ПараметрыФормы, ИтогоСумма);
	КонецЕсли; 
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСпособПополненияПриИзменении(Элемент)
	
	ТекСтр = Элементы.Запасы.ТекущиеДанные;
	Если ТекСтр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Очистить = Ложь;
	Если (ТекСтр.СпособПополнения=ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Закупка")
		ИЛИ ТекСтр.СпособПополнения=ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Переработка"))
		И ТипЗнч(ТекСтр.Источник)<>Тип("СправочникСсылка.Контрагенты") Тогда
		Очистить = Истина;
		ТекСтр.Источник = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"); 
	ИначеЕсли ТекСтр.СпособПополнения=ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Производство")
		И ТипЗнч(ТекСтр.Источник)<>Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда 
		Очистить = Истина;
		ТекСтр.Источник = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка"); 
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекСтр.СпособПополнения) Тогда 
		Очистить = Истина;
		ТекСтр.Источник = Неопределено;
	КонецЕсли;
	Если Очистить Тогда
		ТекСтр.ВидЦен = Неопределено;	
		ТекСтр.Цена = 0;
		ТекСтр.Сумма = 0;
		Если ТекСтр.СпособПополнения=ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Производство") Тогда
			ТекСтр.Валюта = Неопределено;
		Иначе
			ТекСтр.Валюта = ПараметрыФормы.ВалютаУчета;
		КонецЕсли; 
	КонецЕсли;
	Если ТекСтр.СпособПополнения=ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Закупка")
		ИЛИ ТекСтр.СпособПополнения=ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Переработка") Тогда
		СтруктураПараметров = Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения, СпособПополнения");
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекСтр);
		СтруктураПараметров.Вставить("Дата", ПериодПланирования.ДатаНачала);
		СтруктураПараметров.Вставить("Организация", ОрганизацияИзОтборов(ЭтотОбъект));
		ДополнитьДаннымиНоменклатуры(СтруктураПараметров);
		ЗаполнитьЗначенияСвойств(ТекСтр, СтруктураПараметров, , "Номенклатура, Характеристика, СпособПополнения");
	КонецЕсли; 
	ПересчитатьСумму(ТекСтр);
	
	ЗаменитьПараметрыПоступленияРекурсивно(Запасы.ПолучитьЭлементы(), ТекСтр);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбновитьОграничениеТипаИсточник(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИсточникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ОбновитьОграничениеТипаИсточник(Элемент);
	ТекСтр = Элементы.Запасы.ТекущиеДанные;
	ЗаполнитьСписокВыбораИсточник(ТекСтр);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОграничениеТипаИсточник(Элемент)
	
	ТекСтр = Элементы.Запасы.ТекущиеДанные;
	Если ТекСтр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекСтр.СпособПополнения=ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Закупка")
		ИЛИ ТекСтр.СпособПополнения=ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Переработка") Тогда
		Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ИначеЕсли ТекСтр.СпособПополнения=ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Производство") Тогда 
		Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы");
	Иначе
		Элемент.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
	КонецЕсли;
	Если ТекСтр.Источник<>Элемент.ОграничениеТипа.ПривестиЗначение(ТекСтр.Источник) Тогда
		ТекСтр.Источник = Элемент.ОграничениеТипа.ПривестиЗначение(ТекСтр.Источник);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораИсточник(ТекСтр)
	
	Если ТекСтр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекСтр.СпособПополнения<>ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Закупка")
		И ТекСтр.СпособПополнения<>ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Переработка") Тогда
		Возврат;
	КонецЕсли; 	
	СписокКонтрагентов = КонтрагентыПоНоменклатуре(ТекСтр.Номенклатура);
	Элементы.ЗапасыИсточник.СписокВыбора.Очистить();
	Для каждого ЭлементСписка Из СписокКонтрагентов Цикл
		Элементы.ЗапасыИсточник.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтрагентыПоНоменклатуре(Номенклатура)
	
	Результат = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Контрагент КАК Контрагент,
	|	МИНИМУМ(ВложенныйЗапрос.Порядок) КАК Порядок,
	|	МАКСИМУМ(ВложенныйЗапрос.Период) КАК Период
	|ИЗ
	|	(ВЫБРАТЬ
	|		Номенклатура.Поставщик КАК Контрагент,
	|		1 КАК Порядок,
	|		ДАТАВРЕМЯ(1, 1, 1) КАК Период
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура
	|	ГДЕ
	|		Номенклатура.Ссылка = &Номенклатура
	|		И Номенклатура.Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Номенклатура.Производитель,
	|		1,
	|		ДАТАВРЕМЯ(1, 1, 1)
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура
	|	ГДЕ
	|		Номенклатура.Ссылка = &Номенклатура
	|		И Номенклатура.Производитель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.Владелец,
	|		2,
	|		ЦеныНоменклатурыКонтрагентовСрезПоследних.Период
	|	ИЗ
	|		РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
	|				,
	|				Номенклатура = &Номенклатура
	|					И Актуальность) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Период УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Контрагент);	
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗапасыИсточникПриИзменении(Элемент)
	
	ТекСтр = Элементы.Запасы.ТекущиеДанные;
	Если ТекСтр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекСтр.СпособПополнения=ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Закупка")
		ИЛИ ТекСтр.СпособПополнения=ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Переработка") Тогда
		СтруктураПараметров = Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения, СпособПополнения, Источник");
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекСтр);
		СтруктураПараметров.Вставить("Дата", ПериодПланирования.ДатаНачала);
		СтруктураПараметров.Вставить("Организация", ОрганизацияИзОтборов(ЭтотОбъект));
		ДополнитьДаннымиНоменклатуры(СтруктураПараметров);
		ЗаполнитьЗначенияСвойств(ТекСтр, СтруктураПараметров, , "Номенклатура, Характеристика, СпособПополнения");
		ПересчитатьСумму(ТекСтр);
	КонецЕсли;
	
	ЗаменитьПараметрыПоступленияРекурсивно(Запасы.ПолучитьЭлементы(), ТекСтр);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВидЦенПриИзменении(Элемент)
	
	ТекСтр = Элементы.Запасы.ТекущиеДанные;
	Если ТекСтр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтруктураПараметров = Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения, СпособПополнения, Источник, ВидЦен");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекСтр);
	СтруктураПараметров.Вставить("Дата", ПериодПланирования.ДатаНачала);
	СтруктураПараметров.Вставить("Организация", ОрганизацияИзОтборов(ЭтотОбъект));
	ДополнитьДаннымиНоменклатуры(СтруктураПараметров);
	ЗаполнитьЗначенияСвойств(ТекСтр, СтруктураПараметров, , "Номенклатура, Характеристика, СпособПополнения");
	ПересчитатьСумму(ТекСтр);
	
	ЗаменитьПараметрыПоступленияРекурсивно(Запасы.ПолучитьЭлементы(), ТекСтр);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	ТекСтр = Элементы.Запасы.ТекущиеДанные;
	Если ТекСтр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПересчитатьСумму(ТекСтр);
	
	ЗаменитьПараметрыПоступленияРекурсивно(Запасы.ПолучитьЭлементы(), ТекСтр);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	ТекСтр = Элементы.Запасы.ТекущиеДанные;
	Если ТекСтр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекСтр.Заказать=0 Тогда
		ТекСтр.Сумма = 0;
	Иначе
		ТекСтр.Цена = ТекСтр.Сумма / ТекСтр.Заказать;
	КонецЕсли; 
	ПересчитатьСуммуРегл(ТекСтр, ПараметрыФормы, ИтогоСумма);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВалютаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекСтр = Элементы.Запасы.ТекущиеДанные;
	Если ТекСтр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтарыйКурс = ПараметрыФормы.КурсыВалют.Получить(ТекСтр.Валюта);
	Если СтарыйКурс=Неопределено ИЛИ СтарыйКурс=0 Тогда
		СтарыйКурс = 1;
	КонецЕсли; 
	НовыйКурс = ПараметрыФормы.КурсыВалют.Получить(ВыбранноеЗначение);
	Если НовыйКурс=Неопределено ИЛИ НовыйКурс=0 Тогда
		НовыйКурс = 1;
	КонецЕсли;
	ТекСтр.Цена = ТекСтр.Цена * СтарыйКурс / НовыйКурс;
	ТекСтр.Валюта = ВыбранноеЗначение;
	ПересчитатьСумму(ТекСтр);
	
	ЗаменитьПараметрыПоступленияРекурсивно(Запасы.ПолучитьЭлементы(), ТекСтр);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказы

&НаКлиенте
Процедура ЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(Неопределено, Элемент.ДанныеСтроки(ВыбраннаяСтрока).Заказ);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Рассчитать(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(ПериодПланирования) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран период планирования'"), , "ПредставлениеПериода", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Группировать) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран вариант группировки'"), , "Группировать", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОтборСпособПополнения) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран способ пополнения'"), , "ОтборСпособПополнения", , Отказ);
	КонецЕсли;
	
	Для каждого СтрокаФильтр Из Фильтры Цикл
		Если НЕ СтрокаФильтр.Обязательный ИЛИ ЗначениеЗаполнено(СтрокаФильтр.Значение) Тогда
			Продолжить;
		КонецЕсли;
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнен обязательный фильтр ""%1""'"), СтрокаФильтр.Заголовок);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , СтрокаФильтр.ИмяЭлемента, , Отказ);
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если Модифицированность Тогда
		СтрВопроса = НСтр("ru = 'Данные изменены. Рассчитать потребности повторно?'");
		Оповещение = Новый ОписаниеОповещения("РассчитатьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, СтрВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		РассчитатьЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЗавершение(Результат, Параметры) Экспорт
	
	Если Результат<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	ЗапуститьФоновоеЗадание();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДефициту(Команда)
	
	ЗаполнитьПоДефицитуРекурсивно(Запасы.ПолучитьЭлементы());
	ОбновитьСуммыРекурсивно(Запасы.ПолучитьЭлементы(), "Сумма");
	ИтогоСумма = ОбновитьСуммыРекурсивно(Запасы.ПолучитьЭлементы(), "СуммаУчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОткрытьОбъект(Команда)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ИмяГруппировки=ИмяГруппировкиНоменклатура() Тогда
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", Новый Структура("Ключ", СтрокаТабличнойЧасти.Номенклатура));
	ИначеЕсли (СтрокаТабличнойЧасти.ИмяГруппировки=ИмяГруппировкиЗаказ() ИЛИ СтрокаТабличнойЧасти.ИмяГруппировки=ИмяГруппировкиЗаказРекомендации()) Тогда
		Если ТипЗнч(СтрокаТабличнойЧасти.Заказ)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ОткрытьФорму("Документ.ЗаказПокупателя.ФормаОбъекта", Новый Структура("Ключ", СтрокаТабличнойЧасти.Заказ));
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Заказ)=Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда 
			ОткрытьФорму("Документ.ЗаказНаПроизводство.ФормаОбъекта", Новый Структура("Ключ", СтрокаТабличнойЧасти.Заказ));
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Заказ)=Тип("ДокументСсылка.ЗаказПоставщику") Тогда 
			ОткрытьФорму("Документ.ЗаказПоставщику.ФормаОбъекта", Новый Структура("Ключ", СтрокаТабличнойЧасти.Заказ));
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФильтр(Команда)
	
	СтруктураОтбора = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ДобавитьФильтрЗавершение", ЭтотОбъект);
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Режим", "ПоляОтбора");
	СтруктураПараметров.Вставить("СуществующийПоля", СписокДобавленныхФильтров());
	СтруктураПараметров.Вставить("АдресСхемы", АдресСхемыКомпоновкиДанных);
	ОбновитьНастройкиВХранилище();
	СтруктураПараметров.Вставить("АдресНастроек", АдресНастроек);
	ОткрытьФорму("ОбщаяФорма.ФормаСпискаПолей", СтруктураПараметров, ЭтаФорма,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтандартныеНастройки(Команда)
	
	УстановитьСтандартныеНастройкиСервер();
	СформироватьПредставлениеПериодаПотребности();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтандартныеНастройкиСервер()
	
	ПериодПланирования = Новый СтандартныйПериод(НачалоДня(ТекущаяДатаСеанса()), КонецДня(ТекущаяДатаСеанса() + 7 * 86400));
	Группировать = ГруппировкаНоменклатура();
	ПоЗаказам = Ложь;
	ТолькоДефицит = Истина;
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	МассивУдаляемыхЭлементов = Новый Массив;
	ЗаполнитьЭлементыРекурсивно(Элементы.ГруппаФильтрЭлементы, МассивУдаляемыхЭлементов);
	Для каждого Элемент Из МассивУдаляемыхЭлементов Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	Фильтры.Очистить();
	ДанныеМеток.Очистить();
	
	ЗаполнитьОписанияПараметров();
	ЗаполнитьОписанияФильтров();
	ОбновитьПоляОтборов();
	ОбновитьМеткиФильтров();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСортироватьПоВозрастанию(Команда)
	
	СортироватьНаСервере("ВОЗР");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСортироватьПоУбыванию(Команда)
	
	СортироватьНаСервере("УБЫВ");
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Для Каждого СтрокаПервыйУровень Из Запасы.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = СтрокаПервыйУровень.ПолучитьИдентификатор();
		Элементы.Запасы.Свернуть(ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Для Каждого СтрокаПервыйУровень Из Запасы.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = СтрокаПервыйУровень.ПолучитьИдентификатор();
		Элементы.Запасы.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаказы(Команда)
	
	Ошибки = Неопределено;
	ПроверитьЗаполнениеПараметровПополненияРекурсивно(Запасы.ПолучитьЭлементы(), Ошибки);
	Если Ошибки<>Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		Возврат;
	КонецЕсли; 
	
	СформироватьЗаказыНаСервере();
	
	Если Заказы.Количество() > 0 Тогда
		Режим = 2;
		УправлениеФормой(Элементы.Режим.Имя);
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаказ(Команда)
	
	ТекСтр = Элементы.Заказы.ТекущиеДанные;
	Если ТекСтр=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ПоказатьЗначение(Неопределено, ТекСтр.Заказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПровести(Команда)
	
	МассивЗаказов = Новый Массив;
	
	Для каждого ВыделеннаяСтрока из Элементы.Заказы.ВыделенныеСтроки Цикл
		
		МассивЗаказов.Добавить(Новый Структура("Индекс, Ссылка", ВыделеннаяСтрока, Заказы.Получить(ВыделеннаяСтрока).Заказ));
		
	КонецЦикла;
	
	РезультатыПроведения = ЗаказыПровестиСервер(МассивЗаказов);
	
	Для каждого РезультатПроведения из РезультатыПроведения Цикл
		
		Заказы.Получить(РезультатПроведения).СтандартнаяКартинка = 1;
		
	КонецЦикла;
	
	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказПоставщику"));
	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказНаПроизводство"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаказыПровестиСервер(ЗаказыДляПроведения)
	
	РезультатыПроведения = Новый Массив;
	
	Для каждого ЗаказДляПроведения из ЗаказыДляПроведения Цикл
	
		ЗаказОбъект = ЗаказДляПроведения.Ссылка.ПолучитьОбъект();
		
		Если НЕ ЗаказОбъект.ПометкаУдаления Тогда
			
			Если ЗаказОбъект.ПроверитьЗаполнение() Тогда
			
				Попытка
					
					ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
					РезультатыПроведения.Добавить(ЗаказДляПроведения.Индекс);
					
				Исключение
					
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Расчет потребностей: проведение заказов'"),
						УровеньЖурналаРегистрации.Ошибка, ЗаказОбъект.Метаданные(), ЗаказОбъект.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатыПроведения;
	
КонецФункции

&НаКлиенте
Процедура ЗаказыОтменаПроведения(Команда)
	
	МассивЗаказов = Новый Массив;
	
	Для каждого ВыделеннаяСтрока из Элементы.Заказы.ВыделенныеСтроки Цикл
		
		МассивЗаказов.Добавить(Новый Структура("Индекс, Ссылка", ВыделеннаяСтрока, Заказы.Получить(ВыделеннаяСтрока).Заказ));
		
	КонецЦикла;
	
	РезультатыОтменыПроведения = ЗаказыОтменаПроведенияСервер(МассивЗаказов);
	
	Для каждого РезультатОтменыПроведения из РезультатыОтменыПроведения Цикл
		
		Заказы.Получить(РезультатОтменыПроведения).СтандартнаяКартинка = 0;
		
	КонецЦикла;
	
	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказПоставщику"));
	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказНаПроизводство"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаказыОтменаПроведенияСервер(ЗаказыДляОтменыПроведения)
	
	РезультатыОтменыПроведения = Новый Массив;
	
	Для каждого ЗаказДляОтменыПроведения из ЗаказыДляОтменыПроведения Цикл
	
		ЗаказОбъект = ЗаказДляОтменыПроведения.Ссылка.ПолучитьОбъект();
		
		Если НЕ ЗаказОбъект.ПометкаУдаления Тогда
			
			Попытка
				
				ЗаказОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				РезультатыОтменыПроведения.Добавить(ЗаказДляОтменыПроведения.Индекс);
				
			Исключение
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Расчет потребностей: отмена проведения заказов'"),
					УровеньЖурналаРегистрации.Ошибка, ЗаказОбъект.Метаданные(), ЗаказОбъект.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатыОтменыПроведения;
	
КонецФункции

&НаКлиенте
Процедура ЗаказыПометитьНаУдаление(Команда)
	
	МассивЗаказов = Новый Массив;
	
	Для каждого ВыделеннаяСтрока из Элементы.Заказы.ВыделенныеСтроки Цикл
		
		МассивЗаказов.Добавить(Новый Структура("Индекс, Ссылка", ВыделеннаяСтрока, Заказы.Получить(ВыделеннаяСтрока).Заказ));
		
	КонецЦикла;
	
	РезультатыПометкиНаУдаление = ЗаказыПометитьНаУдалениеСервер(МассивЗаказов);
	
	Для каждого РезультатПометкиНаУдаление из РезультатыПометкиНаУдаление Цикл
		
		Если Заказы.Получить(РезультатПометкиНаУдаление).СтандартнаяКартинка = 3 Тогда
			
			Заказы.Получить(РезультатПометкиНаУдаление).СтандартнаяКартинка = 0;
			
		Иначе
			
			Заказы.Получить(РезультатПометкиНаУдаление).СтандартнаяКартинка = 3;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказПоставщику"));
	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказНаПроизводство"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаказыПометитьНаУдалениеСервер(ЗаказыДляПометкиНаУдаление)
	
	РезультатыПометкиНаУдаление = Новый Массив;
	
	Для каждого ЗаказДляПометкиНаУдаление из ЗаказыДляПометкиНаУдаление Цикл
	
		ЗаказОбъект = ЗаказДляПометкиНаУдаление.Ссылка.ПолучитьОбъект();
		
		Попытка
			
			ЗаказОбъект.УстановитьПометкуУдаления(НЕ ЗаказОбъект.ПометкаУдаления);
			РезультатыПометкиНаУдаление.Добавить(ЗаказДляПометкиНаУдаление.Индекс);
			
		Исключение
			
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Расчет потребностей: пометка на удаление заказов'"),
					УровеньЖурналаРегистрации.Ошибка, ЗаказОбъект.Метаданные(), ЗаказОбъект.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		КонецПопытки;
			
	КонецЦикла;
	
	Возврат РезультатыПометкиНаУдаление;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьЗаказы(Команда)
	
	ОбновитьЗаказыСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаказыСервер()
	
	МассивЗаказов = Новый Массив;
	Для каждого СтрокаЗаказ Из Заказы Цикл
		МассивЗаказов.Добавить(СтрокаЗаказ.Заказ);
	КонецЦикла;
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЗаказов, "Проведен, ПометкаУдаления");
	
	Для каждого СтрокаЗаказ Из Заказы Цикл
		ТекущийЗаказ = СтрокаЗаказ.Заказ;
		Значения = ЗначенияРеквизитов.Получить(ТекущийЗаказ);
		Если Значения=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Если Значения.Проведен Тогда
			СтрокаЗаказ.СтандартнаяКартинка = 1;
		ИначеЕсли Значения.ПометкаУдаления Тогда
			СтрокаЗаказ.СтандартнаяКартинка = 3;
		Иначе
			СтрокаЗаказ.СтандартнаяКартинка = 0;
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура Заказать(Команда)
	
	ТекСтр = Элементы.Запасы.ТекущиеДанные;
	Если ТекСтр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекСтр.Дефицит<=0 Тогда
		Возврат;
	КонецЕсли; 
	СписокГруппировок = Новый СписокЗначений;
	СписокГруппировок.Добавить(ИмяГруппировкиРекомендовано());
	Если Группировать=ГруппировкаНоменклатура() Тогда
		СписокГруппировок.Добавить(ИмяГруппировкиЗаказРекомендации());
	Иначе 
		СписокГруппировок.Добавить(ИмяГруппировкиЗаказ());
	КонецЕсли;
	Если Группировать=ГруппировкаДеньНоменклатура() Тогда
		СписокГруппировок.Добавить(ИмяГруппировкиПериод());
	КонецЕсли; 
	СписокГруппировок.Добавить(ИмяГруппировкиНоменклатура());
	Если СписокГруппировок.НайтиПоЗначению(ТекСтр.ИмяГруппировки)=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекСтр.Выбран = НЕ ТекСтр.Выбран;
	ПриОтметкеСтроки(ТекСтр);
	
КонецПроцедуры

#КонецОбласти 

#Область УправлениеВнешнимВидомФормы

&НаСервере
Процедура УправлениеФормой(Знач ИмяРеквизита = "")
	
	Если ПустаяСтрока(ИмяРеквизита) Тогда
		// Организация
		ОписаниеФильтра = ОписаниеФильтра(Фильтры, "Имя", "Организация");
		Если ОписаниеФильтра<>Неопределено Тогда
			Элементы[ОписаниеФильтра.ИмяЭлемента].Видимость = (ПараметрыФормы.ИспользоватьНесколькоОрганизаций И НЕ ЗначениеЗаполнено(ПараметрыФормы.Компания));
			Если НЕ ПараметрыФормы.ИспользоватьНесколькоОрганизаций Тогда
				ОписаниеФильтра.Значение = ПредопределенноеЗначение("Справочник.Организации.ОсновнаяОрганизация");
				ОписаниеФильтра.ВыбранноеЗначение = ОписаниеФильтра.Значение;
				УстановитьФильтр(ОписаниеФильтра.Имя, ОписаниеФильтра.Значение);
			ИначеЕсли ЗначениеЗаполнено(ПараметрыФормы.Компания) Тогда
				ОписаниеФильтра.Значение = ПараметрыФормы.Компания;
				ОписаниеФильтра.ВыбранноеЗначение = ПараметрыФормы.Компания;
				УстановитьФильтр(ОписаниеФильтра.Имя, ПараметрыФормы.Компания);
			КонецЕсли; 
		КонецЕсли;
		// Склад
		ОписаниеФильтра = ОписаниеФильтра(Фильтры, "Имя", "Склад");
		Если ОписаниеФильтра<>Неопределено Тогда
			Элементы[ОписаниеФильтра.ИмяЭлемента].Родитель.Видимость = (ПараметрыФормы.УчетПоНесколькимСкладам);
		КонецЕсли;
		// Виды заказов
		ОписаниеФильтра = ОписаниеФильтра(Фильтры, "Имя", "ВидЗаказа");
		Если ОписаниеФильтра<>Неопределено И НЕ ПараметрыФормы.ИспользоватьПодсистемуРаботы Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ОписаниеФильтра.ИмяЭлемента, "ОграничениеТипа", Новый ОписаниеТипов("СправочникСсылка.ВидыЗаказовПокупателей"));
		КонецЕсли;
		Если НЕ ПараметрыФормы.ИспользоватьВидыЗаказовПокупателей И НЕ ПараметрыФормы.ИспользоватьВидыЗаказНарядов Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ОписаниеФильтра.ИмяЭлемента, "Видимость", Ложь);
		КонецЕсли; 
		// Мобильный клиент
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыВыбран", "Видимость", НЕ ПараметрыФормы.ЭтоМобильныйКлиент);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыКонтекстноеМенюЗаказать", "Видимость", ПараметрыФормы.ЭтоМобильныйКлиент);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыГруппаЗаказ", "Видимость", НЕ ПараметрыФормы.ТолькоПросмотр);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Режим", "Видимость", НЕ ПараметрыФормы.ТолькоПросмотр);
	КонецЕсли; 
	
	Если ПустаяСтрока(ИмяРеквизита) ИЛИ ИмяРеквизита=Элементы.Режим.Имя Тогда
		Элементы.Страницы.ТекущаяСтраница = ?(Режим=2, Элементы.СтраницаЗаказы, Элементы.СтраницаЗапасы);
		// Командная панель
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Обновить", "Видимость", Режим=0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьПоДефициту", "Видимость", Режим=0 И НЕ ПараметрыФормы.ТолькоПросмотр);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СформироватьЗаказы", "Видимость", Режим=1);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКнопкиЗаказы", "Видимость", Режим=2);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КнопкиСортировать", "Видимость", Режим=0 ИЛИ Режим=01);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КнопкиСвернутьРазвернуть", "Видимость", Режим=0 ИЛИ Режим=01);
		// Запасы
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыПросрочено", "Видимость", Режим=0 И Группировать=ГруппировкаНоменклатура());
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыГруппаДополнительныеКолонки", "Видимость", Режим=0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыГруппаПараметрыЗакупки", "Видимость", Режим=1);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Запасы", "Подвал", Режим=1);
		// Панель
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаФильтры", "Видимость", Режим=0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоЗаказам", "Доступность", Режим=0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Группировать", "Доступность", Режим=0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПредставлениеПериода", "Доступность", Режим=0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаФормировать", "Видимость", Режим=1);
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяРеквизита) ИЛИ ИмяРеквизита=Элементы.ОтборСпособПополнения.Имя Тогда
		// Контрагент
		ОписаниеФильтра = ОписаниеФильтра(Фильтры, "Имя", "Контрагент");
		Если ОписаниеФильтра<>Неопределено Тогда
			ВидимостьПоля = (ОтборСпособПополнения<>СпособПополненияПроизводство());
			Элементы[ОписаниеФильтра.ИмяЭлемента].Видимость = ВидимостьПоля;
			Если НЕ ВидимостьПоля Тогда
				ПустойКонтрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
				ОписаниеФильтра.Значение = ПустойКонтрагент;
				ОписаниеФильтра.ВыбранноеЗначение = ПустойКонтрагент;
				УстановитьПараметр("Контрагент", ПустойКонтрагент);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяРеквизита) ИЛИ ИмяРеквизита=Элементы.Группировать.Имя Тогда
		Элементы.ПоЗаказам.Видимость = (Группировать<>ГруппировкаЗаказНоменклатура() И ПараметрыФормы.РезервированиеЗапасов);
		Если НЕ Элементы.ПоЗаказам.Видимость Тогда
			ПоЗаказам = Ложь;
		КонецЕсли; 
	КонецЕсли; 	
	
	Если ПустаяСтрока(ИмяРеквизита) ИЛИ ИмяРеквизита=Элементы.ПоЗаказам.Имя Тогда
		Элементы.ОтдельныеДокументыПоЗаказамПокупателя.Доступность = ПоЗаказам ИЛИ Группировать=ГруппировкаЗаказНоменклатура();
		Если ОтдельныеДокументыПоЗаказамПокупателя И НЕ Элементы.ОтдельныеДокументыПоЗаказамПокупателя.Доступность Тогда
			ОтдельныеДокументыПоЗаказамПокупателя = Ложь;
		КонецЕсли; 
	КонецЕсли; 	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СписокГруппировок = Новый СписокЗначений;
	СписокГруппировок.ЗагрузитьЗначения(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("НачальныйОстаток,Поступление,Потребность,МинимальныйЗапас,МаксимальныйЗапас,КонечныйОстаток,Рекомендовано"));
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ВложенныеЭлементы = ПодчиненныеЭлементыРекурсивно(Элементы.Запасы);
	Для каждого Элемент Из ВложенныеЭлементы Цикл
		Если Элемент.Имя="ЗапасыЗаказать" ИЛИ Элемент.Имя="ЗапасыВыбран" Тогда
			Продолжить;
		КонецЕсли;
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, Элемент.Имя);
	КонецЦикла; 
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", СписокГруппировок, ВидСравненияКомпоновкиДанных.ВСписке);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ТекстВторостепеннойНадписи);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	Для каждого Элемент Из ВложенныеЭлементы Цикл
		Если Элемент.Имя="ЗапасыЗаказать" ИЛИ Элемент.Имя="ЗапасыВыбран" Тогда
			Продолжить;
		КонецЕсли;
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, Элемент.Имя);
	КонецЦикла; 
	СписокГруппировок = Новый СписокЗначений;
	СписокГруппировок.Добавить(ИмяГруппировкиЗаказ());
	СписокГруппировок.Добавить(ИмяГруппировкиЗаказРекомендации());
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", СписокГруппировок, ВидСравненияКомпоновкиДанных.ВСписке);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПоЗаказам", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ТекстВторостепеннойНадписи);
	
	Если Группировать=ГруппировкаНоменклатура() Тогда
		
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыПросрочено");
		СписокГруппировок = Новый СписокЗначений;
		СписокГруппировок.Добавить(ИмяГруппировкиРекомендовано());
		СписокГруппировок.Добавить(ИмяГруппировкиНоменклатура());
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", СписокГруппировок, ВидСравненияКомпоновкиДанных.ВСписке);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
		
	КонецЕсли; 
	
	// Выбран
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыВыбран");
	СписокГруппировок = Новый СписокЗначений;
	СписокГруппировок.Добавить(ИмяГруппировкиРекомендовано());
	Если Группировать=ГруппировкаНоменклатура() Тогда
		СписокГруппировок.Добавить(ИмяГруппировкиЗаказРекомендации());
	Иначе 
		СписокГруппировок.Добавить(ИмяГруппировкиЗаказ());
	КонецЕсли;
	Если Группировать=ГруппировкаДеньНоменклатура() Тогда
		СписокГруппировок.Добавить(ИмяГруппировкиПериод());
	КонецЕсли; 
	СписокГруппировок.Добавить(ИмяГруппировкиНоменклатура());
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", СписокГруппировок, ВидСравненияКомпоновкиДанных.ВСписке);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.Дефицит", 0, ВидСравненияКомпоновкиДанных.Больше);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветФона", ЦветаСтиля.ЦветФонаПотенциальныхВозможностей);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыВыбран");
	СписокГруппировок = Новый СписокЗначений;
	СписокГруппировок.Добавить(ИмяГруппировкиРекомендовано());
	Если Группировать=ГруппировкаНоменклатура() Тогда
		СписокГруппировок.Добавить(ИмяГруппировкиЗаказРекомендации());
	Иначе 
		СписокГруппировок.Добавить(ИмяГруппировкиЗаказ());
	КонецЕсли; 
	Если Группировать=ГруппировкаДеньНоменклатура() Тогда
		СписокГруппировок.Добавить(ИмяГруппировкиПериод());
	КонецЕсли; 
	СписокГруппировок.Добавить(ИмяГруппировкиНоменклатура());
	ГруппаОтборов = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Запасы.ИмяГруппировки", СписокГруппировок, ВидСравненияКомпоновкиДанных.НеВСписке);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Запасы.Дефицит", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	
	// Заказать
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЗаказать");
	СписокГруппировок = Новый СписокЗначений;
	СписокГруппировок.Добавить(ИмяГруппировкиРекомендовано());
	Если Группировать=ГруппировкаНоменклатура() Тогда
		СписокГруппировок.Добавить(ИмяГруппировкиЗаказРекомендации());
	ИначеЕсли Группировать<>ГруппировкаЗаказНоменклатура() Тогда 
		СписокГруппировок.Добавить(ИмяГруппировкиЗаказ());
	КонецЕсли; 
	СписокГруппировок.Добавить(ИмяГруппировкиНоменклатура());
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", СписокГруппировок, ВидСравненияКомпоновкиДанных.ВСписке);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветФона", ЦветаСтиля.ЦветФонаПотенциальныхВозможностей);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЗаказать");
	СписокГруппировок = Новый СписокЗначений;
	СписокГруппировок.Добавить(ИмяГруппировкиРекомендовано());
	Если Группировать=ГруппировкаНоменклатура() Тогда
		СписокГруппировок.Добавить(ИмяГруппировкиЗаказРекомендации());
	ИначеЕсли Группировать<>ГруппировкаЗаказНоменклатура() Тогда 
		СписокГруппировок.Добавить(ИмяГруппировкиЗаказ());
	КонецЕсли; 
	СписокГруппировок.Добавить(ИмяГруппировкиНоменклатура());
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", СписокГруппировок, ВидСравненияКомпоновкиДанных.НеВСписке);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыХарактеристика");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЕдиницаИзмерения");
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", ИмяГруппировкиНоменклатура(), ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыХарактеристика");
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЕдиницаИзмерения");
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", ИмяГруппировкиНоменклатура(), ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.НесколькоЕдиницИзмерения", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветФона", ЦветаСтиля.ЦветФонаПотенциальныхВозможностей);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЕдиницаИзмерения");
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.НесколькоЕдиницИзмерения", Ложь);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	
	// Параметры поступления
	ВложенныеЭлементы = ПодчиненныеЭлементыРекурсивно(Элементы.Запасы);
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	Для каждого Элемент Из ВложенныеЭлементы Цикл
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, Элемент.Имя);
	КонецЦикла; 
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.Показывать", Ложь);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Режим", 1, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСпособПополнения");
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", ИмяГруппировкиНоменклатура(), ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСпособПополнения");
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", ИмяГруппировкиНоменклатура(), ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветФона", ЦветаСтиля.ЦветФонаПотенциальныхВозможностей);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыИсточник");
	ГруппаОтборов = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Запасы.ИмяГруппировки", ИмяГруппировкиНоменклатура(), ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Запасы.СпособПополнения", Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыИсточник");
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", ИмяГруппировкиНоменклатура(), ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.СпособПополнения", Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветФона", ЦветаСтиля.ЦветФонаПотенциальныхВозможностей);
	
	ИменаЭлементов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ЗапасыВидЦен,ЗапасыЦена,ЗапасыСумма,ЗапасыВалюта");
	СписокСпособовПополнения = Новый СписокЗначений;
	СписокСпособовПополнения.Добавить(Перечисления.СпособыПополненияЗапасов.Закупка);
	СписокСпособовПополнения.Добавить(Перечисления.СпособыПополненияЗапасов.Переработка);
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	Для каждого ИмяЭлемента Из ИменаЭлементов Цикл
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяЭлемента);
	КонецЦикла; 
	ГруппаОтборов = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Запасы.ИмяГруппировки", ИмяГруппировкиНоменклатура(), ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Запасы.СпособПополнения", СписокСпособовПополнения, ВидСравненияКомпоновкиДанных.НеВСписке);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Запасы.Выбран", Ложь);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	Для каждого ИмяЭлемента Из ИменаЭлементов Цикл
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяЭлемента);
	КонецЦикла; 
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", ИмяГруппировкиНоменклатура(), ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.СпособПополнения", СписокСпособовПополнения, ВидСравненияКомпоновкиДанных.ВСписке);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.Выбран", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветФона", ЦветаСтиля.ЦветФонаПотенциальныхВозможностей);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКолонки(ДатаНачала, ДатаОкончания)
	
	// Удаление ранее добавленных элементов.
	КоличествоЭлементов = Элементы.ЗапасыГруппаДополнительныеКолонки.ПодчиненныеЭлементы.Количество();
	Для ии = 1 По КоличествоЭлементов Цикл
		ДобавленныйЭлемент = Элементы.ЗапасыГруппаДополнительныеКолонки.ПодчиненныеЭлементы[0];
		Элементы.Удалить(ДобавленныйЭлемент);
	КонецЦикла; 
	
	МассивДобавляемыеРеквизиты = Новый Массив;
	
	Если Группировать<>ГруппировкаНоменклатура() Тогда
		
		НовыйРеквизит = Новый РеквизитФормы("НачальныйОстаток", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)), "Запасы", НСтр("ru = 'Начальный остаток'"));
		МассивДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
		НовыйРеквизит = Новый РеквизитФормы("Потребность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)), "Запасы", НСтр("ru = 'Потребность'"));
		МассивДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
		НовыйРеквизит = Новый РеквизитФормы("Поступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)), "Запасы", НСтр("ru = 'Поступление'"));
		МассивДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
		НовыйРеквизит = Новый РеквизитФормы("КонечныйОстаток", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)), "Запасы", НСтр("ru = 'Конечный остаток'"));
		МассивДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
	Иначе
		
		// Реквизиты "Период".
		ТекущийПериод = ДатаНачала;
		
		Пока НачалоДня(ТекущийПериод) <= НачалоДня(ДатаОкончания) Цикл
			
			НовыйРеквизит = Новый РеквизитФормы("Период" + Формат(ТекущийПериод, "ДФ=yyyyMMdd"), Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)), "Запасы", Формат(ТекущийПериод, "ДЛФ=D"));
			МассивДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			
			ТекущийПериод = ТекущийПериод + 86400;
			
		КонецЦикла;
		
		НовыйРеквизит = Новый РеквизитФормы("Пополнение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)), "Запасы", НСтр("ru = 'Пополнение запасов'"));
		МассивДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
	КонецЕсли; 
	
	// Удаление ранее добавленных реквизитов и добавление новых реквизитов.
	ИзменитьРеквизиты(МассивДобавляемыеРеквизиты, ДобавленныеРеквизиты.ВыгрузитьЗначения());
	
	// Обновление добавленных реквизитов и элементов.
	ДобавленныеРеквизиты.Очистить();
	
	Для каждого Реквизит из МассивДобавляемыеРеквизиты Цикл
		
		ДобавленныеРеквизиты.Добавить(Реквизит.Путь + "." + Реквизит.Имя, Реквизит.Заголовок);
		
		Если ПустаяСтрока(Реквизит.Заголовок) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Элемент = Элементы.Добавить(Реквизит.Путь + Реквизит.Имя, Тип("ПолеФормы"), Элементы.ЗапасыГруппаДополнительныеКолонки);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = Реквизит.Путь + "." + Реквизит.Имя;
		Элемент.Заголовок = Реквизит.Заголовок;
		Элемент.ТолькоПросмотр = Истина;
		Элемент.Ширина = 8;
		Элемент.ЦветФонаЗаголовка = ЦветаСтиля.ЦветФонаФормы;
		Элемент.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветРамки;
		
	КонецЦикла;
	
	ЭлементЗапасыНачальныйОстаток = Элементы.Найти("ЗапасыНачальныйОстаток");
	Если Группировать<>ГруппировкаНоменклатура() Тогда
		
		Если ЭлементЗапасыНачальныйОстаток=Неопределено Тогда
			Элемент = Элементы.Добавить("ЗапасыМинимальныйЗапас", Тип("ПолеФормы"), Элементы.ЗапасыГруппаДополнительныеКолонки);
		Иначе
			Элемент = Элементы.Вставить("ЗапасыМинимальныйЗапас", Тип("ПолеФормы"), Элементы.ЗапасыГруппаДополнительныеКолонки, ЭлементЗапасыНачальныйОстаток);
		КонецЕсли; 
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = "Запасы.МинимальныйЗапас";
		Элемент.Заголовок = НСтр("ru = 'Мин. запас'");
		Элемент.ТолькоПросмотр = Истина;
		Элемент.Ширина = 8;
		Элемент.ЦветФонаЗаголовка = ЦветаСтиля.ЦветФонаФормы;
		Элемент.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветРамки;
		
		Если ЭлементЗапасыНачальныйОстаток=Неопределено Тогда
			Элемент = Элементы.Добавить("ЗапасыМаксимальныйЗапас", Тип("ПолеФормы"), Элементы.ЗапасыГруппаДополнительныеКолонки);
		Иначе
			Элемент = Элементы.Вставить("ЗапасыМаксимальныйЗапас", Тип("ПолеФормы"), Элементы.ЗапасыГруппаДополнительныеКолонки, ЭлементЗапасыНачальныйОстаток);
		КонецЕсли; 
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = "Запасы.МаксимальныйЗапас";
		Элемент.Заголовок = НСтр("ru = 'Макс. запас'");
		Элемент.ТолькоПросмотр = Истина;
		Элемент.Ширина = 8;
		Элемент.ЦветФонаЗаголовка = ЦветаСтиля.ЦветФонаФормы;
		Элемент.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветРамки;
		
		Элементы.ЗапасыНоменклатура.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
		Элементы.ЗапасыНоменклатура.РастягиватьПоГоризонтали = Истина;
		Элементы.ЗапасыНоменклатура.АвтоМаксимальнаяШирина = Ложь;
		Элементы.ЗапасыХарактеристика.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
		Элементы.ЗапасыЕдиницаИзмерения.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
		Элементы.ЗапасыГруппаНоменклатура.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
		Элементы.ЗапасыПросрочено.Видимость = Ложь;
		
	Иначе
		
		Элементы.ЗапасыНоменклатура.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
		Элементы.ЗапасыНоменклатура.РастягиватьПоГоризонтали = Неопределено;
		Элементы.ЗапасыНоменклатура.АвтоМаксимальнаяШирина = Истина;
		Элементы.ЗапасыХарактеристика.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
		Элементы.ЗапасыЕдиницаИзмерения.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
		Элементы.ЗапасыГруппаНоменклатура.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
		Элементы.ЗапасыПросрочено.Видимость = Истина;
		
	КонецЕсли; 
	
	// Установка условного оформления.
	УстановитьУсловноеОформление();
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ПараметрыФормы

&НаСервере
Процедура ОбновитьПараметрыФормы()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РезервированиеЗапасов", ПолучитьФункциональнуюОпцию("РезервированиеЗапасов"));
	ПараметрыФормы.Вставить("ИспользоватьНесколькоОрганизаций", ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций"));
	ПараметрыФормы.Вставить("УчетПоНесколькимСкладам", ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам"));
	ПараметрыФормы.Вставить("ИспользоватьПодсистемуРаботы", ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы"));
	ПараметрыФормы.Вставить("УчетЦенКонтрагентов", ПолучитьФункциональнуюОпцию("УчетЦенКонтрагентов"));
	ПараметрыФормы.Вставить("ИспользоватьВидыЗаказовПокупателей", ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей"));
	ПараметрыФормы.Вставить("ИспользоватьВидыЗаказНарядов", ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказНарядов"));
	ПараметрыФормы.Вставить("Компания", Константы.Компания.Получить());
	ПараметрыФормы.Вставить("ВалютаУчета", Константы.ВалютаУчета.Получить());
	ПараметрыФормы.Вставить("ЭтоМобильныйКлиент", ОбщегоНазначения.ЭтоМобильныйКлиент());
	ПараметрыФормы.Вставить("ТолькоПросмотр", НЕ ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПоставщику) И НЕ ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаПроизводство));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКурсыВалют()
	
	ПараметрыФормы.Вставить("КурсыВалют", Новый Соответствие);
	ТаблицаКурсов = РегистрыСведений.КурсыВалют.СрезПоследних(ПериодПланирования.ДатаНачала);
	Для каждого СтрокаКурса Из ТаблицаКурсов Цикл
		ПараметрыФормы.КурсыВалют.Вставить(СтрокаКурса.Валюта, СтрокаКурса.Курс / ?(СтрокаКурса.Кратность=0, 1, СтрокаКурса.Кратность));
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область ПанельНастроекИФильтров

&НаСервереБезКонтекста
Функция ПериодПланированияПоУмолчанию()
	
	Возврат Новый СтандартныйПериод(НачалоДня(ТекущаяДатаСеанса()), КонецДня(ТекущаяДатаСеанса() + 7 * 86400));
	
КонецФункции

&НаСервере
Процедура СохранитьНастройкиОтборов(ИмяТЧДанныеМеток = "ДанныеМеток")
	
	Если ПустаяСтрока(ОтборСпособПополнения) Тогда
		Возврат;
	КонецЕсли; 
	ИмяКлючаОбъекта = СтрЗаменить(ЭтаФорма.ИмяФормы,".","");
	КлючВарианта = ОтборСпособПополнения;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, КлючВарианта+"_Группировать", 	Группировать);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, КлючВарианта+"_ПоЗаказам", 		ПоЗаказам);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, КлючВарианта+"_ТолькоДефицит", 	ТолькоДефицит);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, КлючВарианта+"_Настройки", 		КомпоновщикНастроек.Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиОтборов()
	
	// Инициализация по умолчанию
	ОбновитьСписокВыбораСпособПополнения();
	ОбновитьСписокВыбораГруппировать();
	
	Если ПустаяСтрока(ОтборСпособПополнения) Тогда
		Возврат;
	КонецЕсли;
	
	// Восстановление настроек
	ИмяКлючаОбъекта = СтрЗаменить(ЭтаФорма.ИмяФормы,".","");
	КлючВарианта = ОтборСпособПополнения;
	
	ПериодПланирования = ПериодПланированияПоУмолчанию();
		
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, КлючВарианта+"_Группировать");
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		Группировать = СохраненноеЗначение;
	Иначе
		Группировать = ГруппировкаНоменклатура();
	КонецЕсли;
	
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, КлючВарианта+"_ПоЗаказам");
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		ПоЗаказам = СохраненноеЗначение;
	КонецЕсли;
	
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, КлючВарианта+"_ТолькоДефицит");
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		ТолькоДефицит = СохраненноеЗначение;
	Иначе
		ТолькоДефицит = Истина;
	КонецЕсли;
	
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, КлючВарианта+"_Настройки");
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		Для каждого Параметр Из СохраненноеЗначение.ПараметрыДанных.Элементы Цикл
			Если НЕ Параметр.Использование Тогда
				Продолжить;
			КонецЕсли; 
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Параметр.Параметр, Параметр.Значение); 
		КонецЦикла;
		СкопироватьОтборыРекурсивно(СохраненноеЗначение.Отбор.Элементы, КомпоновщикНастроек.Настройки.Отбор.Элементы);
	КонецЕсли;
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьОтборыРекурсивно(ЭлементыИсточник, ЭлементыПриемник)
	
	ЭлементыПриемник.Очистить();
	
	Для каждого ЭлементОтбора Из ЭлементыИсточник Цикл
		НовыйЭлемент = ЭлементыПриемник.Добавить(Тип(ЭлементОтбора));
		НовыйЭлемент.Использование = ЭлементОтбора.Использование;
		Если ТипЗнч(НовыйЭлемент)=Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НовыйЭлемент.ТипГруппы = ЭлементОтбора.ТипГруппы;
			СкопироватьОтборыРекурсивно(ЭлементОтбора.Элементы, НовыйЭлемент.Элементы);
		Иначе
			НовыйЭлемент.ЛевоеЗначение = ЭлементОтбора.ЛевоеЗначение;
			НовыйЭлемент.ВидСравнения = ЭлементОтбора.ВидСравнения;
			НовыйЭлемент.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораГруппировать()
	
	Элементы.Группировать.СписокВыбора.Очистить();
	Элементы.Группировать.СписокВыбора.Добавить(ГруппировкаНоменклатура(), НСтр("ru = 'Номенклатуре'"));
	Элементы.Группировать.СписокВыбора.Добавить(ГруппировкаНоменклатураДень(), НСтр("ru = 'Номенклатуре и дням'"));	
	Элементы.Группировать.СписокВыбора.Добавить(ГруппировкаДеньНоменклатура(), НСтр("ru = 'Дням и номенклатуре'"));	
	Если ПараметрыФормы.РезервированиеЗапасов Тогда
		Элементы.Группировать.СписокВыбора.Добавить(ГруппировкаЗаказНоменклатура(), НСтр("ru = 'Заказам и номенклатуре'"));
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораСпособПополнения()
	
	Элементы.ОтборСпособПополнения.СписокВыбора.Очистить();
	
	Если ДоступныЗакупки Тогда
		Если ПолучитьФункциональнуюОпцию("ПередачаСырьяВПереработку") И ПравоДоступа("ИнтерактивноеПроведение", Метаданные.Документы.ОтчетПереработчика) Тогда
			Элементы.ОтборСпособПополнения.СписокВыбора.Добавить(СпособПополненияЗакупкаПереработка(), НСтр("ru = 'Закупка и переработка'"));
		Иначе
			Элементы.ОтборСпособПополнения.СписокВыбора.Добавить(СпособПополненияЗакупка(), НСтр("ru = 'Закупка'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ДоступноПроизводство Тогда
		Элементы.ОтборСпособПополнения.СписокВыбора.Добавить(СпособПополненияПроизводство(), НСтр("ru = 'Производство'"));
		Если ДоступныЗакупки Тогда
			Элементы.ОтборСпособПополнения.СписокВыбора.Добавить(СпособПополненияВсе(), НСтр("ru = 'Все'"));
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ОтборСпособПополнения.Видимость = ДоступныЗакупки И ДоступноПроизводство;
	ТолькоЗакупки = ДоступныЗакупки И НЕ ДоступноПроизводство;
	
	ОбновитьСпособПополнения();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСпособПополнения()
	
	Если Элементы.ОтборСпособПополнения.СписокВыбора.НайтиПоЗначению(ОтборСпособПополнения) = Неопределено Тогда
		
		Если ТолькоЗакупки Тогда
			Если ДоступнаПереработка Тогда
				ОтборСпособПополнения = СпособПополненияЗакупкаПереработка();
			Иначе
				ОтборСпособПополнения = СпособПополненияЗакупка();
			КонецЕсли;
		Иначе
			ОтборСпособПополнения = СпособПополненияПроизводство();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеПериодаПотребности()
	
	ДатаКалендаряНачало = НачалоДня(ПериодПланирования.ДатаНачала);
	ДатаКалендаряОкончание = КонецДня(ПериодПланирования.ДатаОкончания);
	
	Если Месяц(ДатаКалендаряНачало) = Месяц(ДатаКалендаряОкончание) Тогда
		
		ДеньРасписанияНачало = Формат(ДатаКалендаряНачало, "ДФ=дд");
		ДеньНеделиРасписанияНачало = ПредставлениеДняНедели(ДатаКалендаряНачало);
		ДеньРасписанияОкончание = Формат(ДатаКалендаряОкончание, "ДФ=дд");
		ДеньНеделиРасписанияОкончание = ПредставлениеДняНедели(ДатаКалендаряНачало);
		
		МесяцРасписания = Формат(ДатаКалендаряНачало, "ДФ=МММ");
		ГодРасписания = Формат(Год(ДатаКалендаряНачало), "ЧГ=0");
		
		ПредставлениеПериода = ДеньНеделиРасписанияНачало + " " + ДеньРасписанияНачало + " - " + ДеньНеделиРасписанияОкончание + " " + ДеньРасписанияОкончание + " " + МесяцРасписания + ", " + ГодРасписания;
		
	Иначе
		
		ДеньРасписанияНачало = Формат(ДатаКалендаряНачало, "ДФ=дд");
		ДеньНеделиРасписанияНачало = ПредставлениеДняНедели(ДатаКалендаряНачало);
		МесяцРасписанияНачало = Формат(ДатаКалендаряНачало, "ДФ=МММ");
		ДеньРасписанияОкончание = Формат(ДатаКалендаряОкончание, "ДФ=дд");
		ДеньНеделиРасписанияОкончание = ПредставлениеДняНедели(ДатаКалендаряОкончание);
		МесяцРасписанияОкончание = Формат(ДатаКалендаряОкончание, "ДФ=МММ");
		
		Если Год(ДатаКалендаряНачало) = Год(ДатаКалендаряОкончание) Тогда
			ГодРасписания = Формат(Год(ДатаКалендаряНачало), "ЧГ=0");
			ПредставлениеПериода = ДеньНеделиРасписанияНачало + " " + ДеньРасписанияНачало + " " + МесяцРасписанияНачало + " - " + ДеньНеделиРасписанияОкончание + " " + ДеньРасписанияОкончание + " " + МесяцРасписанияОкончание + ", " + ГодРасписания;
		Иначе
			ГодРасписанияНачало = Формат(Год(ДатаКалендаряНачало), "ЧГ=0");
			ГодРасписанияОкончание = Формат(Год(ДатаКалендаряОкончание), "ЧГ=0");
			ПредставлениеПериода = ДеньНеделиРасписанияНачало + " " + ДеньРасписанияНачало + " " + МесяцРасписанияНачало + " " + ГодРасписанияНачало + " - " + ДеньНеделиРасписанияОкончание + " " + ДеньРасписанияОкончание + " " + МесяцРасписанияОкончание + " " + ГодРасписанияОкончание;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиВХранилище()
	
	Если ЭтоАдресВременногоХранилища(АдресНастроек) Тогда
		АдресНастроек = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.Настройки, АдресНастроек);
	Иначе
		АдресНастроек = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.Настройки, УникальныйИдентификатор);
	КонецЕсли; 
		
КонецПроцедуры

#КонецОбласти 

#Область ДеревоЗапасов

&НаСервере
Процедура ОбновитьНаСервере(АдресРезультата)
	
	СтруктураРезультат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если ТипЗнч(СтруктураРезультат)<>Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьКурсыВалют();
	Запасы.ПолучитьЭлементы().Очистить();
	ОбновитьКолонки(ПериодПланирования.ДатаНачала, ПериодПланирования.ДатаОкончания);
	ЗаполненностьКолонок = Новый Структура;
	Если Группировать<>ИмяГруппировкиНоменклатура() Тогда
		ЗаполненностьКолонок.Вставить("МинимальныйЗапас", Ложь);
		ЗаполненностьКолонок.Вставить("МаксимальныйЗапас", Ложь);
	КонецЕсли; 
	ЗаполнитьДеревоНаФормеРекурсивно(СтруктураРезультат.Дерево.Строки, Запасы.ПолучитьЭлементы(), ЗаполненностьКолонок);
	Для каждого КлючИЗначение Из ЗаполненностьКолонок Цикл
		Если КлючИЗначение.Значение Тогда
			Продолжить;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Запасы" + КлючИЗначение.Ключ, "Видимость", Ложь);
	КонецЦикла;  
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗапасы;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДеревоНаФормеРекурсивно(Строки, ЭлементыДерева, ЗаполненностьКолонок)
	
	Для каждого Строка Из Строки Цикл
		Группировка = Строка.ИмяГруппировки;
		НоваяСтрока = ЭлементыДерева.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Если НЕ ПустаяСтрока(Строка.Представление) Тогда
			НоваяСтрока.Номенклатура = Строка.Представление;
		ИначеЕсли НЕ ПустаяСтрока(Группировка) Тогда
			НоваяСтрока.Номенклатура = Строка[Группировка];
		Иначе
			НоваяСтрока.Номенклатура = "";
		КонецЕсли;
		Для каждого КлючИЗначение Из ЗаполненностьКолонок Цикл
			Если КлючИЗначение.Значение Тогда
				Продолжить;
			КонецЕсли; 
			Если ЗначениеЗаполнено(Строка[КлючИЗначение.Ключ]) Тогда
				ЗаполненностьКолонок[КлючИЗначение.Ключ] = Истина;
			КонецЕсли; 
		КонецЦикла; 
		Если Строка.Строки.Количество()>0 Тогда
			ЗаполнитьДеревоНаФормеРекурсивно(Строка.Строки, НоваяСтрока.ПолучитьЭлементы(), ЗаполненностьКолонок);
		КонецЕсли; 
	КонецЦикла; 		
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьИтогиРекурсивно(Строка, ИмяКолонки, ПараметрыФормы, ИтогоСумма)
	
	СтрокаРодитель = Строка.ПолучитьРодителя();
	Если СтрокаРодитель=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Итог = 0;
	Для каждого СтрокаДерева Из СтрокаРодитель.ПолучитьЭлементы() Цикл
		Итог = Итог + СтрокаДерева[ИмяКолонки];
	КонецЦикла; 
	СтрокаРодитель[ИмяКолонки] = Итог;
	Если ИмяКолонки="Заказать" Тогда
		Если СтрокаРодитель.ИмяГруппировки=ИмяГруппировкиНоменклатура() Тогда
			СтрокаРодитель.Сумма = СтрокаРодитель.Заказать * СтрокаРодитель.Цена;
			ПересчитатьСуммуРегл(СтрокаРодитель, ПараметрыФормы, ИтогоСумма);
		КонецЕсли; 
		СтрокаРодитель.Выбран = Итог>0;
	КонецЕсли; 
	Если СтрокаРодитель.ПолучитьРодителя()<>Неопределено Тогда
		ПересчитатьИтогиРекурсивно(СтрокаРодитель, ИмяКолонки, ПараметрыФормы, ИтогоСумма);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВыбранПоказыватьПоСтроке(Строка)
		
	Строка.Выбран = (Строка.Заказать>0);
	Если Строка.Выбран Тогда
		Строка.Показывать = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоЗаказам(СтрокаРекомендации)
	
	Распределить = СтрокаРекомендации.Заказать;
	СтрокаСПустымЗаказом = Неопределено;
	Для ии = 1 По СтрокаРекомендации.ПолучитьЭлементы().Количество() Цикл
		Строка = СтрокаРекомендации.ПолучитьЭлементы().Получить(СтрокаРекомендации.ПолучитьЭлементы().Количество() - ии);
		Если НЕ ЗначениеЗаполнено(Строка.Заказ) Тогда
			СтрокаСПустымЗаказом = Строка;
		КонецЕсли; 
		Если Строка.Дефицит<=0 Тогда
			Строка.Заказать = 0;
			Продолжить;
		КонецЕсли; 
		КРаспределению = Мин(Строка.Дефицит, Распределить);
		Распределить = Распределить - КРаспределению;
		Строка.Заказать = КРаспределению;
		ЗаполнитьВыбранПоказыватьПоСтроке(Строка); 
	КонецЦикла;
	
	Если Распределить>0 Тогда
		Если СтрокаСПустымЗаказом=Неопределено Тогда
			СтрокаСПустымЗаказом = СтрокаРекомендации.ПолучитьЭлементы().Добавить();
			СтрокаСПустымЗаказом.ИмяГруппировки = ?(Группировать=ГруппировкаНоменклатура(), ИмяГруппировкиЗаказРекомендации(), ИмяГруппировкиЗаказ());
			СтрокаСПустымЗаказом.Номенклатура = НСтр("ru = '<Не указан>'");
		КонецЕсли; 
		СтрокаСПустымЗаказом.Заказать = Распределить;
		ЗаполнитьВыбранПоказыватьПоСтроке(СтрокаСПустымЗаказом); 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДефицитуРекурсивно(Строки)
	
	Для каждого Строка Из Строки Цикл
		Если Строка.ИмяГруппировки=ИмяГруппировкиНачальныйОстаток() 
			ИЛИ Строка.ИмяГруппировки=ИмяГруппировкиПоступление() 
			ИЛИ Строка.ИмяГруппировки=ИмяГруппировкиПотребность() 
			ИЛИ Строка.ИмяГруппировки=ИмяГруппировкиМинимальныйЗапас() 
			ИЛИ Строка.ИмяГруппировки=ИмяГруппировкиМаксимальныйЗапас() 
			ИЛИ Строка.ИмяГруппировки=ИмяГруппировкиКонечныйОстаток() Тогда
			Продолжить;
		КонецЕсли; 
		Строка.Заказать = Строка.Дефицит;
		Строка.Выбран = (Строка.Заказать>0);
		Строка.Сумма = Строка.Заказать * Строка.Цена;
		ПересчитатьСуммуРегл(Строка, ПараметрыФормы);
		Если Строка.ПолучитьЭлементы().Количество()>0 Тогда
			ЗаполнитьПоДефицитуРекурсивно(Строка.ПолучитьЭлементы());
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОбновитьСуммыРекурсивно(Строки, ИмяКолонки)
	
	Если Строки.Количество()=0 Тогда
		Возврат 0;
	КонецЕсли;
	ГруппировкаНоменклатура = (Строки[0].ИмяГруппировки=ИмяГруппировкиНоменклатура());
	Итог = 0;
	Для каждого Строка Из Строки Цикл
		Если НЕ ГруппировкаНоменклатура Тогда
			Строка[ИмяКолонки] = ОбновитьСуммыРекурсивно(Строка.ПолучитьЭлементы(), ИмяКолонки);
		КонецЕсли; 
		Итог = Итог + Строка[ИмяКолонки];
	КонецЦикла;
	Возврат Итог;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьСумму(ТекСтр)
	
	ТекСтр.Сумма = ТекСтр.Заказать * ТекСтр.Цена;
	ПересчитатьСуммуРегл(ТекСтр, ПараметрыФормы, ИтогоСумма);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммуРегл(ТекСтр, ПараметрыФормы, ИтогоСумма = Неопределено)
	
	КурсЦены = ПараметрыФормы.КурсыВалют.Получить(ТекСтр.Валюта);
	Если КурсЦены=Неопределено ИЛИ КурсЦены=0 Тогда
		КурсЦены = 1;
	КонецЕсли; 
	КурсУчета = ПараметрыФормы.КурсыВалют.Получить(ПараметрыФормы.ВалютаУчета);
	Если КурсУчета=Неопределено ИЛИ КурсУчета=0 Тогда
		КурсУчета = 1;
	КонецЕсли; 
	СуммаУчета = ТекСтр.Сумма * КурсЦены / КурсУчета;
	Разница = СуммаУчета - ТекСтр.СуммаУчета;
	Если ИтогоСумма<>Неопределено Тогда
		ИтогоСумма = ИтогоСумма + Разница;
	КонецЕсли; 
	ТекСтр.СуммаУчета = СуммаУчета;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьДаннымиНоменклатуры(СтруктураПараметров)
	
	Если НЕ СтруктураПараметров.Свойство("ЕдиницаИзмерения") Тогда
		СтруктураПараметров.Вставить("ЕдиницаИзмерения", СтруктураПараметров.Номенклатура.ЕдиницаИзмерения);
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.Свойство("Источник") Тогда
		Если СтруктураПараметров.СпособПополнения=Перечисления.СпособыПополненияЗапасов.Закупка Тогда
			СтруктураПараметров.Вставить("Источник", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Номенклатура, "Поставщик"));
		ИначеЕсли СтруктураПараметров.СпособПополнения=Перечисления.СпособыПополненияЗапасов.Переработка Тогда
			СтруктураПараметров.Вставить("Источник", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Номенклатура, "Производитель"));
		Иначе 
			СтруктураПараметров.Вставить("Источник", Справочники.Контрагенты.ПустаяСсылка());
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ СтруктураПараметров.Свойство("Договор") Тогда
		Если ЗначениеЗаполнено(СтруктураПараметров.Источник) Тогда
			СписокВидовДоговоров = Новый СписокЗначений;
			СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
			СтруктураПараметров.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(СтруктураПараметров.Источник, СтруктураПараметров.Организация, СписокВидовДоговоров));
		Иначе
			СтруктураПараметров.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ СтруктураПараметров.Свойство("ВидЦен") Тогда
		Если ЗначениеЗаполнено(СтруктураПараметров.Договор) Тогда
			СтруктураПараметров.Вставить("ВидЦен", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Договор, "ВидЦенКонтрагента"));
		Иначе
			СтруктураПараметров.Вставить("ВидЦен", Справочники.ВидыЦенКонтрагентов.ПустаяСсылка());
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.Свойство("Валюта") Тогда
		Если ЗначениеЗаполнено(СтруктураПараметров.ВидЦен) Тогда
			СтруктураПараметров.Вставить("Валюта", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.ВидЦен, "ВалютаЦены"));
		Иначе
			СтруктураПараметров.Вставить("Валюта", Константы.ВалютаУчета.Получить());
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.Свойство("Цена") Тогда
		Если ЗначениеЗаполнено(СтруктураПараметров.ВидЦен) Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДатаЦен", СтруктураПараметров.Дата);
			Запрос.УстановитьПараметр("ВидЦен", СтруктураПараметров.ВидЦен);
			Запрос.УстановитьПараметр("Номенклатура", СтруктураПараметров.Номенклатура);
			Запрос.УстановитьПараметр("Характеристика", СтруктураПараметров.Характеристика);
			Запрос.УстановитьПараметр("ЕдиницаИзмерения", СтруктураПараметров.ЕдиницаИзмерения);
			Коэффициент = ?(ТипЗнч(СтруктураПараметров.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения"), 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.ЕдиницаИзмерения, "Коэффициент"), 1);
			Запрос.УстановитьПараметр("Коэффициент", Коэффициент);
			Запрос.УстановитьПараметр("Валюта", СтруктураПараметров.Валюта);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена * ВЫБОР
			|			КОГДА &ЕдиницаИзмерения = ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения
			|				ТОГДА 1
			|			ИНАЧЕ ВЫБОР
			|					КОГДА ТИПЗНАЧЕНИЯ(ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
			|						ТОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения.Коэффициент
			|					ИНАЧЕ 1
			|				КОНЕЦ / ВЫБОР
			|					КОГДА &Коэффициент = 0
			|						ТОГДА 1
			|					ИНАЧЕ &Коэффициент
			|				КОНЕЦ
			|		КОНЕЦ * ВЫБОР
			|			КОГДА &Валюта = ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ВалютаЦены
			|				ТОГДА 1
			|			ИНАЧЕ ВЫБОР
			|					КОГДА КурсыЦены.Кратность * КурсыФормы.Курс = 0
			|						ТОГДА 1
			|					ИНАЧЕ КурсыЦены.Курс / КурсыЦены.Кратность / КурсыФормы.Курс * КурсыФормы.Кратность
			|				КОНЕЦ
			|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
			|			&ДатаЦен,
			|			ВидЦенКонтрагента = &ВидЦен
			|				И Номенклатура = &Номенклатура
			|				И Характеристика = &Характеристика) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаЦен, ) КАК КурсыЦены
			|		ПО ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ВалютаЦены = КурсыЦены.Валюта,
			|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаЦен, Валюта = &Валюта) КАК КурсыФормы";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтруктураПараметров.Вставить("Цена", Выборка.Цена);
			Иначе
				СтруктураПараметров.Вставить("Цена", 0);
			КонецЕсли;
		Иначе
			СтруктураПараметров.Вставить("Цена", 0);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервере
Процедура СортироватьНаСервере(Направление)
	
	ЗапасыДерево = РеквизитФормыВЗначение("Запасы", Тип("ДеревоЗначений"));
	
	Если Элементы.Запасы.ТекущийЭлемент = Элементы.ЗапасыДефицит Тогда
		СтрокаСортировки = "Дефицит " + Направление + ", Номенклатура " + Направление + ", Характеристика " + Направление;
	ИначеЕсли Элементы.Запасы.ТекущийЭлемент = Элементы.ЗапасыЗаказать Тогда
		СтрокаСортировки = "Заказать " + Направление + ", Номенклатура " + Направление + ", Характеристика " + Направление;
	ИначеЕсли Элементы.Запасы.ТекущийЭлемент = Элементы.ЗапасыСумма Тогда
		СтрокаСортировки = "СуммаУчета " + Направление + ", Номенклатура " + Направление + ", Характеристика " + Направление;
	ИначеЕсли Элементы.Найти("ЗапасыПотребность")<>Неопределено И Элементы.Запасы.ТекущийЭлемент = Элементы.ЗапасыПотребность Тогда
		СтрокаСортировки = "Потребность " + Направление + ", Номенклатура " + Направление + ", Характеристика " + Направление;
	ИначеЕсли Элементы.Найти("ЗапасыПоступление")<>Неопределено И Элементы.Запасы.ТекущийЭлемент = Элементы.ЗапасыПоступление Тогда
		СтрокаСортировки = "Поступление " + Направление + ", Номенклатура " + Направление + ", Характеристика " + Направление;
	Иначе
		СтрокаСортировки = "Номенклатура " + Направление + ", Характеристика " + Направление;
	КонецЕсли;
	
	Если Группировать=ГруппировкаНоменклатура() ИЛИ Группировать=ГруппировкаНоменклатураДень() Тогда
		ЗапасыДерево.Строки.Сортировать(СтрокаСортировки, Ложь);
	ИначеЕсли Группировать=ГруппировкаДеньНоменклатура() ИЛИ Группировать=ГруппировкаЗаказНоменклатура() Тогда
		Для каждого СтрокаВерхнегоУровня Из ЗапасыДерево.Строки Цикл
			СтрокаВерхнегоУровня.Строки.Сортировать(СтрокаСортировки, Ложь);
		КонецЦикла; 
	КонецЕсли; 
	
	ЗначениеВРеквизитФормы(ЗапасыДерево, "Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьПараметрыПоступленияРекурсивно(ЭлементыДерева, СтрокаОснование)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура", СтрокаОснование.Номенклатура);
	СтруктураОтбора.Вставить("Характеристика", СтрокаОснование.Характеристика);
	СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаОснование.ЕдиницаИзмерения);
	ВсеПоля = Новый Структура("СпособПополнения, Источник, ВидЦен, Цена, Валюта");
	ЗаполнитьЗначенияСвойств(ВсеПоля, СтрокаОснование);
	Для каждого Элемент Из ЭлементыДерева Цикл
		Если Элемент.ИмяГруппировки<>ИмяГруппировкиНоменклатура() Тогда
			ЗаменитьПараметрыПоступленияРекурсивно(Элемент.ПолучитьЭлементы(), СтрокаОснование);
			Продолжить;
		КонецЕсли; 
		ПоляСовпадают = Истина;
		Для каждого КлючИЗначение Из СтруктураОтбора Цикл
			Если Элемент[КлючИЗначение.Ключ]<>КлючИЗначение.Значение Тогда
				ПоляСовпадают = Ложь;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		Если НЕ ПоляСовпадают Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Элемент, ВсеПоля);
		ПересчитатьСумму(Элемент);
	КонецЦикла; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьЗаказываемыеРекурсивно(ЭлементыДерева)
	
	Для каждого Элемент Из ЭлементыДерева Цикл
		Элемент.Показывать = (Элемент.Заказать>0);
		ОтметитьЗаказываемыеРекурсивно(Элемент.ПолучитьЭлементы())
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтрокуДереваРекурсивно(ЭлементыДерева, Колонка, Значение)
	
	Для каждого Элемент Из ЭлементыДерева Цикл
		Если Элемент[Колонка]=Значение Тогда
			Возврат Элемент;
		КонецЕсли; 
		ТекСтр = НайтиСтрокуДереваРекурсивно(Элемент.ПолучитьЭлементы(), Колонка, Значение);
		Если ТекСтр<>Неопределено Тогда
			Возврат ТекСтр;
		КонецЕсли; 
	КонецЦикла; 
	
КонецФункции

#КонецОбласти 

#Область ФоновоеЗадание

&НаКлиенте
Процедура ЗапуститьФоновоеЗадание()

	РезультатФоновогоЗадания = ЗапуститьФоновоеЗаданиеНаСервере();
	
	Если РезультатФоновогоЗадания=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если РезультатФоновогоЗадания.Статус = "Выполняется" Тогда
		Обработчик = Новый ОписаниеОповещения("ФоновоеЗаданиеВыполнено", ЭтотОбъект, Истина);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатФоновогоЗадания, Обработчик, ПараметрыОжидания);
		ИзменитьДоступностьЭлементовПриФормировании(Ложь);
	ИначеЕсли РезультатФоновогоЗадания.Статус <> "Ошибка" Тогда 
		ОперацииПослеФормирования();
		ИзменитьДоступностьЭлементовПриФормировании(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновоеЗаданиеНаСервере()
	
	Если МонопольныйРежим() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ФоновоеЗаданиеЗапущено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор);
	КонецЕсли;
	
	// Параметры обернем в структуру для их передачи через механизм ДлительныеОперации.
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Период", ПериодПланирования);
	ПараметрыПроцедуры.Вставить("Группировать", Группировать);
	ПараметрыПроцедуры.Вставить("ПоЗаказам", ПоЗаказам);
	ПараметрыПроцедуры.Вставить("СпособПополнения", ОтборСпособПополнения);
	ПараметрыПроцедуры.Вставить("ТолькоДефицит", ТолькоДефицит);
	ПараметрыПроцедуры.Вставить("Настройки", КомпоновщикНастроек.Настройки);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.РасчетПотребностей.ПолучитьДанные",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
		
	ФоновоеЗаданиеАдресРезультата = РезультатФоновогоЗадания.АдресРезультата;
	ФоновоеЗаданиеИдентификатор   = РезультатФоновогоЗадания.ИдентификаторЗадания;
	
	// Если фоновое задание завершилось за время вызова, то данные уже получены
	Если РезультатФоновогоЗадания.Статус = "Ошибка" Тогда
		ПоказатьОшибкиВыполнения(РезультатФоновогоЗадания.КраткоеПредставлениеОшибки);
	ИначеЕсли РезультатФоновогоЗадания.Статус <> "Выполняется" Тогда
		ОбновитьНаСервере(РезультатФоновогоЗадания.АдресРезультата);
	Иначе
		// иначе начнем ожидания завершения фонового задания
		ФоновоеЗаданиеЗапущено = Истина;
	КонецЕсли;
	
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаданиеВыполнено(Результат, ЗагрузитьРезультат) Экспорт
	
	ФоновоеЗаданиеЗапущено = Ложь;
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	Если Результат.Статус = "Выполнено" Тогда 
		ОбновитьНаСервере(Результат.АдресРезультата);
		ОперацииПослеФормирования();
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьОшибкиВыполнения(Результат.КраткоеПредставлениеОшибки);
	КонецЕсли;
	ИзменитьДоступностьЭлементовПриФормировании(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьЭлементовПриФормировании(Доступны)
	
	Элементы.Страницы.ТекущаяСтраница = ?(Доступны, Элементы.СтраницаЗапасы, Элементы.СтраницаОжидание);
	Элементы.Режим.Доступность = Доступны;
	Элементы.ЗаполнитьПоДефициту.Доступность = Доступны;
	Элементы.КнопкиСортировать.Доступность = Доступны;
	Элементы.КнопкиСвернутьРазвернуть.Доступность = Доступны;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПослеФормирования()
	
	Для каждого Строка Из Запасы.ПолучитьЭлементы() Цикл
		Элементы.Запасы.Свернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор)
	
	Если ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
		Возврат;
	КонецЕсли; 
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиВыполнения(ИнформацияОбОшибке)
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставлениеОшибки = НСтр("ru = 'Ошибка при выполнении:'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибки = ПодробноеПредставлениеОшибки;
			ПодробноеПредставлениеОшибки = "";
		КонецЕсли;
	Иначе
		ОписаниеОшибки = ИнформацияОбОшибке;
		ПодробноеПредставлениеОшибки = "";
	КонецЕсли;
	ТекстСообщения = ОписаниеОшибки + ?(ПустаяСтрока(ПодробноеПредставлениеОшибки), "", ": " + ПодробноеПредставлениеОшибки);
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти 

#Область Фильтры

&НаСервере
Функция СписокДобавленныхФильтров()
	
	СписокПолей = Новый СписокЗначений;
	
	Для каждого СтрФильтр Из Фильтры Цикл
		Если СтрФильтр.ЭтоПараметр Тогда
			Продолжить;
		КонецЕсли; 
		СписокПолей.Добавить(СтрФильтр.Имя);
	КонецЦикла;
	
	Возврат СписокПолей;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьФильтрЗавершение(Путь, ДополнительныеДанные) Экспорт
	
	Если ЗначениеЗаполнено(Путь) Тогда
		ДобавитьФильтрСервер(Путь);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФильтрСервер(Путь)
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	ПолеКД = Новый ПолеКомпоновкиДанных(Путь);
	ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
	Если ДоступноеПоле=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ЭлементСКД = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементСКД.ЛевоеЗначение = ПолеКД;
	Если ОписаниеТиповСостоитИзПростогоТипа(ДоступноеПоле.Тип) Тогда
		ЭлементСКД.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		ЭлементСКД.ПравоеЗначение = ДоступноеПоле.Тип.ПривестиЗначение(Неопределено);
	Иначе
		ЭлементСКД.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
		ЭлементСКД.ПравоеЗначение = Новый СписокЗначений;
	КонецЕсли;
	ЭлементСКД.Использование = Ложь;
	ПолеСхемы = ОтчетыУНФ.ПолеСхемы(СхемаКомпоновкиДанных, ПолеКД);
	ДобавитьОписаниеФильтра(ЭлементСКД, ПолеСхемы, ДоступноеПоле, Ложь, Ложь, Истина);
	ОбновитьПоляОтборов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписанияПараметров()
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	Настройки = КомпоновщикНастроек.Настройки;
	Для каждого Параметр Из Настройки.ПараметрыДанных.Элементы Цикл
		Если НЕ ЗначениеЗаполнено(Параметр.ИдентификаторПользовательскойНастройки) 
			ИЛИ Параметр.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Продолжить;
		КонецЕсли;
		ИмяПараметра = Строка(Параметр.Параметр);
		Параметр.Использование = Истина;
		Если НРег(ИмяПараметра)="период" 
			ИЛИ НРег(ИмяПараметра)="датаначала" 
			ИЛИ НРег(ИмяПараметра)="датаокончания" 
			ИЛИ НРег(ИмяПараметра)="датаостатки" 
			ИЛИ НРег(ИмяПараметра)="способпополнения" 
			ИЛИ НРег(ИмяПараметра)="видыценконтрагентов" Тогда
			Продолжить;
		КонецЕсли;
		ПолеСхемы = СхемаКомпоновкиДанных.Параметры.Найти(Параметр.Параметр);
		ДоступныйПараметр = Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(Параметр.Параметр);
		ДобавитьОписаниеФильтра(Параметр, ПолеСхемы, ДоступныйПараметр, Истина);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписанияФильтров()
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	Настройки = КомпоновщикНастроек.Настройки;
	Для каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ТипЗнч(ЭлементОтбора)=Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли; 
		Если НЕ ТипЗнч(ЭлементОтбора.ЛевоеЗначение)=Тип("ПолеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		ПолеСхемы = ОтчетыУНФ.ПолеСхемы(СхемаКомпоновкиДанных, ЭлементОтбора.ЛевоеЗначение);
		ДоступноеПоле = Настройки.ДоступныеПоляОтбора.НайтиПоле(ЭлементОтбора.ЛевоеЗначение);
		ДобавитьОписаниеФильтра(ЭлементОтбора, ПолеСхемы, ДоступноеПоле, Ложь, Ложь);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОписаниеФильтра(ЭлементСКД, ПолеСхемы, ДоступноеПоле, ЭтоПараметр, УказыватьПутьВЗаголовке = Истина, Пользовательский = Ложь)
	
	ИмяПоля = ?(ЭтоПараметр, Строка(ЭлементСКД.Параметр), Строка(ЭлементСКД.ЛевоеЗначение));
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ЭтоПараметр", ЭтоПараметр);
	СтруктураОтбора.Вставить("Имя", ИмяПоля);
	НайденныеФильтры = Фильтры.НайтиСтроки(СтруктураОтбора);
	Если НайденныеФильтры.Количество()>0 Тогда
		// Только обновление значения
		НайденныйФильтр = НайденныеФильтры[0];
		Если ЭтоПараметр Тогда
			Если ЭлементСКД.Использование Тогда
				НайденныйФильтр.Значение = ЭлементСКД.Значение;
			КонецЕсли; 
		Иначе
			Если НЕ ЭлементСКД.Использование И НайденныйФильтр.ВыборСписка Тогда
				НайденныйФильтр.Значение = Новый СписокЗначений;
			ИначеЕсли НЕ ЭлементСКД.Использование И НЕ НайденныйФильтр.ВыборСписка Тогда
				НайденныйФильтр.Значение = Неопределено;
			Иначе
				НайденныйФильтр.Значение = ЭлементСКД.ПравоеЗначение;
			КонецЕсли; 
		КонецЕсли;
		Если НЕ НайденныйФильтр.ВыборСписка Тогда
			НайденныйФильтр.ВыбранноеЗначение = НайденныйФильтр.Значение;
		КонецЕсли; 
		Если ОписаниеТиповСостоитИзТипа(НайденныйФильтр.Тип, Тип("Булево")) Тогда
			НайденныйФильтр.ВыбранноеЗначениеБулево = НайденныйФильтр.Значение;
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	Если ДоступноеПоле=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	НоваяСтрока = Фильтры.Добавить();
	НоваяСтрока.Имя = ИмяПоля;
	НоваяСтрока.ЭтоПараметр = ЭтоПараметр;
	НоваяСтрока.Пользовательский = Пользовательский;
	Если ЭтоПараметр Тогда
		Если ЭлементСКД.Использование Тогда
			НоваяСтрока.Значение = ЭлементСКД.Значение;
		КонецЕсли; 
		НоваяСтрока.Обязательный = ДоступноеПоле.ЗапрещатьНезаполненныеЗначения;
	Иначе
		НоваяСтрока.ВыборСписка = (ЭлементСКД.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
		Если НЕ ЭлементСКД.Использование И НоваяСтрока.ВыборСписка Тогда
			НоваяСтрока.Значение = Новый СписокЗначений;
		ИначеЕсли НЕ ЭлементСКД.Использование И НЕ НоваяСтрока.ВыборСписка Тогда
			НоваяСтрока.Значение = Неопределено;
		Иначе
			НоваяСтрока.Значение = ЭлементСКД.ПравоеЗначение;
		КонецЕсли; 
	КонецЕсли;
	Если НЕ НоваяСтрока.ВыборСписка Тогда
		НоваяСтрока.ВыбранноеЗначение = НоваяСтрока.Значение;
	КонецЕсли; 
	НоваяСтрока.Тип = ДоступноеПоле.ТипЗначения;
	Если ОписаниеТиповСостоитИзТипа(НоваяСтрока.Тип, Тип("Булево")) Тогда
		НоваяСтрока.ВыбранноеЗначениеБулево = НоваяСтрока.Значение;
	КонецЕсли; 
	НоваяСтрока.ИмяЭлемента = СтрЗаменить(ИмяПоля, ".", "_");
	Если УказыватьПутьВЗаголовке Тогда
		ЗаголовокФильтра = ДоступноеПоле.Заголовок;
	Иначе
		ЗаголовокФильтра = Сред(ДоступноеПоле.Заголовок, СтрНайти(ДоступноеПоле.Заголовок, ".", НаправлениеПоиска.СКонца)+1);
	КонецЕсли; 
	НоваяСтрока.Заголовок = ЗаголовокФильтра;
	Если ПолеСхемы<>Неопределено Тогда
		ЗначениеПараметра = ПолеСхемы.ПараметрыРедактирования.Элементы.Найти(Новый ПараметрКомпоновкиДанных("ПараметрыВыбора"));
		Если ЗначениеПараметра<>Неопределено И ЗначениеПараметра.Использование И ЗначениеПараметра.Значение.Количество()>0 Тогда
			НоваяСтрока.ПараметрыВыбора = ЗначениеПараметра.Значение;
		КонецЕсли;  
		ЗначениеПараметра = ПолеСхемы.ПараметрыРедактирования.Элементы.Найти(Новый ПараметрКомпоновкиДанных("ВыборГруппИЭлементов"));
		Если ЗначениеПараметра<>Неопределено И ЗначениеПараметра.Использование Тогда
			НоваяСтрока.ВыборГруппИЭлементов = ГруппыИЭлементыПоИспользованию(ЗначениеПараметра.Значение);
		КонецЕсли; 
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НоваяСтрока.ВыборГруппИЭлементов) Тогда
		НоваяСтрока.ВыборГруппИЭлементов = ГруппыИЭлементы.Авто;
	КонецЕсли; 
	Если ДоступноеПоле.ДоступныеЗначения<>Неопределено И ДоступноеПоле.ДоступныеЗначения.Количество()>0 Тогда
		НоваяСтрока.ДоступныеЗначения = ОбщегоНазначения.СкопироватьРекурсивно(ДоступноеПоле.ДоступныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМеткиФильтров()
	
	ДанныеМеток.Очистить();
	Для каждого СтрокаТаблицы Из Фильтры Цикл
		Если НЕ СтрокаТаблицы.ВыборСписка Тогда
			Продолжить;
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Значение) ИЛИ ТипЗнч(СтрокаТаблицы.Значение)<>Тип("СписокЗначений") Тогда
			Продолжить;
		КонецЕсли; 
		Для каждого Значение Из СтрокаТаблицы.Значение Цикл
			НоваяМетка = ДанныеМеток.Добавить();
			НоваяМетка.Метка = Значение.Значение;
			НоваяМетка.ИмяПоляОтбора = СтрокаТаблицы.Имя;
			НоваяМетка.ИмяГруппыРодителя = ИмяГруппыРодителяОтбора(СтрокаТаблицы.Имя);
		КонецЦикла; 
	КонецЦикла;
	
	Для каждого ОписаниеМетки Из ДанныеМеток Цикл
		НавигационнаяСсылкаФС = РаботаСОтборами.ПолучитьНачалоИмениМетки("ДанныеМеток") + ОписаниеМетки.ПолучитьИдентификатор();
		Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() <> ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
			ПредставлениеМетки = ФорматированнаяСтрокаПредставленияМетки(Лев(Строка(ОписаниеМетки.Метка),16), НавигационнаяСсылкаФС);
		Иначе
			ПредставлениеМетки = ФорматированнаяСтрокаПредставленияМетки(Лев(Строка(ОписаниеМетки.Метка),21), НавигационнаяСсылкаФС);
		КонецЕсли;
		ОписаниеМетки.ПредставлениеМетки = ПредставлениеМетки;
		ОписаниеМетки.ИмяГруппыРодителя = ИмяГруппыРодителяОтбора(ОписаниеМетки.ИмяПоляОтбора);
	КонецЦикла;
	
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппыРодителяОтбора(ИмяОтбора)
	
	Возврат "ГруппаОтбор" + СтрЗаменить(ИмяОтбора, ".", "_");	
	
КонецФункции 

&НаСервере
Функция ФорматированнаяСтрокаПредставленияМетки(НаименованиеМетки, НавигационнаяСсылкаФС)
	
	Цвет = ЦветаСтиля.ТекстВторостепеннойНадписи;
	Шрифт = ШрифтыСтиля.ШрифтПравойПанелиОтборов;
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НаименованиеМетки + " ", Шрифт, Цвет));
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить, , , , НавигационнаяСсылкаФС));
	
	Возврат Новый ФорматированнаяСтрока(КомпонентыФС);
	
КонецФункции

&НаСервере
Процедура ОбновитьПоляОтборов()
	
	Для каждого СтрокаТаблицы Из Фильтры Цикл
		Индекс = Фильтры.Индекс(СтрокаТаблицы);
		ИмяГруппы = ИмяГруппыРодителяОтбора(СтрокаТаблицы.Имя);
		Элемент = Элементы.Найти(ИмяГруппы);
		Если Элемент<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ГруппаПолеОтбора = Элементы.Добавить(ИмяГруппы + "_Горизонтально", Тип("ГруппаФормы"), Элементы.ГруппаФильтрЭлементы);
		ГруппаПолеОтбора.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаПолеОтбора.ОтображатьЗаголовок = Ложь;
		ГруппаПолеОтбора.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаПолеОтбора.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаОтбора = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаФильтрЭлементы);
		ГруппаОтбора.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаОтбора.ОтображатьЗаголовок = Ложь;
		ГруппаОтбора.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаОтбора.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ЭлементОтбора = Элементы.Добавить(СтрокаТаблицы.ИмяЭлемента, Тип("ПолеФормы"), ГруппаПолеОтбора);
		Если ОписаниеТиповСостоитИзТипа(СтрокаТаблицы.Тип, Тип("Булево")) Тогда
			ЭлементОтбора.Вид = ВидПоляФормы.ПолеФлажка;
			ЭлементОтбора.ПутьКДанным = "Фильтры[" + Индекс + "].ВыбранноеЗначениеБулево";
			ЭлементОтбора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		Иначе
			ЭлементОтбора.Вид = ВидПоляФормы.ПолеВвода;
			ЭлементОтбора.ПутьКДанным = "Фильтры[" + Индекс + "].ВыбранноеЗначение";
			ЭлементОтбора.ОграничениеТипа = СтрокаТаблицы.Тип;
			ЭлементОтбора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ЭлементОтбора.ПодсказкаВвода = СтрокаТаблицы.Заголовок;
			ЭлементОтбора.КнопкаОткрытия = Ложь;
			ЭлементОтбора.КнопкаОчистки = НЕ СтрокаТаблицы.ВыборСписка И НЕ СтрокаТаблицы.Обязательный;
			ЭлементОтбора.АвтоОтметкаНезаполненного = СтрокаТаблицы.Обязательный;
			Если ТипЗнч(СтрокаТаблицы.ПараметрыВыбора)=Тип("ПараметрыВыбораКомпоновкиДанных") Тогда
				МассивПараметров = Новый Массив;
				Для каждого ПараметрВыбораКомпоновки Из СтрокаТаблицы.ПараметрыВыбора Цикл
					ПараметрВыбора = Новый ПараметрВыбора(ПараметрВыбораКомпоновки.Имя, ПараметрВыбораКомпоновки.Значение);
					МассивПараметров.Добавить(ПараметрВыбора);
				КонецЦикла; 
				ЭлементОтбора.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
			КонецЕсли;
			Если СтрокаТаблицы.ДоступныеЗначения.Количество()>0 Тогда
				ЭлементОтбора.РежимВыбораИзСписка = Истина;
				Для каждого СтрокаСписка Из СтрокаТаблицы.ДоступныеЗначения Цикл
					ЭлементОтбора.СписокВыбора.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление);
				КонецЦикла; 
			КонецЕсли;
			Если ОтчетыУНФ.ОписаниеТиповСодержитИерархическийТип(СтрокаТаблицы.Тип) 
				И (СтрокаТаблицы.ВыборГруппИЭлементов=ГруппыИЭлементы.ГруппыИЭлементы
				ИЛИ СтрокаТаблицы.ВыборГруппИЭлементов=ГруппыИЭлементы.Авто)Тогда
				ЭлементОтбора.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
				Кнопка = Элементы.Добавить(СтрокаТаблицы.ИмяЭлемента+"_Иерархия", Тип("ДекорацияФормы"), ГруппаПолеОтбора);
				Кнопка.Вид = ВидДекорацииФормы.Картинка;
				Кнопка.Гиперссылка = Истина;
				Кнопка.Ширина = 2;
				Кнопка.Высота = 1;
				Кнопка.РастягиватьПоГоризонтали = Ложь;
				Кнопка.РастягиватьПоВертикали = Ложь;
				Кнопка.Картинка = БиблиотекаКартинок.РежимВыбораЭлементов;
				Кнопка.Подсказка = НСтр("ru = 'Используется выбор элементов'");
				Кнопка.УстановитьДействие("Нажатие", "Подключаемый_ИерархияФильтраНажатие");
			Иначе
				ЭлементОтбора.ВыборГруппИЭлементов = СтрокаТаблицы.ВыборГруппИЭлементов;
			КонецЕсли; 
			Если СтрокаТаблицы.ВыборСписка Тогда
				МассивПараметров = Новый Массив;
				Если ЭлементОтбора.ПараметрыВыбора<>Неопределено Тогда
					Для каждого ПараметрВыбора Из ЭлементОтбора.ПараметрыВыбора Цикл
						МассивПараметров.Добавить(ПараметрВыбора);
					КонецЦикла; 
				КонецЕсли; 
				ПараметрВыбора = Новый ПараметрВыбора("МножественныйВыбор", Истина);
				МассивПараметров.Добавить(ПараметрВыбора);
				ЭлементОтбора.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
				ЭлементОтбора.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ФильтрОбработкаВыбора");
			КонецЕсли; 
		КонецЕсли;
		ЭлементОтбора.Заголовок = СтрокаТаблицы.Заголовок;
		ЭлементОтбора.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
	КонецЦикла; 	
	
	Для каждого СтрокаТаблицы Из Фильтры Цикл
		ДополнительныеДействияПриИзмененииФильтра(ЭтотОбъект, СтрокаТаблицы);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ГруппыИЭлементыПоИспользованию(Использование)
	
	Если Использование=ИспользованиеГруппИЭлементов.Группы Тогда
		Возврат ГруппыИЭлементы.Группы;
	ИначеЕсли Использование=ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
		Возврат ГруппыИЭлементы.ГруппыИЭлементы;
	ИначеЕсли Использование=ИспользованиеГруппИЭлементов.Элементы Тогда
		Возврат ГруппыИЭлементы.Элементы;
	Иначе
		Возврат ГруппыИЭлементы.Авто;
	КонецЕсли; 
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЭлементыРекурсивно(Группа, МассивЭлементов)
	
	Для каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент)=Тип("ГруппаФормы") Тогда
			ЗаполнитьЭлементыРекурсивно(Элемент, МассивЭлементов);
		КонецЕсли;
		МассивЭлементов.Добавить(Элемент);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеФильтра(Фильтры, КритерийПоиска, Значение)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить(КритерийПоиска, Значение);
	СтрокиФильтры = Фильтры.НайтиСтроки(СтруктураОтбора);
	Если СтрокиФильтры.Количество()=0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	Возврат СтрокиФильтры[0];
	
КонецФункции 

&НаСервере
Процедура УстановитьМеткуИОтбор(ИмяФильтра, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	ОписаниеФильтра = ОписаниеФильтра(Фильтры, "Имя", ИмяФильтра);
	Если ОписаниеФильтра=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	Если ТипЗнч(ВыбранноеЗначение)<>Тип("Булево") Тогда
		РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ОписаниеФильтра.Имя, ИмяГруппыРодителяОтбора(ОписаниеФильтра.Имя), ВыбранноеЗначение, ПредставлениеЗначения);
	КонецЕсли; 
	УстановитьФильтр(ОписаниеФильтра.Имя, ОписаниеФильтра.Значение, ОписаниеФильтра.Пользовательский);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД, Знач ИмяЭлемента)
	
	СтрокаМеток = ДанныеМеток[Число(МеткаИД)];
	ОписаниеФильтра = ОписаниеФильтра(Фильтры, "Имя", СтрокаМеток.ИмяПоляОтбора);
	Если ОписаниеФильтра=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если СтрокаМеток.Метка=ОписаниеФильтра.Значение Тогда
		ОписаниеФильтра.Значение = Неопределено;
		УстановитьФильтр(СтрокаМеток.ИмяПоляОтбора, , ОписаниеФильтра.Пользовательский);
	ИначеЕсли ТипЗнч(ОписаниеФильтра.Значение)=Тип("СписокЗначений") Тогда 
		ЭлементСписка = ОписаниеФильтра.Значение.НайтиПоЗначению(СтрокаМеток.Метка);
		Если ЭлементСписка<>Неопределено Тогда
			ОписаниеФильтра.Значение.Удалить(ЭлементСписка);
		КонецЕсли;
		Если ОписаниеФильтра.Значение.Количество()>0 Тогда
			УстановитьФильтр(СтрокаМеток.ИмяПоляОтбора, ОписаниеФильтра.Значение, ОписаниеФильтра.Пользовательский);
		Иначе
			ОписаниеФильтра.Значение = Неопределено;
			УстановитьФильтр(СтрокаМеток.ИмяПоляОтбора, , ОписаниеФильтра.Пользовательский);
		КонецЕсли; 
	КонецЕсли; 
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Неопределено, МеткаИД, , , Ложь); 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметр(ИмяФильтра, Знач Значение)
	
	ПараметрКомпоновки = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяФильтра));
	ПараметрКомпоновки.Значение = Значение;
	ПараметрКомпоновки.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФильтр(Поле, Знач Значение = Неопределено, Пользовательский = Ложь)
	
	НайденныеЭлементы = Новый Массив;
	ПолеКД = Новый ПолеКомпоновкиДанных(Поле);
	ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
	Если ДоступноеПоле=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Для каждого ЭлементОтбор Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если НЕ ТипЗнч(ЭлементОтбор)=Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли; 
		Если ТипЗнч(ЭлементОтбор.ПравоеЗначение)=Тип("ПолеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЭлементОтбор.ЛевоеЗначение=ПолеКД Тогда
			Продолжить;
		КонецЕсли;
		НайденныеЭлементы.Добавить(ЭлементОтбор);
	КонецЦикла;
	
	Если Значение=Неопределено Тогда
		Для каждого ЭлементОтбор Из НайденныеЭлементы Цикл
			Если Пользовательский Тогда
				КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбор);
			Иначе
				ЭлементОтбор.Использование = Ложь;
				Если ТипЗнч(ЭлементОтбор.ПравоеЗначение)=Тип("СписокЗначений") Тогда
					ЭлементОтбор.ПравоеЗначение = Новый СписокЗначений;
				Иначе
					ЭлементОтбор.ПравоеЗначение = Неопределено;
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла;
	Иначе
		КоличествоЭлементов = НайденныеЭлементы.Количество();
		НовыйВидСравнения = ?(ТипЗнч(Значение)=Тип("СписокЗначений"), ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, ВидСравненияКомпоновкиДанных.ВИерархии);
		Если КоличествоЭлементов=0 Тогда
			НайденныйЭлемент = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Иначе
			// Оставим только первый элемент
			Для ии = 1 По КоличествоЭлементов-1 Цикл
				КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(НайденныеЭлементы[ии]);
			КонецЦикла;
			НайденныйЭлемент = НайденныеЭлементы[0];
		КонецЕсли;
		НайденныйЭлемент.ЛевоеЗначение = ПолеКД;
		НайденныйЭлемент.ВидСравнения = НовыйВидСравнения;
		НайденныйЭлемент.ПравоеЗначение = Значение;
		НайденныйЭлемент.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостоянияПоВидуЗаказа(Знач ВидЗаказа)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидЗаказа", ВидЗаказа);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыЗаказовПокупателейПорядокСостояний.Состояние КАК Состояние,
	|	ВидыЗаказовПокупателейПорядокСостояний.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Справочник.ВидыЗаказовПокупателей.ПорядокСостояний КАК ВидыЗаказовПокупателейПорядокСостояний
	|ГДЕ
	|	ВидыЗаказовПокупателейПорядокСостояний.Ссылка = &ВидЗаказа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыЗаказНарядовПорядокСостояний.Состояние,
	|	ВидыЗаказНарядовПорядокСостояний.НомерСтроки
	|ИЗ
	|	Справочник.ВидыЗаказНарядов.ПорядокСостояний КАК ВидыЗаказНарядовПорядокСостояний
	|ГДЕ
	|	ВидыЗаказНарядовПорядокСостояний.Ссылка = &ВидЗаказа
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат.ВыгрузитьКолонку("Состояние");
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнительныеДействияПриИзмененииФильтра(Форма, ОписаниеФильтра)
	
	// Частные случаи
	Если ОписаниеФильтра.Имя="ВидЗаказа" Тогда
		// Ограничения списка состояний при выборе вида заказа
		ОписаниеФильтраСостояния = ОписаниеФильтра(Форма.Фильтры, "Имя", "СостояниеЗаказа");
		Если ОписаниеФильтраСостояния<>Неопределено Тогда
			ЭлементСостояния = Форма.Элементы[ОписаниеФильтраСостояния.ИмяЭлемента];
			Если ЗначениеЗаполнено(ОписаниеФильтра.Значение) Тогда
				ЭлементСостояния.РежимВыбораИзСписка = Истина;
				ЭлементСостояния.КнопкаВыбора = Ложь;
				ЭлементСостояния.СписокВыбора.ЗагрузитьЗначения(СостоянияПоВидуЗаказа(ОписаниеФильтра.Значение));
			Иначе
				ЭлементСостояния.РежимВыбораИзСписка = Ложь;
				ЭлементСостояния.КнопкаВыбора = Неопределено;
				ЭлементСостояния.СписокВыбора.Очистить();
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область ФормированиеЗаказов

&НаКлиенте
Процедура ПроверитьЗаполнениеПараметровПополненияРекурсивно(ЭлементыДерева, Ошибки, Знач ПутьКОшибке = "")
	
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Индекс = ЭлементыДерева.Индекс(ЭлементДерева);
		Если ЭлементДерева.ИмяГруппировки<>ИмяГруппировкиНоменклатура() Тогда
			ПроверитьЗаполнениеПараметровПополненияРекурсивно(ЭлементДерева.ПолучитьЭлементы(), Ошибки, ПутьКОшибке + СтрШаблон("[%1]", Формат(Индекс, "ЧГ=0")));
			Продолжить;
		КонецЕсли;
		Если НЕ ЭлементДерева.Выбран Тогда
			Продолжить;
		КонецЕсли;
		ПозицияОшибки = СтрШаблон("%1%2", ПутьКОшибке, "[%1]");
		Если НЕ ЗначениеЗаполнено(ЭлементДерева.СпособПополнения) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не указан способ пополнения номенклатуры %1'"), ЭлементДерева.Номенклатура);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			СтрШаблон("Запасы%1.СпособПополнения", ПозицияОшибки),
			ТекстСообщения,
			"СпособПополнения",
			Индекс,
			ТекстСообщения,
			Индекс);
		ИначеЕсли ЭлементДерева.СпособПополнения=ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Закупка")
			ИЛИ ЭлементДерева.СпособПополнения=ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Переработка") Тогда 
			Если НЕ ЗначениеЗаполнено(ЭлементДерева.Источник) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не указан поставщик номенклатуры %1'"), ЭлементДерева.Номенклатура);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				СтрШаблон("Запасы%1.Источник", ПозицияОшибки),
				ТекстСообщения,
				"Источник",
				Индекс,
				ТекстСообщения,
				Индекс);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(ЭлементДерева.ВидЦен) И ПараметрыФормы.УчетЦенКонтрагентов Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не указан вид цен для номенклатуры %1'"), ЭлементДерева.Номенклатура);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				СтрШаблон("Запасы%1.ВидЦен", ПозицияОшибки),
				ТекстСообщения,
				"ВидЦен",
				Индекс,
				ТекстСообщения,
				Индекс);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(ЭлементДерева.Цена) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не указана цена номенклатуры %1'"), ЭлементДерева.Номенклатура);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				СтрШаблон("Запасы%1.Цена", ПозицияОшибки),
				ТекстСообщения,
				"Цена",
				Индекс,
				ТекстСообщения,
				Индекс);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(ЭлементДерева.Валюта) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не указана валюта для номенклатуры %1'"), ЭлементДерева.Номенклатура);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				СтрШаблон("Запасы%1.Валюта", ПозицияОшибки),
				ТекстСообщения,
				"Валюта",
				Индекс,
				ТекстСообщения,
				Индекс);
			КонецЕсли; 
		ИначеЕсли ЭлементДерева.СпособПополнения=ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Производство") Тогда
			Если НЕ ЗначениеЗаполнено(ЭлементДерева.Источник) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не указан изготовитель номенклатуры %1'"), ЭлементДерева.Номенклатура);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				СтрШаблон("Запасы%1.Источник", ПозицияОшибки),
				ТекстСообщения,
				"Источник",
				Индекс,
				ТекстСообщения,
				Индекс);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция НоваяТаблицаПотребностей()
	
	ТаблицаПотребностей = Новый ТаблицаЗначений;
	ТаблицаПотребностей.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПотребностей.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаПотребностей.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаПотребностей.Колонки.Добавить("СпособПополнения", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПополненияЗапасов"));
	ТаблицаПотребностей.Колонки.Добавить("Источник", Новый ОписаниеТипов("СправочникСсылка.Контрагенты, СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаПотребностей.Колонки.Добавить("ВидЦен", Новый ОписаниеТипов("СправочникСсылка.ВидыЦенКонтрагентов"));
	ТаблицаПотребностей.Колонки.Добавить("ДатаПоступления", Новый ОписаниеТипов("Дата"));
	ТаблицаПотребностей.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаПотребностей.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	ТаблицаПотребностей.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТаблицаПотребностей.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаПотребностей.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	ТаблицаПотребностей.Колонки.Добавить("СформированныйЗаказ", Новый ОписаниеТипов("ДокументОбъект.ЗаказНаПроизводство, ДокументОбъект.ЗаказПоставщику"));
	Возврат ТаблицаПотребностей;
	
КонецФункции

&НаСервере
Процедура СобратьПотребностиРекурсивно(ЭлементыДерева, ТаблицаПотребностей, Знач ЭлементНоменклатура, Знач ЭлементЗаказ, Знач ЭлементПериод, СтрокаТаблицы = Неопределено)
	
	ИмяГруппировкиЗаказ = ?(Группировать=ГруппировкаНоменклатура(), ИмяГруппировкиЗаказРекомендации(), ИмяГруппировкиЗаказ());
	Если ПоЗаказам Тогда
		ГруппировкаДобавленияСтрок = ИмяГруппировкиЗаказ;
	ИначеЕсли Группировать=ГруппировкаНоменклатураДень() Тогда 
		ГруппировкаДобавленияСтрок = ИмяГруппировкиПериод();
	Иначе
		ГруппировкаДобавленияСтрок = ИмяГруппировкиНоменклатура();
	КонецЕсли;
	ПерваяСтрока = Истина;
	Для каждого Элемент Из ЭлементыДерева Цикл
		Если Элемент.ИмяГруппировки=ИмяГруппировкиНоменклатура() Тогда
			ЭлементНоменклатура = Элемент;
		КонецЕсли; 
		Если Элемент.ИмяГруппировки=ИмяГруппировкиЗаказ Тогда
			ЭлементЗаказ = Элемент;
		КонецЕсли; 
		Если Элемент.ИмяГруппировки=ИмяГруппировкиПериод() Тогда
			ЭлементПериод = Элемент;
		КонецЕсли;
		// Добавление строки
		ЭтоПополнениеЗапасов = ((Группировать=ГруппировкаНоменклатураДень() И Элемент.ИмяГруппировки=ИмяГруппировкиПериод() И Элемент.ПолучитьЭлементы().Количество()=0)
		ИЛИ (Группировать=ГруппировкаДеньНоменклатура() И Элемент.ИмяГруппировки=ИмяГруппировкиНоменклатура() И Элемент.ПолучитьЭлементы().Количество()=0));
		Если Элемент.ИмяГруппировки=ГруппировкаДобавленияСтрок ИЛИ ЭтоПополнениеЗапасов Тогда
			Если Элемент.Заказать<=0 Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаТаблицы = ТаблицаПотребностей.Добавить();
			Если ЭлементНоменклатура<>Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЭлементНоменклатура, , "Заказ");
				Если ГруппировкаДобавленияСтрок=ИмяГруппировкиНоменклатура() Тогда
					СтрокаТаблицы.Количество = ЭлементНоменклатура.Заказать;
				КонецЕсли;
				МинимальнаяДатаПоставки = ПериодПланирования.ДатаНачала + ЭлементНоменклатура.СрокПополнения * 86400;
			Иначе
				МинимальнаяДатаПоставки = ПериодПланирования.ДатаНачала;
			КонецЕсли;
			Если ЭлементЗаказ<>Неопределено Тогда 
				СтрокаТаблицы.Заказ = ЭлементЗаказ.Заказ;
				Если ГруппировкаДобавленияСтрок=ИмяГруппировкиЗаказ Тогда
					СтрокаТаблицы.Количество = ЭлементЗаказ.Заказать;
				КонецЕсли; 
			КонецЕсли;
			Если ЭлементПериод<>Неопределено Тогда 
				Если ГруппировкаДобавленияСтрок=ИмяГруппировкиПериод() Тогда
					СтрокаТаблицы.Количество = ЭлементПериод.Заказать;
				КонецЕсли; 
			КонецЕсли;
			Если ЭтоПополнениеЗапасов Тогда
				СтрокаТаблицы.Количество = Элемент.Заказать;
			КонецЕсли;
			Если ЭлементНоменклатура<>Неопределено И Группировать=ГруппировкаНоменклатура() Тогда
				// При группировке по номенклатуре даты поступления опеределяются по заполненности колонок
				РазбитьСтрокуПоПериодам(ТаблицаПотребностей, СтрокаТаблицы, ЭлементНоменклатура, Элемент);
				СтрокаТаблицы = Неопределено;
				Продолжить;
			ИначеЕсли ЭлементПериод<>Неопределено И ЗначениеЗаполнено(ЭлементПериод.ДатаПоступления) Тогда
				СтрокаТаблицы.ДатаПоступления = Макс(МинимальнаяДатаПоставки, ЭлементПериод.ДатаПоступления);
			ИначеЕсли ЭлементНоменклатура<>Неопределено И ЗначениеЗаполнено(ЭлементНоменклатура.ДатаПоступления) И ТипЗнч(ЭлементНоменклатура.ДатаПоступления)=Тип("Дата") Тогда
				СтрокаТаблицы.ДатаПоступления = Макс(МинимальнаяДатаПоставки, ЭлементНоменклатура.ДатаПоступления);
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаПоступления) Тогда 
				СтрокаТаблицы.ДатаПоступления = МинимальнаяДатаПоставки;
			КонецЕсли;
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Количество * СтрокаТаблицы.Цена;
		КонецЕсли;
		СобратьПотребностиРекурсивно(Элемент.ПолучитьЭлементы(), ТаблицаПотребностей, ЭлементНоменклатура, ЭлементЗаказ, ЭлементПериод, СтрокаТаблицы);
		СтрокаТаблицы = Неопределено;
	КонецЦикла; 	
	
КонецПроцедуры

&НаСервере
Процедура РазбитьСтрокуПоПериодам(ТаблицаПотребностей, СтрокаТаблицы, ЭлементНоменклатура, Элемент)
	
	МинимальнаяДатаПоставки = ПериодПланирования.ДатаНачала + ЭлементНоменклатура.СрокПополнения * 86400;
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("ДатаПоступления");
	ТаблицаПериодов.Колонки.Добавить("Количество");
	Если Элемент.Просрочено>0 Тогда
		НоваяСтрока = ТаблицаПериодов.Добавить();
		НоваяСтрока.ДатаПоступления = МинимальнаяДатаПоставки;
		НоваяСтрока.Количество = Элемент.Просрочено;
	КонецЕсли;
	ТекущийПериод = ПериодПланирования.ДатаНачала;
	Пока ТекущийПериод<ПериодПланирования.ДатаОкончания Цикл
		ИмяКолонки = ИмяКолонкиПериод(ТекущийПериод);
		Если Элемент[ИмяКолонки]>0 Тогда
			НоваяСтрока = ТаблицаПериодов.Добавить();
			НоваяСтрока.ДатаПоступления = Макс(МинимальнаяДатаПоставки, ТекущийПериод);
			НоваяСтрока.Количество = Элемент.Просрочено;
		КонецЕсли; 
		ТекущийПериод = ТекущийПериод + 86400;
	КонецЦикла;
	Если Элемент.Пополнение>0 Тогда
		НоваяСтрока = ТаблицаПериодов.Добавить();
		НоваяСтрока.ДатаПоступления = МинимальнаяДатаПоставки;
		НоваяСтрока.Количество = Элемент.Пополнение;
	КонецЕсли;
	ОсталосьРаспределить = СтрокаТаблицы.Количество;
	БазаРаспределения = ТаблицаПериодов.Итог("Количество");
	КоличествоСтрок = ТаблицаПериодов.Количество();
	Если КоличествоСтрок>0 И ОсталосьРаспределить>БазаРаспределения Тогда
		ТаблицаПериодов[КоличествоСтрок-1].Количество = ТаблицаПериодов[КоличествоСтрок-1].Количество + (ОсталосьРаспределить - БазаРаспределения);
	КонецЕсли; 
	ТаблицаПериодов.Свернуть("ДатаПоступления", "Количество");
	ТаблицаПериодов.Сортировать("ДатаПоступления");
	Для каждого СтрокаПериода Из ТаблицаПериодов Цикл
		Распределить = Мин(ОсталосьРаспределить, СтрокаПериода.Количество);
		Если Распределить<=СтрокаПериода.Количество Тогда
			СтрокаТаблицы.ДатаПоступления = СтрокаПериода.ДатаПоступления;
		Иначе
			НоваяСтрокаТаблицы = ТаблицаПотребностей.Вставить(ТаблицаПотребностей.Индекс(СтрокаТаблицы));
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаТаблицы);
			НоваяСтрокаТаблицы.Количество = Распределить;
			НоваяСтрокаТаблицы.Сумма = НоваяСтрокаТаблицы.Количество * НоваяСтрокаТаблицы.Цена;
			СтрокаТаблицы.Количество = СтрокаТаблицы.Количество - Распределить;
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Количество * СтрокаТаблицы.Цена;
		КонецЕсли;
		ОсталосьРаспределить = ОсталосьРаспределить - Распределить;
		Если ОсталосьРаспределить<=0 Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаПоступления) Тогда
		СтрокаТаблицы.ДатаПоступления = МинимальнаяДатаПоставки;
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаказыНаСервере()
	
	СохранитьНастройкиОтборов();
	Организация = ОрганизацияИзОтборов(ЭтотОбъект);
	
	ТаблицаПотребностей = НоваяТаблицаПотребностей();
	СобратьПотребностиРекурсивно(Запасы.ПолучитьЭлементы(), ТаблицаПотребностей, Неопределено, Неопределено, Неопределено);
	
	ДатаПоступленияВШапке = УправлениеНебольшойФирмойПовтИсп.РеквизитВШапке("ПоложениеДатыПоступленияВЗаказеПоставщику");
	ВалютаДокументаПоУмолчанию = Константы.НациональнаяВалюта.Получить();
	ДанныеВалюта = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокументаПоУмолчанию, ТекущаяДатаСеанса());
	КурсДокументаПоУмолчанию = ДанныеВалюта.Курс;
	КратностьДокументаПоУмолчанию = ДанныеВалюта.Кратность;
	
	ТаблицаПотребностей.Индексы.Добавить("СпособПополнения, Источник, Валюта, СформированныйЗаказ" + ?(ЗаказыПоставщикуРазнымиДатами, ",ДатаПоступления", "") + ?(ОтдельныеДокументыПоЗаказамПокупателя, ",Заказ", ""));
	ТаблицаПотребностей.Индексы.Добавить("СпособПополнения, ДатаПоступления, СформированныйЗаказ" + ?(ОтдельныеДокументыПоЗаказамПокупателя, ",Заказ", ""));
	
	Для Каждого СтрокаПотребностей Из ТаблицаПотребностей Цикл
		
		Если СтрокаПотребностей.СформированныйЗаказ<>Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		// Сформируем заказы поставщикам.
		Если СтрокаПотребностей.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка
			ИЛИ СтрокаПотребностей.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Переработка Тогда
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("СпособПополнения", СтрокаПотребностей.СпособПополнения);
			СтруктураПоиска.Вставить("Источник", СтрокаПотребностей.Источник);
			СтруктураПоиска.Вставить("Валюта", СтрокаПотребностей.Валюта);
			СтруктураПоиска.Вставить("СформированныйЗаказ", Неопределено);
			
			Если ЗаказыПоставщикуРазнымиДатами Тогда
				СтруктураПоиска.Вставить("ДатаПоступления", СтрокаПотребностей.ДатаПоступления);
			КонецЕсли;
			Если ОтдельныеДокументыПоЗаказамПокупателя Тогда
				СтруктураПоиска.Вставить("Заказ", СтрокаПотребностей.Заказ);
			КонецЕсли;
			
			РезультатПоиска = ТаблицаПотребностей.НайтиСтроки(СтруктураПоиска);
			
			Если РезультатПоиска.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущийЗаказ = Документы.ЗаказПоставщику.СоздатьДокумент();
			ТекущийЗаказ.Дата = ТекущаяДатаСеанса();
			
			ТекущийЗаказ.Заполнить(Неопределено);
			
			Если СтрокаПотребностей.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка Тогда
				ТекущийЗаказ.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаЗакупку;
			Иначе
				ТекущийЗаказ.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаПереработку;
			КонецЕсли;
			
			ТекущийЗаказ.Организация = Организация;
			ТекущийЗаказ.ВалютаДокумента = ВалютаДокументаПоУмолчанию;
			ТекущийЗаказ.Курс = КурсДокументаПоУмолчанию;
			ТекущийЗаказ.Кратность = КратностьДокументаПоУмолчанию;
			
			ТекущийЗаказ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
			ТекущийЗаказ.СуммаВключаетНДС = Истина;
			
			ТекущийЗаказ.Контрагент = СтрокаПотребностей.Источник;
			СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(ТекущийЗаказ.Ссылка, ТекущийЗаказ.ВидОперации);
			ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(
			ТекущийЗаказ.Контрагент, 
			Организация, 
			СписокВидовДоговоров, 
			СтрокаПотребностей.Валюта);
			
			Если ЗначениеЗаполнено(ДоговорПоУмолчанию) Тогда
				
				ТекущийЗаказ.Договор = ДоговорПоУмолчанию;
				
			Иначе
				
				ТекущийЗаказ.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
					
			КонецЕсли;
			
			ТекущийЗаказ.ВалютаДокумента = СтрокаПотребностей.Валюта;
			ДанныеВалюта = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ТекущийЗаказ.ВалютаДокумента, ТекущийЗаказ.Дата);
			ТекущийЗаказ.Курс = ДанныеВалюта.Курс;
			ТекущийЗаказ.Кратность = ДанныеВалюта.Кратность;
			Если ЗначениеЗаполнено(ТекущийЗаказ.Договор.ВидЦенКонтрагента) Тогда
				ТекущийЗаказ.ВидЦенКонтрагента = ТекущийЗаказ.Договор.ВидЦенКонтрагента;
			Иначе
				ТекущийЗаказ.ВидЦенКонтрагента = СтрокаПотребностей.ВидЦен;
			КонецЕсли; 
			
			Если ЗаказыПоставщикуРазнымиДатами Тогда
				ТекущийЗаказ.ДатаПоступления = СтрокаПотребностей.ДатаПоступления;
			КонецЕсли;
			Если ОтдельныеДокументыПоЗаказамПокупателя Тогда
				ТекущийЗаказ.ЗаказПокупателя = СтрокаПотребностей.Заказ;
			КонецЕсли;
			
			Для каждого СтрокаРезультат из РезультатПоиска Цикл
				
				НоваяСтрока = ТекущийЗаказ.Запасы.Добавить();
				НоваяСтрока.Номенклатура = СтрокаРезультат.Номенклатура;
				НоваяСтрока.Характеристика = СтрокаРезультат.Характеристика;
				НоваяСтрока.Количество = СтрокаРезультат.Количество;
				НоваяСтрока.ЕдиницаИзмерения = СтрокаРезультат.ЕдиницаИзмерения;
				НоваяСтрока.ДатаПоступления = СтрокаРезультат.ДатаПоступления;
				НоваяСтрока.ЗаказПокупателя = СтрокаРезультат.Заказ;
				
				Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура.ВидСтавкиНДС) Тогда
					НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(НоваяСтрока.Номенклатура.ВидСтавкиНДС);
				Иначе
					НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Организация.ВидСтавкиНДСПоУмолчанию);
				КонецЕсли;
				
				СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
				НоваяСтрока.Цена = СтрокаРезультат.Цена;
				
				Если ЗначениеЗаполнено(СтрокаПотребностей.ВидЦен) И НЕ СтрокаРезультат.ВидЦен.ЦенаВключаетНДС Тогда
					НоваяСтрока.Цена = (НоваяСтрока.Цена * (100 + СтавкаНДС)) / 100;
				КонецЕсли;
				
				НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
				НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100);
				НоваяСтрока.Всего = НоваяСтрока.Сумма;
				
				СтрокаРезультат.СформированныйЗаказ = ТекущийЗаказ;
				
			КонецЦикла;

			Если НесколькоЗначений(ТекущийЗаказ.Запасы, "ЗаказПокупателя") Тогда
				ТекущийЗаказ.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
			ИначеЕсли ТекущийЗаказ.Запасы.Количество()>0 Тогда 
				ТекущийЗаказ.ЗаказПокупателя = ТекущийЗаказ.Запасы[0].ЗаказПокупателя;
			КонецЕсли; 
			Если НесколькоЗначений(ТекущийЗаказ.Запасы, "ДатаПоступления") Тогда
				ТекущийЗаказ.ПоложениеДатыПоступления = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
			ИначеЕсли ТекущийЗаказ.Запасы.Количество()>0 Тогда 
				ТекущийЗаказ.ДатаПоступления = ТекущийЗаказ.Запасы[0].ДатаПоступления;
			КонецЕсли; 
			
		Иначе // Сформируем заказы на производство.
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("СпособПополнения", СтрокаПотребностей.СпособПополнения);
			СтруктураПоиска.Вставить("ДатаПоступления", СтрокаПотребностей.ДатаПоступления);
			СтруктураПоиска.Вставить("Источник", СтрокаПотребностей.Источник);
			СтруктураПоиска.Вставить("СформированныйЗаказ", Неопределено);
			Если ОтдельныеДокументыПоЗаказамПокупателя Тогда
				СтруктураПоиска.Вставить("Заказ", СтрокаПотребностей.Заказ);
			КонецЕсли;
			
			РезультатПоиска = ТаблицаПотребностей.НайтиСтроки(СтруктураПоиска);
			
			Если РезультатПоиска.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущийЗаказ = Документы.ЗаказНаПроизводство.СоздатьДокумент();
			ТекущийЗаказ.Дата = ТекущаяДатаСеанса();
			
			ТекущийЗаказ.Заполнить(Неопределено);
			
			ТекущийЗаказ.ВидОперации = Перечисления.ВидыОперацийЗаказНаПроизводство.Сборка;
			
			ТекущийЗаказ.Организация = Организация;
			ТекущийЗаказ.Старт = СтрокаПотребностей.ДатаПоступления - 86400 * СтрокаПотребностей.Номенклатура.СрокПополнения;
			Для каждого СтрокаРезультат Из РезультатПоиска Цикл
				ТекущийЗаказ.Старт = Мин(ТекущийЗаказ.Старт, СтрокаПотребностей.ДатаПоступления - 86400 * СтрокаРезультат.Номенклатура.СрокПополнения);
			КонецЦикла; 
			ТекущийЗаказ.Финиш = СтрокаПотребностей.ДатаПоступления;
			ТекущийЗаказ.СтруктурнаяЕдиница = СтрокаПотребностей.Источник;
			Если ЗначениеЗаполнено(ТекущийЗаказ.СтруктурнаяЕдиница) И ЗначениеЗаполнено(ТекущийЗаказ.СтруктурнаяЕдиница.ИсточникПеремещения) Тогда
				ТекущийЗаказ.СтруктурнаяЕдиницаРезерв = ТекущийЗаказ.СтруктурнаяЕдиница.ИсточникПеремещения;
			Иначе
				ТекущийЗаказ.СтруктурнаяЕдиницаРезерв = ТекущийЗаказ.СтруктурнаяЕдиница;
			КонецЕсли; 
			Если ОтдельныеДокументыПоЗаказамПокупателя Тогда
				ТекущийЗаказ.ЗаказПокупателя = СтрокаПотребностей.Заказ;
			КонецЕсли;
			
			Для каждого СтрокаРезультат из РезультатПоиска Цикл
				
				НоваяСтрока = ТекущийЗаказ.Продукция.Добавить();
				НоваяСтрока.Номенклатура = СтрокаРезультат.Номенклатура;
				НоваяСтрока.Характеристика = СтрокаРезультат.Характеристика;
				НоваяСтрока.Количество = СтрокаРезультат.Количество;
				НоваяСтрока.ЕдиницаИзмерения = СтрокаРезультат.ЕдиницаИзмерения;
				НоваяСтрока.Спецификация = УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(НоваяСтрока.Номенклатура, НоваяСтрока.Характеристика);
				НоваяСтрока.ЗаказПокупателя = СтрокаРезультат.Заказ;
				
				СтрокаРезультат.СформированныйЗаказ = ТекущийЗаказ;
				
			КонецЦикла;
			
			ДанныеЗаполнения = Новый Структура("РасчетПотребностей", Истина);
			ТекущийЗаказ.Заполнить(ДанныеЗаполнения);
			
			Если НесколькоЗначений(ТекущийЗаказ.Запасы, "ЗаказПокупателя") Тогда
				ТекущийЗаказ.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
			ИначеЕсли ТекущийЗаказ.Продукция.Количество()>0 Тогда 
				ТекущийЗаказ.ЗаказПокупателя = ТекущийЗаказ.Продукция[0].ЗаказПокупателя;
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущийЗаказ.Комментарий = НСтр("ru = 'Сформирован автоматически сервисом ""Расчет потребностей в запасах"".'");
		
		ТекущийЗаказ.Записать();
		СформированныйЗаказ = Заказы.Добавить();
		СформированныйЗаказ.Заказ = ТекущийЗаказ.Ссылка;
		СформированныйЗаказ.СтандартнаяКартинка = 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НесколькоЗначений(ТабличнаяЧасть, ИмяКолонки)
	
	Если ТипЗнч(ТабличнаяЧасть)=Тип("ТаблицаЗначений") Тогда
		Таблица = ТабличнаяЧасть.Скопировать(, ИмяКолонки);
	Иначе
		Таблица = ТабличнаяЧасть.Выгрузить(, ИмяКолонки);
	КонецЕсли; 
	Таблица.Свернуть(ИмяКолонки);
	Возврат Таблица.Количество()>1;
	
КонецФункции

#КонецОбласти 

#Область ОбщийПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОрганизацияИзОтборов(Форма)
	
	ПараметрыФормы = Форма.ПараметрыФормы;
	Если НЕ ПараметрыФормы.ИспользоватьНесколькоОрганизаций Тогда
		Значение = ПредопределенноеЗначение("Справочник.Организации.ОсновнаяОрганизация");
	ИначеЕсли ЗначениеЗаполнено(ПараметрыФормы.Компания) Тогда 
		Значение = ПараметрыФормы.Компания;
	Иначе
		ОписаниеФильтра = ОписаниеФильтра(Форма.Фильтры, "Имя", "Организация");
		Если ОписаниеФильтра<>Неопределено Тогда
			Значение = ОписаниеФильтра.Значение;
		Иначе
			Параметр = Форма.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Организация"));
			Если Параметр<>Неопределено Тогда
				Значение = Параметр.Значение;
			Иначе
				Значение = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	Возврат Значение;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеДняНедели(ДеньНеделиКалендаря)
	
	НомерДняНедели = ДеньНедели(ДеньНеделиКалендаря);
	Если НомерДняНедели = 1 Тогда
		
		Возврат НСтр("ru = 'Пн'");
		
	ИначеЕсли НомерДняНедели = 2 Тогда
		
		Возврат НСтр("ru = 'Вт'");
		
	ИначеЕсли НомерДняНедели = 3 Тогда
		
		Возврат НСтр("ru = 'Ср'");
		
	ИначеЕсли НомерДняНедели = 4 Тогда
		
		Возврат НСтр("ru = 'Чт'");
		
	ИначеЕсли НомерДняНедели = 5 Тогда
		
		Возврат НСтр("ru = 'Пт'");
		
	ИначеЕсли НомерДняНедели = 6 Тогда
		
		Возврат НСтр("ru = 'Сб'");
		
	Иначе
		
		Возврат НСтр("ru = 'Вс'");
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПодчиненныеЭлементыРекурсивно(Элемент)
	
	Результат = Новый Массив;
	Для каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент)=Тип("ПолеФормы") Тогда
			Результат.Добавить(ПодчиненныйЭлемент);
		ИначеЕсли ТипЗнч(ПодчиненныйЭлемент)=Тип("ГруппаФормы") Тогда
			ВложенныеЭлементы = ПодчиненныеЭлементыРекурсивно(ПодчиненныйЭлемент);
			Для каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
				Результат.Добавить(ВложенныйЭлемент);
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	Возврат Результат;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКолонкиПериод(Дата)
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Возврат "Просрочено";
	КонецЕсли; 
	Возврат "Период" + Формат(Дата, "ДФ=yyyyMMdd");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТиповСостоитИзТипа(ОписаниеТипов, Тип)
	
	Возврат ОписаниеТипов.Типы().Количество()=1 И ОписаниеТипов.Типы().Получить(0)=Тип;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТиповСостоитИзПростогоТипа(ОписаниеТипов)
	
	Возврат ОписаниеТиповСостоитИзТипа(ОписаниеТипов, Тип("Булево"))
	ИЛИ ОписаниеТиповСостоитИзТипа(ОписаниеТипов, Тип("Число"))
	ИЛИ ОписаниеТиповСостоитИзТипа(ОписаниеТипов, Тип("Строка"))
	ИЛИ ОписаниеТиповСостоитИзТипа(ОписаниеТипов, Тип("Дата"));
	
КонецФункции 

#КонецОбласти 

#Область ФиксированныеСтроки

&НаКлиентеНаСервереБезКонтекста
Функция СпособПополненияЗакупкаПереработка()
	
	Возврат "ЗакупкаПереработка";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция СпособПополненияЗакупка()
	
	Возврат "Закупка";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция СпособПополненияПроизводство()
	
	Возврат "Производство";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция СпособПополненияВсе()
	
	Возврат "Все";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ГруппировкаНоменклатура()
	
	Возврат "Номенклатура";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ГруппировкаНоменклатураДень()
	
	Возврат "НоменклатураДень";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ГруппировкаДеньНоменклатура()
	
	Возврат "ДеньНоменклатура";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ГруппировкаЗаказНоменклатура()
	
	Возврат "ЗаказНоменклатура";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппировкиНоменклатура()
	
	Возврат "Номенклатура";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппировкиЗаказ()
	
	Возврат "Заказ";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппировкиЗаказРекомендации()
	
	Возврат "ЗаказРекомендации";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппировкиПериод()
	
	Возврат "Период";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппировкиНачальныйОстаток()
	
	Возврат "НачальныйОстаток";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппировкиКонечныйОстаток()
	
	Возврат "КонечныйОстаток";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппировкиПоступление()
	
	Возврат "Поступление";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппировкиПотребность()
	
	Возврат "Потребность";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппировкиМинимальныйЗапас()
	
	Возврат "МинимальныйЗапас";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппировкиМаксимальныйЗапас()
	
	Возврат "МаксимальныйЗапас";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппировкиРекомендовано()
	
	Возврат "Рекомендовано";	
	
КонецФункции 

#КонецОбласти 

#КонецОбласти

