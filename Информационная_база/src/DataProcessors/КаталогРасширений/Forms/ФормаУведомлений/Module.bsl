
#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПриОткрытииФормы() Экспорт 
	
	Если НЕ ЭтоРазделенныйСеанс() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПриложения["ТехнологияСервиса.РасширенияВМоделиСервиса.ФормаОповещений"] = ЭтотОбъект;
	
	АдресДанных = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ЭтотПользователь = ПользователиКлиент.ТекущийПользователь();
	
	ОткрытьФорму("Обработка.КаталогРасширений.Форма.ФормаУстановленныеРасширения",,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
	УведомлятьОбОтключенныхРасширениях = Истина;
	УведомлятьОбОбновляемыхРасширениях = Истина;
	
	ЗапуститьПолучениеПраваАдминистрирования(АдресДанных);
	
	ПодключитьОбработчикОжидания("ПроверитьПолучениеПраваАдминистрирования", 5);
	ПодключитьОбработчикОжидания("ПроверитьНаличеНовыхОповещений", 30);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоРазделенныйСеанс()
	
	Возврат РаботаВМоделиСервиса.ИспользованиеРазделителяСеанса();
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗапуститьПолучениеПраваАдминистрирования(Знач АдресДанных)
	
	ИмяМетода = "ПрограммныйИнтерфейсСервиса.ЕстьПравоАдминистрированияПриложения";
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	МассивПараметров.Добавить(АдресДанных);
	
	ФоновыеЗадания.Выполнить(ИмяМетода, МассивПараметров, Новый УникальныйИдентификатор, НСтр("ru = 'Получение права администрирования приложения'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличеНовыхОповещений() Экспорт 
	
	ДанныеДляОповещения = ПолучитьНовыеУведомления(); 
	
	Для Каждого Оповещение Из ДанныеДляОповещения Цикл
		
		Если Оповещение.ТипУведомления = ПредопределенноеЗначение("Перечисление.ТипыУведомленийРасширений.ИзменениеСостояния") Тогда
			ОбработатьУведомлениеИзмененияСостояния(Оповещение);
		ИначеЕсли Оповещение.ТипУведомления = ПредопределенноеЗначение("Перечисление.ТипыУведомленийРасширений.ОтключениеРасширения") Тогда
			ОбработатьУведомлениеОтключенияРасширения(Оповещение);	
		ИначеЕсли Оповещение.ТипУведомления = ПредопределенноеЗначение("Перечисление.ТипыУведомленийРасширений.ОбновлениеРасширения") Тогда
			ОбработатьУведомлениеОбновлениеРасширения(Оповещение);
		КонецЕсли;
		 		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПолучениеПраваАдминистрирования() Экспорт 
	
	Данные = ПолучитьИзВременногоХранилища(АдресДанных);
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("ПроверитьПолучениеПраваАдминистрирования");
	
	ЕстьПравоЗапускИАдминистрирование = Данные;
	
	ПроверитьНаличеНовыхОповещений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУведомлениеИзмененияСостояния(Оповещение)
	
	Если Оповещение.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияРасширений.Установлено") Тогда
		Текст = НСтр("ru = 'Установка расширения завершена'");
		СостояниеДоп = НСтр("ru = 'установлено'");
	Иначе 
		Текст = НСтр("ru = 'Удаление расширения завершено'");	
		СостояниеДоп = НСтр("ru = 'удалено'");
	КонецЕсли;
	
	Пояснение = СтрШаблон(НСтр("ru = 'Расширение ""%1"" %2, необходимо перезапустить приложение'"), Оповещение.Расширение, СостояниеДоп);
	Описание = Новый ОписаниеОповещения("ОбработатьПерезапуск", ЭтотОбъект, Оповещение);
	
	ПоказатьОповещениеПользователя(Текст, Описание, Пояснение, БиблиотекаКартинок.Успешно32,
		СтатусОповещенияПользователя.Важное, Оповещение.ИдентификаторРасширения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУведомлениеОтключенияРасширения(Оповещение)
	
	Текст = НСтр("ru = 'Расширение отключено'");
	Пояснение = СтрШаблон(НСтр("ru = 'Расширение: %1 отключено по причине: %2'"), Оповещение.Наименование, Оповещение.Причина);
	Описание = Новый ОписаниеОповещения("ОбработатьОткрытиеРасширения", ЭтотОбъект, Оповещение);
	
	ПоказатьОповещениеПользователя(Текст, Описание, Пояснение, БиблиотекаКартинок.Предупреждение32, 
		СтатусОповещенияПользователя.Важное, Оповещение.ИдентификаторРасширения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУведомлениеОбновлениеРасширения(Оповещение)
	
	Текст = НСтр("ru = 'Обновление расширения'");	
	Пояснение = СтрШаблон(НСтр("ru = 'Требуется выполнить ручное обновление расширения: %1'"), Оповещение.Наименование);
	Описание = Новый ОписаниеОповещения("ОбработатьОбновлениеРасширения", ЭтотОбъект, Оповещение);
	
	ПоказатьОповещениеПользователя(Текст, Описание, Пояснение, БиблиотекаКартинок.Информация32, 
		СтатусОповещенияПользователя.Важное, Оповещение.ИдентификаторРасширения);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНовыеУведомления()
	
	МассивДанных = Новый Массив;
	
	Если ЕстьПравоЗапускИАдминистрирование И УведомлятьОбОтключенныхРасширениях Тогда
		ПроверитьНаличиеОтключенныхРасширений(МассивДанных);
		УведомлятьОбОтключенныхРасширениях = Ложь;
	КонецЕсли;
	
	Если ЕстьПравоЗапускИАдминистрирование И УведомлятьОбОбновляемыхРасширениях Тогда
		ПроверитьНаличиеОбновляемыхРасширений(МассивДанных);
		УведомлятьОбОбновляемыхРасширениях = Ложь;
	КонецЕсли;
	
	ПроверитьНачилиеИзмененийСостоянийРасширений(МассивДанных);
	
	Возврат МассивДанных;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПерезапуск(Знач ДанныеОповещения) Экспорт 
	
	Если ДанныеОповещения.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияРасширений.Установлено") Тогда
		СостояниеДоп = НСтр("ru = 'установлено'");
	Иначе 
		СостояниеДоп = НСтр("ru = 'удалено'");
	КонецЕсли;
	
	Вопрос = СтрШаблон(НСтр("ru = 'Расширение ""%1"" %2, перезапустить приложение?'"), ДанныеОповещения.Расширение, СостояниеДоп);
	Описание = Новый ОписаниеОповещения("ОбработатьПерезапускОтвет", ЭтотОбъект);
	
	ПоказатьВопрос(Описание, Вопрос, РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Перезапуск приложения'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОткрытиеРасширения(Знач ДанныеОповещения) Экспорт 
	
	КаталогРасширенийКлиент.ОткрытьФормуВерсииРасширения(ДанныеОповещения.ИдентификаторВерсии, ДанныеОповещения.Наименование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОбновлениеРасширения(Знач ДанныеОповещения) Экспорт 
	
	ОткрытьФорму("Обработка.КаталогРасширений.Форма.ФормаОбновляемыеРасширения",, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПерезапускОтвет(Ответ, ДопПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьРаботуСистемы(Ложь, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНачилиеИзмененийСостоянийРасширений(МассивДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОчередьРасширенийДляОповещений.ИдентификаторРасширения КАК ИдентификаторРасширения,
	               |	ОчередьРасширенийДляОповещений.Пользователь КАК Пользователь,
	               |	ОчередьРасширенийДляОповещений.Состояние КАК Состояние
	               |ИЗ
	               |	РегистрСведений.ОчередьРасширенийДляОповещений КАК ОчередьРасширенийДляОповещений
	               |ГДЕ
	               |	ОчередьРасширенийДляОповещений.Пользователь = &Пользователь
	               |	И ОчередьРасширенийДляОповещений.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияРасширений.Установлено), ЗНАЧЕНИЕ(Перечисление.СостоянияРасширений.Удалено))";
	
	Запрос.УстановитьПараметр("Пользователь", ЭтотПользователь);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
		
	Пока Выборка.Следующий() Цикл
		
		Расширение = Справочники.ПоставляемыеРасширения.ПолучитьСсылку(Выборка.ИдентификаторРасширения);
		
		ДанныеОповещения = Новый Структура;
		ДанныеОповещения.Вставить("ТипУведомления", Перечисления.ТипыУведомленийРасширений.ИзменениеСостояния);
		ДанныеОповещения.Вставить("ИдентификаторРасширения", Выборка.ИдентификаторРасширения);
		ДанныеОповещения.Вставить("Расширение", Расширение);
		ДанныеОповещения.Вставить("Состояние", Выборка.Состояние);
		
		МассивДанных.Добавить(ДанныеОповещения);

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеОтключенныхРасширений(МассивДанных)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Расширения = РасширенияВМоделиСервиса.РасширенияТекущийОбластиДанных();
	
	Если ТипЗнч(Расширения) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ОтключенныеРасширения = Расширения.НайтиСтроки(Новый Структура("Отключено", Истина));
	
	Для Каждого Расширение Из ОтключенныеРасширения Цикл
		
		ДанныеОповещения = Новый Структура;
		ДанныеОповещения.Вставить("ТипУведомления", Перечисления.ТипыУведомленийРасширений.ОтключениеРасширения);
		ДанныеОповещения.Вставить("ИдентификаторРасширения", Расширение.ИспользуемоеРасширение);
		ДанныеОповещения.Вставить("Расширение", Расширение.ПоставляемоеРасширение);
		ДанныеОповещения.Вставить("Наименование", Расширение.Наименование);
		ДанныеОповещения.Вставить("Причина", Расширение.ПричинаОтключения);
		ДанныеОповещения.Вставить("ИдентификаторВерсии", Расширение.ИдентификаторВерсии);
		
		МассивДанных.Добавить(ДанныеОповещения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеОбновляемыхРасширений(МассивДанных)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = КаталогРасширений.ТекстЗапросаОбновляемыхРасширений();
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;	
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеОповещения = Новый Структура;
		ДанныеОповещения.Вставить("ТипУведомления", Перечисления.ТипыУведомленийРасширений.ОбновлениеРасширения);
		ДанныеОповещения.Вставить("ИдентификаторРасширения", Выборка.ПоставляемоеРасширение.УникальныйИдентификатор());
		ДанныеОповещения.Вставить("Расширение", Выборка.ПоставляемоеРасширение);
		ДанныеОповещения.Вставить("Наименование", Выборка.Наименование);
		ДанныеОповещения.Вставить("ИдентификаторВерсии", Выборка.ИдентификаторВерсии);
		
		МассивДанных.Добавить(ДанныеОповещения);	
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти



