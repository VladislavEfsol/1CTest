
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Параметры.Свойство("РежимПривязкиНоменклатуры",        ЭтоПривязкаНоменклатуры);
	Параметры.Свойство("РежимВыбораНоменклатуры",          РежимВыбораНоменклатуры);
	Параметры.Свойство("СтрокаПоиска",                     СтрокаПоиска);
	Параметры.Свойство("ИдентификаторНоменклатуры",        ИдентификаторНоменклатуры); 
	Параметры.Свойство("СоздаватьНоменклатуруПриВыборе",   СоздаватьНоменклатуруПриВыборе);
	Параметры.Свойство("ПодтверждатьСозданиеНоменклатуры", ПодтверждатьСозданиеНоменклатуры);
	Параметры.Свойство("ИдентификаторКатегории",           ИдентификаторКатегории); // используется при переходе к категориям карточки номенклатуры.
	Параметры.Свойство("ЗапрещатьВыборЗагруженных",        ЗапрещатьВыборЗагруженных);
	Параметры.Свойство("ВозвращатьРасширенныйНаборПолей",  ВозвращатьРасширенныйНаборПолей);
	
	Элементы.ДекорацияУсловияИспользованияСервиса.Заголовок = 
		Новый ФорматированнаяСтрока(УсловиеИспользованияСервиса(РежимВыбораНоменклатуры));
	
	ИмяФормыНоменклатуры = РаботаСНоменклатуройСлужебныйВызовСервера.ИмяФормыСпискаНоменклатуры();
	
	ЦветаСтиляПоясняющийТекст = ЦветаСтиля.ПоясняющийТекст;
	ЦветаСтиляЦветТекстаФормы = ЦветаСтиля.ЦветТекстаФормы;
	
	ЗаполнитьРеквизитыФормы();
	
	НастроитьВнешнийВидФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(РежимПросмотраСписка) Тогда
		РежимПросмотраСписка = "Линейный";
	КонецЕсли;
	
	УстановитьПометкиРежимаПросмотра();
	
	Если ИнтернетПоддержкаПодключена Тогда
		ПолучитьДанныеСервиса(ТекущаяКатегория);
	Иначе
		ПолучитьДанныеПослеОткрытия = Новый ОписаниеОповещения("ПолучитьДанныеПослеОткрытия",
			ЭтотОбъект);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ПолучитьДанныеПослеОткрытия,
			ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РаботаСНоменклатурой_ПерейтиККатегории" Тогда
		
		// Переход к категории, переданной из карточки номенклатуры.
		
		ПараметрыИзменены = Ложь;
		Если Параметр.Свойство("ИдентификаторКатегории") И ТекущаяКатегория <> Параметр.ИдентификаторКатегории Тогда
			ПараметрыИзменены = Истина;
			ТекущаяКатегория = Параметр.ИдентификаторКатегории;
		КонецЕсли;
		
		Если ПараметрыИзменены Тогда
			ЗаполнитьНавигациюКатегорийИЗагрузитьНоменклатуру(ТекущаяКатегория);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = РаботаСНоменклатуройКлиент.ОписаниеОповещенийПодсистемы().ЗагрузкаНоменклатуры 
		ИЛИ ИмяСобытия = РаботаСНоменклатуройКлиент.ОписаниеОповещенийПодсистемы().СопоставлениеНоменклатуры Тогда	
		
		ОбновитьПризнакЗагрузки();
		
		УстановитьВидимостьДоступность();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.РаботаСНоменклатурой.Форма.ЗагрузкаНоменклатуры.СтрокаПоискаПриИзменении");
	
	Если Категории.ПолучитьЭлементы().Количество() = 0 Тогда
		ПолучитьДанныеСервиса();
	Иначе
		ПолучитьНоменклатуру();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеГиперссылки(Элемент)
	
	// Нажатие гиперссылки сворачивания/разворачивания в группе дополнительных реквизитов
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.РаботаСНоменклатурой.Форма.ЗагрузкаНоменклатуры.Подключаемый_НажатиеГиперссылки");

	Если Не СтрНайти(Элемент.Имя, "ЗаголовокОтбора_") Тогда
		Возврат;
	КонецЕсли;
	
	СтрелкаВверх = "↑";
	СтрелкаВниз = "↓";
	
	ИмяГруппыОтбора = СтрЗаменить(Элемент.Имя, "ЗаголовокОтбора_", "ГруппаОтбора_");
	ГруппаОтбора = Элементы[ИмяГруппыОтбора];
	Если ГруппаОтбора.Видимость Тогда
		ГруппаОтбора.Видимость = Ложь;
		Элемент.Заголовок = СтрЗаменить(Элемент.Заголовок, СтрелкаВверх, СтрелкаВниз);
	ИначеЕсли ГруппаОтбора.ПодчиненныеЭлементы.Количество() Тогда
		ГруппаОтбора.Видимость = Истина;
		Элемент.Заголовок = СтрЗаменить(Элемент.Заголовок, СтрелкаВниз, СтрелкаВверх);
	Иначе
		Идентификатор = СтрЗаменить(Элемент.Имя, "ЗаголовокОтбора_", "");
		СформироватьЭлементыХарактеристики(Идентификатор, Элемент.Подсказка);
		ГруппаОтбора.Видимость = Истина;
		Элемент.Заголовок = СтрЗаменить(Элемент.Заголовок, СтрелкаВниз, СтрелкаВверх);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзменениеОтбора(Элемент)
	
	// Изменение реквизитов отбора
	
	ПолучитьНоменклатуру();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие(Элемент)
	
	// Отработка нажатия на маркеры текущего отбора
	
	Если Найти(Элемент.Имя, "ОчиститьОтбор_") Тогда
		
		// Очистка отбора.
		ИмяРеквизита = Сред(Элемент.Имя, СтрНайти(Элемент.Имя, "_") + 1);
		
		ЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
		Если ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
			ЭтотОбъект[ИмяРеквизита] = Ложь;
		ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Число") Тогда
			ЭтотОбъект[ИмяРеквизита] = 0;
		ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
			ЭтотОбъект[ИмяРеквизита] = "";
		ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("СписокЗначений") Тогда 
			Для Каждого ЭлементСписка Из ЭтотОбъект[ИмяРеквизита] Цикл
				ЭлементСписка.Пометка = Ложь;
			КонецЦикла;
		Иначе
			Возврат;
		КонецЕсли;
		
		ПолучитьНоменклатуру();
		
	ИначеЕсли Найти(Элемент.Имя, "ЗаголовокОтбора_") Тогда
		
		ИмяРеквизита = Сред(Элемент.Имя, СтрНайти(Элемент.Имя, "_") + 1);
		
		Если Не Элементы.ГруппаПанельОтборов.Видимость Тогда
			Элементы.ПоказыватьОтборы.Пометка = Истина;
			Элементы.ГруппаПанельОтборов.Видимость = Истина;
		КонецЕсли;
		
		ТекущийЭлемент = Элементы[ИмяРеквизита];
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.СписокКоличествоХарактеристик Тогда
		
		// Раскрытие ветки характеристик.
		
		СтандартнаяОбработка = Ложь;
		
		ИзменитьТекущегоРодителяНаСервере();
		
	ИначеЕсли Поле = Элементы.СписокГиперссылкаЗапросаДанных Тогда	
		
		// Догрузка данных.
		
		НомерСтраницыДанных = НомерСтраницыДанных + 1;
		
		Элементы.Список.ТекущаяСтрока = ИдентификаторСтрокиЗагрузкиДанных - 1;
		
		СтрокаДанных = Список.НайтиПоИдентификатору(ИдентификаторСтрокиЗагрузкиДанных);
		
		Если СтрокаДанных <> Неопределено Тогда
			Список.ПолучитьЭлементы().Удалить(СтрокаДанных);
		КонецЕсли;
		
		ПолучитьНоменклатуру(Неопределено, Истина, ИдентификаторСтрокиЗагрузкиДанных - 1);
		
	Иначе
		Если РежимВыбораНоменклатуры 
			И Элементы.СписокВыбратьНоменклатуру.Доступность Тогда
			
			ВыбратьНоменклатуруИзСписка();
		Иначе
			ОткрытьКарточкуНоменклатуры();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриСменеТекущегоРодителя(Элемент)
	
	Если Элементы.Список.ТекущийРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Родитель = Список.НайтиПоИдентификатору(Элементы.Список.ТекущийРодитель);
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыРодителя = Родитель.ПолучитьЭлементы();
	
	Если ЭлементыРодителя.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементыРодителя[0].Наименование = ПредставлениеТехническойСтроки() Тогда
		ПолучитьХарактеристики(Родитель);
	Иначе
		ОбновитьПризнакЗагрузки();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеречитатьНоменклатуру(Команда)
	
	ОбновитьПризнакЗагрузки();
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраСписок(Команда)
	
	РежимПросмотраСписка = "Линейный";
	
	УстановитьПометкиРежимаПросмотра();
	
	ПолучитьНоменклатуру();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраГруппировка(Команда)
	
	РежимПросмотраСписка = "Группировка";
	
	УстановитьПометкиРежимаПросмотра();
	
	ПолучитьНоменклатуру();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиРежимаПросмотра()
	
	Если Не Элементы.Список.КонтекстноеМеню.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СписокКонтекстноеМенюРежимПросмотраСписок.Пометка = РежимПросмотраСписка = "Линейный";
	
	Элементы.СписокКонтекстноеМенюРежимПросмотраГруппировка.Пометка = РежимПросмотраСписка = "Группировка";
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОтборы(Команда)
	
	Элементы.ПоказыватьОтборы.Пометка = НЕ Элементы.ПоказыватьОтборы.Пометка;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточку(Команда)
	
	ОткрытьКарточкуНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Функция ИдентификаторыНоменклатурыИХарактеристик(ИсключитьЗагруженные = Ложь)
	
	ИдентификаторыНоменклатуры = Новый Массив;
	
	Для Каждого ЭлементКоллекции Из Элементы.Список.ВыделенныеСтроки Цикл
		
		СтрокаНоменклатуры = Список.НайтиПоИдентификатору(ЭлементКоллекции);
		
		Если ИсключитьЗагруженные 
			И СтрокаНоменклатуры.Загружена = 1 Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если СтрокаНоменклатуры.ЭтоСтрокаЗапросаДанных Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДляЗагрузки = Новый Структура(
			"ИдентификаторНоменклатуры, ИдентификаторХарактеристики, Загружена");
		
		ЗаполнитьЗначенияСвойств(ДанныеДляЗагрузки, СтрокаНоменклатуры);
		
		ИдентификаторыНоменклатуры.Добавить(ДанныеДляЗагрузки);
		
	КонецЦикла;

	Возврат ИдентификаторыНоменклатуры;
	
КонецФункции

&НаКлиенте
Процедура СоздатьНоменклатуру(Команда)
	
	Если Элементы.СтраницыДлительнойОперации.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперацияАктивна Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Список.ТекущиеДанные.Загружена = 1 Тогда
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	ИдентификаторыНоменклатуры = ИдентификаторыНоменклатурыИХарактеристик(Истина);
	
	ИдентификаторыСНарушениемРежима = Новый Массив;
	
	Для каждого ЭлементКоллекции Из ИдентификаторыНоменклатуры Цикл
		Если ЭлементКоллекции.Загружена = 3 Тогда
			ИдентификаторыСНарушениемРежима.Добавить(ЭлементКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторыСНарушениемРежима.Количество() > 0 Тогда
		ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.НарушениеРежимаЗагрузкиХарактеристик", 
			Новый Структура("Идентификаторы", ИдентификаторыСНарушениемРежима), ЭтотОбъект);
	Иначе
		ЗагрузитьНоменклатуру(ИдентификаторыНоменклатуры);	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНоменклатуру(ИдентификаторыНоменклатуры, ЗакрытьФормуПослеСоздания = Ложь)
	
	НастроитьФормуПриДлительнойОперации(Истина);
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ИдентификаторЗадания", Неопределено);
	ПараметрыЗавершения.Вставить("ЗакрытьФормуПослеСоздания", ЗакрытьФормуПослеСоздания);
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузкаДанныхПродолжение",
		ЭтотОбъект, ПараметрыЗавершения);
	
	РаботаСНоменклатуройКлиент.ЗагрузитьНоменклатуруИХарактеристики(
		Оповещение, 
		ИдентификаторыНоменклатуры, 
		ЭтотОбъект, 
		Неопределено, 
		Неопределено, 
		Элементы.СтраницыДлительнойОперации);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхПродолжение(Результат, ДополнительныеПараметры) Экспорт 
	
	НастроитьФормуПриДлительнойОперации(Ложь);
	
	Если Результат = Неопределено Тогда
		ОбновитьПризнакЗагрузки();
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗакрытьФормуПослеСоздания Тогда
		Закрыть(Новый Структура("ВыбранныеОбъекты", Результат.НовыеЭлементы));
		Возврат;
	КонецЕсли;
	
	Оповестить(РаботаСНоменклатуройКлиент.ОписаниеОповещенийПодсистемы().ЗагрузкаНоменклатуры, 
		Новый Структура("СозданныеОбъекты", Результат.НовыеЭлементы));
		
	Оповестить(РаботаСНоменклатуройКлиент.ОписаниеОповещенийПодсистемы().СопоставлениеНоменклатуры);
	
	Если Результат.НовыеЭлементы.Количество() > 0 Тогда
		ОповеститьОбИзменении(ТипЗнч(Результат.НовыеЭлементы[0]));	
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыРаспределенияХарактеристик(Результат, ДополнительныеПараметры) Экспорт
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНоменклатуру(Команда)
	
	ВыбратьНоменклатуруИзСписка();
		
КонецПроцедуры

&НаКлиенте
Процедура НайтиКарточки(Команда)
	
	Если Категории.ПолучитьЭлементы().Количество() = 0 Тогда
		ПолучитьДанныеСервиса();
	Иначе
		ПолучитьНоменклатуру();	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СтроковыеКонстанты

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПредставленияКорневойКатегории()
	
	Возврат НСтр("ru = 'Все категории'");
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазделительПодкатегорий()
	
	Возврат "     ";
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазделительКатегорий()
	
	Возврат " • ";
		
КонецФункции

&НаСервере
Функция УсловиеИспользованияСервиса(РежимВыбора)
	
	МассивПодстрок = Новый Массив;
	
	МассивПодстрок.Добавить(НСтр("ru = 'Нажатие'") + " """);
	
	Если РежимВыбора Тогда
		МассивПодстрок.Добавить(НСтр("ru = 'Выбрать'"));
	Иначе
		МассивПодстрок.Добавить(НСтр("ru = 'Загрузить номенклатуру'"));
	КонецЕсли;
	
	МассивПодстрок.Добавить(""" " + НСтр("ru = 'означает согласие с'") + " ");
	МассивПодстрок.Добавить(
		Новый ФорматированнаяСтрока(НСтр("ru = 'Условиями использования сервиса'"),,,,
		"https://catalog-api.1c.ru/agreement/"));
		
	Возврат МассивПодстрок;
		
КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеТехническойСтроки()
	
	Возврат "РаботаСНоменклатурой_ТехническаяСтрока";
	
КонецФункции

&НаСервере
Процедура ОбновитьПризнакЗагрузки()
	
	Если Элементы.Список.ТекущийРодитель <> Неопределено Тогда
		ОбновитьПризнакЗагрузкиКоллекции(
			Список.НайтиПоИдентификатору(Элементы.Список.ТекущийРодитель).ПолучитьЭлементы(), Истина);
	КонецЕсли;
		
	ОбновитьПризнакЗагрузкиКоллекции(Список.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПризнакЗагрузкиКоллекции(ДанныеДляЗаполнения, ЭтоДанныеХарактеристик = Ложь)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	ТаблицаДанных.Колонки.Добавить("Идентификатор",                 Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("ИспользуемыйИдентификатор",     Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("ИдентификаторХарактеристики",   Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("Наименование",                  Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("ПредставлениеЕдиницыИзмерения", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("КоличествоХарактеристик",       Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Характеристики",                Новый ОписаниеТипов("Массив"));
		
	Для каждого ТекущаяКолонка Из ДанныеДляЗаполнения Цикл
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		
		НоваяСтрока.Идентификатор                 = ТекущаяКолонка.ИдентификаторНоменклатуры;
		НоваяСтрока.Наименование                  = ТекущаяКолонка.Наименование;
		НоваяСтрока.ИспользуемыйИдентификатор     = НоваяСтрока.Идентификатор;
		НоваяСтрока.ПредставлениеЕдиницыИзмерения = ТекущаяКолонка.ПредставлениеЕдиницыИзмерения;
		НоваяСтрока.КоличествоХарактеристик       = ТекущаяКолонка.КоличествоХарактеристик;
		НоваяСтрока.ИдентификаторХарактеристики   = ТекущаяКолонка.ИдентификаторХарактеристики;
		
	КонецЦикла;
	
	Если ЭтоДанныеХарактеристик Тогда
		РаботаСНоменклатурой.ЗаполнитьСписокНоменклатуры(ТаблицаДанных, "Линейный");
	Иначе
		РаботаСНоменклатурой.ЗаполнитьСписокНоменклатуры(ТаблицаДанных, РежимПросмотраСписка);	
	КонецЕсли;
		
	Для каждого ЭлементКоллекции Из ДанныеДляЗаполнения Цикл
		
		Если РежимПросмотраСписка = "Линейный" ИЛИ ЭтоДанныеХарактеристик Тогда
			НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Новый Структура("Идентификатор, ИдентификаторХарактеристики", 
				ЭлементКоллекции.ИдентификаторНоменклатуры, ЭлементКоллекции.ИдентификаторХарактеристики));
		Иначе
			НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Новый Структура("Идентификатор", ЭлементКоллекции.ИдентификаторНоменклатуры));
		КонецЕсли;
			
		Для каждого СтрокаНоменклатуры Из НайденныеСтроки Цикл
			ЭлементКоллекции.Загружена = СтрокаНоменклатуры.Загружена;
		КонецЦикла;	
			
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЭлементыХарактеристики(ИдентификаторРеквизита, Представление)
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("Идентификатор",        ИдентификаторРеквизита);
	ПараметрыЗавершения.Вставить("Представление",        Представление);
	ПараметрыЗавершения.Вставить("ИдентификаторЗадания", ИдентификаторЗаданияОбработкиФильтровРубрикатора);
	
	СформироватьЭлементыХарактеристикиПродолжение = Новый ОписаниеОповещения("СформироватьЭлементыХарактеристикиПродолжение",
		ЭтотОбъект, ПараметрыЗавершения);
		
	ДекорацияДлительноеОжидание = БиблиотекаКартинок.Пустая;
	
	Если ИдентификаторРеквизита = "Производитель" Тогда 
		
		РаботаСНоменклатуройКлиент.ПолучитьПроизводителейКатегории(СформироватьЭлементыХарактеристикиПродолжение,
			ТекущаяКатегория, ЭтотОбъект, ИдентификаторЗаданияОбработкиФильтровРубрикатора, Элементы["ДекорацияДлительнойОперацииОтбора_" + ИдентификаторРеквизита]);
	Иначе
		
		ПараметрыПоиска = Новый Структура();
		ПараметрыПоиска.Вставить("ИдентификаторДополнительногоРеквизита", ИдентификаторРеквизита);
		ПараметрыПоиска.Вставить("ИдентификаторКатегории",                ТекущаяКатегория);
	
		РаботаСНоменклатуройКлиент.ПолучитьЗначенияДополнительногоРеквизитаКатегории(СформироватьЭлементыХарактеристикиПродолжение,
			ПараметрыПоиска, ЭтотОбъект, ИдентификаторЗаданияОбработкиФильтровРубрикатора, Элементы["ДекорацияДлительнойОперацииОтбора_" + ИдентификаторРеквизита]);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЭлементыХарактеристикиПродолжение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ИдентификаторЗаданияОбработкиФильтровРубрикатора <> ДополнительныеПараметры.ИдентификаторЗадания Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	ИдентификаторЗаданияОбработкиФильтровРубрикатора = Неопределено;
	
	Элементы["ДекорацияДлительнойОперацииОтбора_" + ДополнительныеПараметры.Идентификатор].Картинка = БиблиотекаКартинок.Пустая;
	
	СформироватьЭлементыХарактеристикиЗавершение(Результат.АдресРезультата, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЭлементыХарактеристикиЗавершение(АдресРезультата, ДополнительныеПараметры)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда 
		ЗначенияХарактеристик = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если ЗначенияХарактеристик = Неопределено Тогда 
			Возврат;
		ИначеЕсли ЗначенияХарактеристик.Количество() = 0 Тогда 
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Идентификатор = ДополнительныеПараметры.Идентификатор;
	Представление = ДополнительныеПараметры.Представление;
	
	Если Не Идентификатор = "Производитель" Тогда 
		ЗначенияХарактеристик = ЗначенияХарактеристик[0].Значения;
	КонецЕсли;
	
	Если ЗначенияХарактеристик.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	
	МассивРеквизитов = Новый Массив;
	Реквизит = Новый РеквизитФормы("Отбор_" + Идентификатор, Новый ОписаниеТипов("СписокЗначений"));
	МассивРеквизитов.Добавить(Реквизит);
	ИзменитьРеквизиты(МассивРеквизитов);
	СписокДобавленныхРеквизитов.Добавить(Реквизит.Имя, Представление);
	СписокДобавленныхРеквизитов.СортироватьПоЗначению();
	
	Для Каждого Значение Из ЗначенияХарактеристик Цикл
		ЭтотОбъект[Реквизит.Имя].Добавить(Значение.Идентификатор, Значение.Наименование);
	КонецЦикла;
	
	// Сортировка элементов.
	ЭтотОбъект[Реквизит.Имя].СортироватьПоПредставлению();
	
	ГруппаОтборов = Элементы["ГруппаОтбора_" + Идентификатор];
	
	НовыйЭлемент = Элементы.Добавить("Отбор_" + Идентификатор, Тип("ТаблицаФормы"), ГруппаОтборов);
	НовыйЭлемент.Отображение = ОтображениеТаблицы.Список;
	НовыйЭлемент.АвтоМаксимальнаяВысота = Истина;
	Если ЗначенияХарактеристик.Количество() <= 5 Тогда
		НовыйЭлемент.Высота = ЗначенияХарактеристик.Количество() + 1;
	Иначе
		НовыйЭлемент.Высота = 6;
		НовыйЭлемент.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.ИспользоватьВсегда;
	КонецЕсли;
	НовыйЭлемент.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	НовыйЭлемент.РастягиватьПоВертикали = Ложь;
	НовыйЭлемент.ПутьКДанным = Реквизит.Имя;
	НовыйЭлемент.КоманднаяПанель.Видимость = Ложь;
	НовыйЭлемент.ЧередованиеЦветовСтрок = Истина;
	НовыйЭлемент.ЦветРамки = ЦветаСтиля.ЦветФонаФормы;
	НовыйЭлемент.Шрифт = Новый Шрифт(, 8);
	НовыйЭлемент.ИзменятьПорядокСтрок = Ложь;
	НовыйЭлемент.ИзменятьСоставСтрок = Ложь;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ИзменениеОтбора");
	
	ЭлементКолонки = Элементы.Добавить(НовыйЭлемент.Имя + "_Пометка", Тип("ПолеФормы"), НовыйЭлемент);
	ЭлементКолонки.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементКолонки.ШиринаЭлемента = 1;
	ЭлементКолонки.ПутьКДанным = Реквизит.Имя + ".Пометка";
	ЭлементКолонки = Элементы.Добавить(НовыйЭлемент.Имя + "_Значение", Тип("ПолеФормы"), НовыйЭлемент);
	ЭлементКолонки.АвтоМаксимальнаяВысота = Истина;
	ЭлементКолонки.АвтоВысотаЯчейки = Истина;
	ЭлементКолонки.ТолькоПросмотр = Истина;
	ЭлементКолонки.ПутьКДанным = Реквизит.Имя + ".Значение";	
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТекущегоРодителяНаСервере()
	
	Если Элементы.Список.ТекущийРодитель = Неопределено Тогда
		Элементы.Список.ТекущийРодитель = Элементы.Список.ТекущаяСтрока;
	Иначе
		Элементы.Список.ТекущийРодитель = Неопределено;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьХарактеристики(ТекущиеДанные)
	
	Элементы.ДекорацияКореньКатегорий.Картинка = БиблиотекаКартинок.ДлительнаяОперация16;
	
	ИдентификаторТекущейНоменклатуры = ТекущиеДанные.ИдентификаторНоменклатуры;
	ТекущаяСтрока                    = Элементы.Список.ТекущийРодитель;
		
	Если Не ЗначениеЗаполнено(ИдентификаторТекущейНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
		
	СтрокаДанных = Список.НайтиПоИдентификатору(Элементы.Список.ТекущийРодитель);
	СтрокаДанных.ПолучитьЭлементы().Очистить();
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьХарактеристикиЗавершение", ЭтотОбъект, 
		Новый Структура("ТекущаяСтрока, ИдентификаторНоменклатуры", 
			ТекущаяСтрока, 
			ИдентификаторТекущейНоменклатуры));		
			
	ПараметрыМетода = РаботаСНоменклатуройСлужебныйКлиентСервер.ПараметрыЗапросаХарактеристик();
	
	БыстрыеОтборы.Очистить();
	
	ЗаполнитьОтборыПоДополнительнымРеквизитам(ПараметрыМетода);
	
	ПараметрыМетода.ИдентификаторНоменклатуры = ИдентификаторТекущейНоменклатуры;
	ПараметрыМетода.НаборПолей                = "Минимальный";
	ПараметрыМетода.ЗаполнитьПризнакЗагрузки  = Истина;
	ПараметрыМетода.НомерСтраницыДанных       = НомерСтраницыДанных;
	
	РаботаСНоменклатуройКлиент.ПолучитьДанныеХарактеристикСервиса(
		Оповещение, 
		ПараметрыМетода, 
		ЭтотОбъект, 
		ИдентификаторЗаданияРаботыСНоменклатурой, 
		Элементы.ДекорацияКореньКатегорий);
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьХарактеристикиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВывестиХарактеристики(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиХарактеристики(Результат, ДополнительныеПараметры)
	
	Элементы.ДекорацияКореньКатегорий.Картинка = БиблиотекаКартинок.НавигацияДомойБЭД;
	
	ДанныеХарактеристик = Новый Массив;
	
	ЗаполнитьДанныеХарактеристик(Результат.АдресРезультата, ДанныеХарактеристик);
	
	ТекущаяСтрока = Список.НайтиПоИдентификатору(ДополнительныеПараметры.ТекущаяСтрока);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыСтроки = ТекущаяСтрока.ПолучитьЭлементы();
	
	ЭлементыСтроки.Очистить();
	
	Для каждого ТекущаяХарактеристика Из ДанныеХарактеристик Цикл
		
		СтрокаХарактеристики = ЭлементыСтроки.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаХарактеристики, ТекущаяСтрока);
		
		СтрокаХарактеристики.ЭтоХарактеристика           = Истина;
		СтрокаХарактеристики.ИдентификаторХарактеристики = ТекущаяХарактеристика.Идентификатор;
		СтрокаХарактеристики.НаименованиеХарактеристики  = ТекущаяХарактеристика.Наименование;
		СтрокаХарактеристики.Загружена                   = ТекущаяХарактеристика.Загружена;
		СтрокаХарактеристики.Характеристика              = ТекущаяХарактеристика.Характеристика;
		СтрокаХарактеристики.НаименованиеНоменклатуры    = ТекущаяСтрока.Наименование;
		
		СтрокаХарактеристики.Наименование = 
			СтрШаблон("%1, %2", СтрокаХарактеристики.Наименование, СтрокаХарактеристики.НаименованиеХарактеристики);
		
	КонецЦикла;	
			
КонецПроцедуры

&НаСервере
Процедура ДополнитьДанныеПоНоменклатуре(ДанныеНоменклатуры)
	
	ДанныеНоменклатуры.Вставить("ИдентификаторКатегории",       "");
	ДанныеНоменклатуры.Вставить("НаименованиеКатегории",        "");
	ДанныеНоменклатуры.Вставить("НаименованиеЕдиницыИзмерения", "");
	ДанныеНоменклатуры.Вставить("КодЕдиницыИзмерения",          "");

	ДанныеНоменклатурыСервиса = РаботаСНоменклатурой.
		ДанныеНоменклатурыСервиса(ДанныеНоменклатуры.ИдентификаторНоменклатуры);	

	Если ДанныеНоменклатурыСервиса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНоменклатуры.ИдентификаторКатегории       = ДанныеНоменклатурыСервиса[0].Категория.Идентификатор;
	ДанныеНоменклатуры.НаименованиеКатегории        = ДанныеНоменклатурыСервиса[0].Категория.Наименование;
	ДанныеНоменклатуры.НаименованиеЕдиницыИзмерения = ДанныеНоменклатурыСервиса[0].ЕдиницаИзмерения.Наименование;
	ДанныеНоменклатуры.КодЕдиницыИзмерения          = ДанныеНоменклатурыСервиса[0].ЕдиницаИзмерения.ОКЕИ;
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеПослеОткрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("Логин") Тогда
		
		// Если интернет поддержка подключена производится загрузка данных.
		
		ИнтернетПоддержкаПодключена = Истина;
		ПолучитьДанныеСервиса(ТекущаяКатегория)
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Элементы.СтруктураКатегорий.Заголовок = НСтр("ru = 'Категории не загружены'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормы()
	
	ТекущаяКатегория = ИдентификаторКатегории;
	
	РазмерПорцииДанныхНоменклатуры = РаботаСНоменклатурой.РазмерПорцииДанныхНоменклатуры();
	
	НомерСтраницыДанных = 1;
	
	АвтоНавигационнаяСсылка = Ложь;
	НавигационнаяСсылка = "e1cib/app/" + ЭтотОбъект.ИмяФормы;
	
	ИнтернетПоддержкаПодключена = ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();	
	
	ПравоИзмененияДанных = РаботаСНоменклатурой.ПравоИзмененияДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеСервиса(ИдентификаторКатегории = Неопределено)
	
	ТекущаяКатегория      = ИдентификаторКатегории;
	ТекущаяВетка          = Неопределено;
	КатегорииСервиса      = Новый Массив;
	ТребуетсяПодгрузка    = Истина;
	ЕстьКорневыеКатегории = Категории.ПолучитьЭлементы().Количество() > 0;
	
	Если ЕстьКорневыеКатегории Или Не ЗначениеЗаполнено(ИдентификаторНоменклатуры) Тогда
		ПодготовитьТекущуюВетку(Категории, КартаДереваКатегорий, ТекущаяВетка, ИдентификаторКатегории,
			Элементы.СтруктураКатегорий, Элементы.ДекорацияПодкатегорий, ТребуетсяПодгрузка);
	Иначе
		ТекущаяВетка = Категории;
	КонецЕсли;
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ИдентификаторКатегории",  ИдентификаторКатегории);
	ПараметрыЗавершения.Вставить("ЕстьКорневыеКатегории",   ЕстьКорневыеКатегории);
	ПараметрыЗавершения.Вставить("ИдентификаторЗадания",    ИдентификаторЗаданияОбработкиРубрикатора);
	
	ПараметрыПоиска = ?(ИдентификаторКатегории = Неопределено И Не ЗначениеЗаполнено(СтрокаПоиска), 
		ИдентификаторКатегории, СформироватьПараметрыПоиска());
	
	ПолучитьОтборы = ИдентификаторКатегории <> Неопределено;
	
	НоменклатураИОтборы = Новый Структура;
	НоменклатураИОтборы.Вставить("ПараметрыПоиска", ПараметрыПоиска);
	НоменклатураИОтборы.Вставить("ПолучитьОтборы",  ПолучитьОтборы);
	
	Если ЗначениеЗаполнено(ИдентификаторНоменклатуры) Тогда
		НоменклатураИОтборы.Вставить("ИдентификаторНоменклатуры", ИдентификаторНоменклатуры);
	КонецЕсли;
	
	ПолучитьДанныеСервисаЗавершение = Новый ОписаниеОповещения("ПолучитьДанныеСервисаЗавершение",
		ЭтотОбъект, ПараметрыЗавершения);
	
	Если ИдентификаторКатегории = Неопределено И Не ЗначениеЗаполнено(СтрокаПоиска) Тогда
		
		РаботаСНоменклатуройКлиент.ПолучитьКорневыеКатегории(ПолучитьДанныеСервисаЗавершение, 
			ЭтотОбъект, ДополнительныеПараметрыЗапросаНоменклатуры(),
				ИдентификаторЗаданияОбработкиРубрикатора, Элементы.ДекорацияКореньКатегорий);
		
	ИначеЕсли ТекущаяВетка = Неопределено И ЕстьКорневыеКатегории Тогда
		
		РаботаСНоменклатуройКлиент.ПолучитьКатегорииНаПутиКЭлементу(ПолучитьДанныеСервисаЗавершение, 
			ИдентификаторКатегории, ДополнительныеПараметрыЗапросаНоменклатуры(), 
				ЭтотОбъект, ИдентификаторЗаданияОбработкиРубрикатора, Элементы.ДекорацияКореньКатегорий);
		
	ИначеЕсли ТекущаяВетка = Неопределено И Не ЕстьКорневыеКатегории Тогда
		
		РаботаСНоменклатуройКлиент.ПолучитьКатегорииНаПутиКЭлементуСКорневымиКатегориями(ПолучитьДанныеСервисаЗавершение,
			ИдентификаторКатегории, ДополнительныеПараметрыЗапросаНоменклатуры(), 
				ЭтотОбъект, ИдентификаторЗаданияОбработкиРубрикатора, Элементы.ДекорацияКореньКатегорий);
	Иначе
		
		РаботаСНоменклатуройКлиент.ПолучитьСокращенноеОписаниеДочернихКатегорий(ПолучитьДанныеСервисаЗавершение,
			ИдентификаторКатегории, ЭтотОбъект, НоменклатураИОтборы, ИдентификаторЗаданияОбработкиРубрикатора,
			Элементы.ДекорацияКореньКатегорий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДополнительныеПараметрыЗапросаНоменклатуры()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВключитьНоменклатуру",          Истина);
	Результат.Вставить("РежимОтображенияХарактеристик", РежимПросмотраСписка);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьДанныеСервисаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если ИдентификаторЗаданияОбработкиРубрикатора <> ДополнительныеПараметры.ИдентификаторЗадания Тогда
		Возврат;
	КонецЕсли;
	ИдентификаторЗаданияОбработкиРубрикатора = Неопределено;
	
	ТекущаяНоменклатура = Неопределено;
	
	ОбработатьДанныеСервиса(Результат.АдресРезультата, ДополнительныеПараметры, ТекущаяНоменклатура);
	
	УстановитьВидимостьДоступность();
	
	Если ТекущаяНоменклатура <> Неопределено Тогда
		Элементы.Список.ТекущаяСтрока = ТекущаяНоменклатура;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДанныеСервиса(АдресРезультата, ДополнительныеПараметры, ТекущаяНоменклатура = Неопределено)
	
	Элементы.ДекорацияКореньКатегорий.Картинка = БиблиотекаКартинок.НавигацияДомойБЭД;
	
	// Обработка данных категорий
	
	ИдентификаторКатегории = ДополнительныеПараметры.ИдентификаторКатегории;
	
	ЕстьКорневыеКатегории  = ДополнительныеПараметры.ЕстьКорневыеКатегории;
	
	Если Не ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		РезультатКартаДереваКатегорий = КартаДереваКатегорий.НайтиСтроки(Новый Структура("ИдентификаторКатегории",
			ИдентификаторКатегории));
		Если РезультатКартаДереваКатегорий.Количество() Тогда 
			ТекущаяВетка = Категории.НайтиПоИдентификатору(РезультатКартаДереваКатегорий[0].ИдентификаторСтрокиДерева);
			ТекущаяВетка.ДочерниеПодгружены = Ложь;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;	
	
	ДанныеСервиса = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ДанныеСервиса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСервиса.Свойство("Категории")
		И ДанныеСервиса.Категории = Неопределено Тогда
		
		ТекущаяВетка = Неопределено;
		ПодготовитьТекущуюВетку(Категории, КартаДереваКатегорий, ТекущаяВетка, ИдентификаторКатегории,
		Элементы.СтруктураКатегорий, Элементы.ДекорацияПодкатегорий);
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторКатегории) Тогда
		ДанныеСервиса.Свойство("ИдентификаторНачальнойКатегории", ИдентификаторКатегории);
		ТекущаяКатегория = ИдентификаторКатегории;
	КонецЕсли;
	
	ТекущаяВетка = Неопределено;
	ПодготовитьТекущуюВетку(Категории, КартаДереваКатегорий, ТекущаяВетка, ИдентификаторКатегории,
		Элементы.СтруктураКатегорий, Элементы.ДекорацияПодкатегорий);
	
	Если ДанныеСервиса.Свойство("Категории") Тогда
		ЗаполнитьДанныеДерева(ТекущаяВетка, ДанныеСервиса.Категории, ИдентификаторКатегории, ЕстьКорневыеКатегории);
	Иначе
		ЗаполнитьДанныеДерева(ТекущаяВетка, ДанныеСервиса, ИдентификаторКатегории, ЕстьКорневыеКатегории);
	КонецЕсли;
	
	ЗаполнитьПанельНавигации(ТекущаяВетка, Элементы.СтруктураКатегорий, Элементы.ДекорацияПодкатегорий);
	
	// Обработка данных номенклатуры
	ЭлементыСписка = Список.ПолучитьЭлементы();
	
	ПереченьНоменклатуры = Неопределено;
	ДанныеСервиса.Свойство("ПереченьНоменклатуры", ПереченьНоменклатуры);
	
	Если ПереченьНоменклатуры = Неопределено Тогда
		ЭлементыСписка.Очистить();
	Иначе
		ВывестиНоменклатуру(ЭлементыСписка, ПереченьНоменклатуры);
		Элементы.НайтиКарточки.Картинка = БиблиотекаКартинок.УправлениеПоиском;
	КонецЕсли;
	
	// Обработка отборов
	УдалитьЭлементыОтборов();
	
	ДополнительныеРеквизиты = Неопределено;
	ДанныеСервиса.Свойство("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	
	Если ДополнительныеРеквизиты <> Неопределено Тогда
		
		КоличествоВКолонке = ДополнительныеРеквизиты.Количество();
		Если КоличествоВКолонке > 20 Тогда
			КоличествоВКолонке = Окр(КоличествоВКолонке / 2, 0, РежимОкругления.Окр15как10) + 1;
		КонецЕсли;
		
		СформироватьОтборыПоРеквизитам(ДополнительныеРеквизиты, КоличествоВКолонке);
		
		Элементы.СтраницаОтборы.ТекущаяСтраница = Элементы.СтраницыОтборыГруппы;
		
		ОтборыПоКатегорииАктуальны = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНоменклатуру(ЭлементыСписка, ПереченьНоменклатуры, ЭтоЗапросПорцииДанных = Ложь)
	
	Если ПереченьНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоЗапросПорцииДанных Тогда
		ЭлементыСписка.Очистить();
	КонецЕсли;
		
	Для каждого ЭлементКоллекции Из ПереченьНоменклатуры Цикл
		
		НоваяСтрока = ЭлементыСписка.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
		
		НоваяСтрока.ИдентификаторНоменклатуры = ЭлементКоллекции.Идентификатор;
		НоваяСтрока.НаименованиеНоменклатуры  = ЭлементКоллекции.Наименование;
		
		Если ЭлементКоллекции.Идентификатор = ИдентификаторНоменклатуры Тогда
			ТекущаяНоменклатура = НоваяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
		Если РежимПросмотраСписка = "Группировка" 
			И ЭлементКоллекции.КоличествоХарактеристик > 0 Тогда
			
			// отображение подчиненных характеристик в иерархическом режиме просмотра
			
			НоваяСтрока.КоличествоХарактеристикПредставление = СтрШаблон(НСтр("ru = 'Характеристик: %1'"), 
				ЭлементКоллекции.КоличествоХарактеристик);		
			
			ТехническаяСтрока = НоваяСтрока.ПолучитьЭлементы().Добавить();
			ТехническаяСтрока.Наименование = ПредставлениеТехническойСтроки();
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПереченьНоменклатуры.Количество() = РазмерПорцииДанныхНоменклатуры Тогда
		ДобавитьСтрокуЗапросаДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуЗапросаДанных()
	
	НоваяСтрока = Список.ПолучитьЭлементы().Добавить();
	
	НоваяСтрока.ЭтоСтрокаЗапросаДанных = Истина;
	
	ИдентификаторСтрокиЗагрузкиДанных = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Управление видимостью колонки с характеристиками.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);	
	
	// Отбор
	
	ГруппаЭлементовОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбораДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаЭлементовОтбораДанных.Использование = Истина;
	
	ОтборЭлемента = ГруппаЭлементовОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.КоличествоХарактеристикПредставление");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаЭлементовОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.ЭтоХарактеристика");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение   = Истина;
		
	// Оформляемое поле
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокКоличествоХарактеристик.Имя);
	
	// Гиперссылка запроса данных.
	
	РаботаСНоменклатурой.УсловноеОформлениеГиперссылкиЗапросаДанных(ЭтотОбъект, "Список");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНоменклатуруИзСписка()
	
	ДанныеНоменклатуры = РаботаСНоменклатуройСлужебныйКлиентСервер.ШаблонДанныхНоменклатуры();	
	
	ДанныеНоменклатуры.Вставить("НаименованиеНоменклатуры",    "");
	ДанныеНоменклатуры.Вставить("НаименованиеХарактеристики",  "");
	ДанныеНоменклатуры.Вставить("ИспользуютсяХарактеристики", Ложь);
	
	ПараметрыЗакрытия = ПараметрыЗакрытияФормы();
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Закрыть(Неопределено);
		Возврат;
	КонецЕсли;
	
	ДанныеНоменклатуры.ИдентификаторНоменклатуры   = ТекущиеДанные.ИдентификаторНоменклатуры;
	ДанныеНоменклатуры.Номенклатура                = ТекущиеДанные.Номенклатура;
	ДанныеНоменклатуры.НаименованиеНоменклатуры    = ТекущиеДанные.НаименованиеНоменклатуры;
	ДанныеНоменклатуры.ИдентификаторХарактеристики = ТекущиеДанные.ИдентификаторХарактеристики;
	ДанныеНоменклатуры.НаименованиеХарактеристики  = ТекущиеДанные.НаименованиеХарактеристики;
	ДанныеНоменклатуры.ИспользуютсяХарактеристики  = ТекущиеДанные.КоличествоХарактеристик > 0;
	
	Если ТекущиеДанные.Загружена = 0
		И СоздаватьНоменклатуруПриВыборе Тогда
		
		Если ПодтверждатьСозданиеНоменклатуры Тогда
			
			Оповещение = Новый ОписаниеОповещения("ВопросСозданияНоменклатурыПриВыборе", ЭтотОбъект, 
				Новый Структура("ДанныеНоменклатуры", ДанныеНоменклатуры));
			
			ПоказатьВопрос(Оповещение, "Выбранная номенклатура будет загружена. Продолжить?", РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ЗагрузитьНоменклатуру(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеНоменклатуры), Истина);	
		КонецЕсли;
	Иначе
		
		Если ЭтоПривязкаНоменклатуры
			И ТекущиеДанные.Загружена = 3 Тогда
			
			// Если выбрана характеристика, номенклатура которой загружена в режиме БезХарактеристик
			
			ВыбранныеДанные = Новый Структура("ИдентификаторНоменклатуры, ИдентификаторХарактеристики");
			
			ЗаполнитьЗначенияСвойств(ВыбранныеДанные, ТекущиеДанные);
			
			ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.НарушениеРежимаЗагрузкиХарактеристик", 
				Новый Структура("Идентификаторы", 
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранныеДанные)), ЭтотОбъект);
			Возврат;
		КонецЕсли;
		
		Отказ = Ложь;	
		
		Результат = КупитьКарточкиНоменклатуры(ДанныеНоменклатуры.ИдентификаторНоменклатуры, Отказ);	
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если Результат.ЕстьОшибки Тогда
			ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.ОшибкаПокупкиНоменклатуры", 
				Новый Структура("Ошибка", Результат.ОписаниеОшибки));
			Возврат;
		КонецЕсли;
		
		ЗаполнитьСсылкиНаОбъекты(ДанныеНоменклатуры);
		
		Если ВозвращатьРасширенныйНаборПолей Тогда
			ДополнитьДанныеПоНоменклатуре(ДанныеНоменклатуры);
		КонецЕсли;
						
		ПараметрыЗакрытия.ВыбранныеОбъекты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеНоменклатуры);
		
		Если ЗначениеЗаполнено(ДанныеНоменклатуры.ИдентификаторХарактеристики)
			И ИдентификаторНоменклатурыПривязан(ИдентификаторНоменклатуры) Тогда
			
			// Привязка к характеристике
			
			ПараметрыЗакрытия.ПривязкаХарактеристики = Истина;			
		КонецЕсли;	
		
		Закрыть(ПараметрыЗакрытия);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСсылкиНаОбъекты(ДанныеНоменклатуры)
	
	СсылкиНаОбъекты = РаботаСНоменклатурой.НоменклатураИХарактеристикиПоИдентификаторам(ДанныеНоменклатуры);
	
	Если ЗначениеЗаполнено(СсылкиНаОбъекты) Тогда
		ЗаполнитьЗначенияСвойств(ДанныеНоменклатуры, СсылкиНаОбъекты[0]);
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИдентификаторНоменклатурыПривязан(ИдентификаторНоменклатуры)
	
	Возврат РаботаСНоменклатурой.ИдентификаторНоменклатурыИспользуется(ИдентификаторНоменклатуры);
	
КонецФункции

&НаКлиенте
Процедура ВопросСозданияНоменклатурыПриВыборе(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено 
		ИЛИ Результат = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
	КонецЕсли;
	
	ЗагрузитьНоменклатуру(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДополнительныеПараметры.ДанныеНоменклатуры), Истина);	
	
КонецПроцедуры

&НаСервере
Функция КупитьКарточкиНоменклатуры(Идентификатор, Отказ)
	
	Возврат РаботаСНоменклатурой.ПокупкаКарточекНоменклатуры(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор), Отказ);
		
КонецФункции

&НаКлиенте
Процедура ОткрытьКарточкуНоменклатуры()
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификаторы = ИдентификаторыНоменклатурыИХарактеристик();
	
	Если Идентификаторы.Количество() = 1 Тогда 
		ИдентификаторФормы = Идентификаторы[0].ИдентификаторНоменклатуры;
	Иначе
		ИдентификаторФормы = "";
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.РаботаСНоменклатурой.Форма.ЗагрузкаНоменклатуры.ОткрытьКарточкиНоменклатуры");

	РаботаСНоменклатуройКлиент.ОткрытьФормуКарточкиНоменклатуры(Идентификаторы, ЭтотОбъект);
			
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыОтборов()
	
	МассивУдаления = Новый Массив;
	Для каждого ПодчиненныйЭлемент Из Элементы.ГруппаОтборов0.ПодчиненныеЭлементы Цикл
		МассивУдаления.Добавить(ПодчиненныйЭлемент);
	КонецЦикла;
	Для каждого ПодчиненныйЭлемент Из Элементы.ГруппаОтборов1.ПодчиненныеЭлементы Цикл
		МассивУдаления.Добавить(ПодчиненныйЭлемент);
	КонецЦикла;
	Для каждого ЭлементУдаления Из МассивУдаления Цикл
		Элементы.Удалить(ЭлементУдаления);
	КонецЦикла;
	ИзменитьРеквизиты(, СписокДобавленныхРеквизитов.ВыгрузитьЗначения());
	СписокДобавленныхРеквизитов.Очистить();
	
	Элементы.СтраницаОтборы.ТекущаяСтраница = Элементы.СтраницаНетОтборов;
	
	ОтборыПоКатегорииАктуальны = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтборыПоРеквизитам(ДополнительныеРеквизиты, КоличествоВКолонке)
	
	РеквизитыХарактеристик.Очистить();
	
	СчетчикХарактеристики = 0;
	Для Каждого ТекущийРеквизит Из ДополнительныеРеквизиты Цикл
		
		Если ТекущийРеквизит.ЭтоРеквизитХарактеристики Тогда
			РеквизитыХарактеристик.Добавить(ТекущийРеквизит.Идентификатор);
		КонецЕсли;
		
		НаименованиеЕдиницыИзмерения = "";
		Если Не ТекущийРеквизит.ЕдиницаИзмерения = Неопределено Тогда 
			НаименованиеЕдиницыИзмерения = ТекущийРеквизит.ЕдиницаИзмерения.Наименование;
		КонецЕсли;
		Представление = ТекущийРеквизит.Наименование+ ?(ПустаяСтрока(НаименованиеЕдиницыИзмерения),"", ", " + НаименованиеЕдиницыИзмерения);
				
		НомерГруппы = Цел(СчетчикХарактеристики / КоличествоВКолонке);
		ГруппаОтборов = Элементы["ГруппаОтборов" + НомерГруппы];
		СчетчикХарактеристики = СчетчикХарактеристики + 1;
		
		ИдентификаторРеквизита = Формат(ТекущийРеквизит.Идентификатор,"ЧРГ=; ЧГ=");
		
		Если СтрСравнить(ТекущийРеквизит.Тип, "Список") = 0 Тогда
			
			СтрелкаВниз = "↓";
			
			ГруппаЗаголовкаОтбора = ДобавитьГруппуЗаголовокОтбораСоСписком(ИдентификаторРеквизита, ГруппаОтборов);
			
			НовыйЭлемент = Элементы.Добавить("ЗаголовокОтбора_" + ИдентификаторРеквизита, Тип("ДекорацияФормы"), ГруппаЗаголовкаОтбора);
			НовыйЭлемент.Заголовок = Представление + " " + СтрелкаВниз;
			НовыйЭлемент.Гиперссылка = Истина;
			НовыйЭлемент.Подсказка = Представление;
			НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_НажатиеГиперссылки");
			
			НовыйЭлемент = Элементы.Добавить("ДекорацияДлительнойОперацииОтбора_" + ИдентификаторРеквизита, Тип("ДекорацияФормы"), ГруппаЗаголовкаОтбора);
			НовыйЭлемент.Вид      = ВидДекорацииФормы.Картинка;
			НовыйЭлемент.Картинка = БиблиотекаКартинок.Пустая;
			
			ДобавитьПустуюГруппу(ИдентификаторРеквизита, ГруппаОтборов);
			
		ИначеЕсли СтрСравнить(ТекущийРеквизит.Тип, "Булево") = 0 Тогда
			
			МассивРеквизитов = Новый Массив;
			Реквизит = Новый РеквизитФормы("Отбор_" + ИдентификаторРеквизита, Новый ОписаниеТипов("Булево"));
			МассивРеквизитов.Добавить(Реквизит);
			ИзменитьРеквизиты(МассивРеквизитов);
			СписокДобавленныхРеквизитов.Добавить(Реквизит.Имя, Представление);
			
			НовыйЭлемент = Элементы.Добавить("Отбор_" + ИдентификаторРеквизита, Тип("ПолеФормы"), ГруппаОтборов);
			НовыйЭлемент.Заголовок = Представление;
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
			НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			НовыйЭлемент.ПутьКДанным = Реквизит.Имя;
			НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ИзменениеОтбора");
			
		ИначеЕсли СтрСравнить(ТекущийРеквизит.Тип, "Число") = 0 Тогда
			
			МассивРеквизитов = Новый Массив;
			Реквизит = Новый РеквизитФормы("Отбор_" + ИдентификаторРеквизита, Новый ОписаниеТипов("Число"));
			МассивРеквизитов.Добавить(Реквизит);
			ИзменитьРеквизиты(МассивРеквизитов);
			СписокДобавленныхРеквизитов.Добавить(Реквизит.Имя, Представление);
			
			НовыйЭлемент = Элементы.Добавить("Отбор_" + ИдентификаторРеквизита, Тип("ПолеФормы"), ГруппаОтборов);
			НовыйЭлемент.Заголовок = Представление;
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.Ширина = 0;
			НовыйЭлемент.ПутьКДанным = Реквизит.Имя;
			
			ПодсказкаВвода = Новый Массив;
			Если ЗначениеЗаполнено(ТекущийРеквизит.МинимальноеЗначение) Тогда 
				ПодсказкаВвода.Добавить(СтрШаблон(НСтр("ru = 'от %1'"), Формат(ТекущийРеквизит.МинимальноеЗначение, "ЧН=0; ЧГ=3,0; ЧО=1")))
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекущийРеквизит.МаксимальноеЗначение) Тогда
				ПодсказкаВвода.Добавить(СтрШаблон(НСтр("ru = 'до %1'"), Формат(ТекущийРеквизит.МаксимальноеЗначение, "ЧН=0; ЧГ=3,0; ЧО=1")))
			КонецЕсли;
			НовыйЭлемент.Подсказка = Представление + Символы.ПС + СтрСоединить(ПодсказкаВвода, " ");
			
			НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ИзменениеОтбора");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОтборыПоКатегорииАктуальны = Истина;
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьПустуюГруппу(ИдентификаторРеквизита, ГруппаОтборов)
	
	НоваяГруппа = Элементы.Добавить("ГруппаОтбора_" + ИдентификаторРеквизита, Тип("ГруппаФормы"), ГруппаОтборов);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.Видимость = Ложь;
	НоваяГруппа.ОтображатьОтступСлева = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьГруппуЗаголовокОтбораСоСписком(ИдентификаторРеквизита, ГруппаОтборов)
	
	НоваяГруппа = Элементы.Добавить("ЗаголовкаОтбора_" + ИдентификаторРеквизита, Тип("ГруппаФормы"), ГруппаОтборов);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппа.Видимость = Истина;
	НоваяГруппа.ОтображатьОтступСлева = Ложь;
	
	Возврат НоваяГруппа;
	
КонецФункции

&НаСервере
Процедура НастроитьВнешнийВидФормы()
	
	НастройкиПодсистемы = РаботаСНоменклатурой.НастройкиПодсистемы();
	
	// Настройка режима представления характеристик.
	
	Элементы.Список.КонтекстноеМеню.Видимость 
		= НастройкиПодсистемы.РежимПредставленияНоменклатурыСХарактеристиками = "Настраиваемый";
		
	Если НастройкиПодсистемы.РежимПредставленияНоменклатурыСХарактеристиками = "Настраиваемый" Тогда
		РежимПросмотраСписка = "Группировка";	
	Иначе
		РежимПросмотраСписка = НастройкиПодсистемы.РежимПредставленияНоменклатурыСХарактеристиками;	
	КонецЕсли;	
	
	// Настройка множественного режима выбора
	
	Элементы.Список.МножественныйВыбор = НастройкиПодсистемы.ИспользоватьПакетноеСозданиеНоменклатуры 
		И НЕ РежимВыбораНоменклатуры;
	Элементы.Список.РежимВыделения = ?(Элементы.Список.МножественныйВыбор,
		РежимВыделенияТаблицы.Множественный,
		РежимВыделенияТаблицы.Одиночный);
	
	Элементы.СписокСоздатьНоменклатуру.Видимость         = НЕ РежимВыбораНоменклатуры;
	Элементы.СписокСоздатьНоменклатуру.КнопкаПоУмолчанию = НЕ РежимВыбораНоменклатуры;
	Элементы.СписокВыбратьНоменклатуру.Видимость         = РежимВыбораНоменклатуры;
	Элементы.СписокВыбратьНоменклатуру.КнопкаПоУмолчанию = РежимВыбораНоменклатуры;
	
	ЗакрыватьПриВыборе = РежимВыбораНоменклатуры;
	
	Если РежимВыбораНоменклатуры Тогда 
		Заголовок = НСтр("ru = 'Выбор номенклатуры из сервиса 1С:Номенклатура'");
	Иначе
		Заголовок = НСтр("ru = 'Добавление номенклатуры из сервиса 1С:Номенклатура'");
	КонецЕсли;
	
	Элементы.СтруктураКатегорий.Заголовок = НСтр("ru = 'Загрузка данных...'");
	Элементы.ДекорацияПодкатегорий.Заголовок = "";
	
	Элементы.СписокСоздатьНоменклатуру.Доступность      = Ложь;
	Элементы.СписокОткрытьКарточку.Доступность          = Ложь;
	Элементы.ГруппаПанельОтборов.Видимость              = Ложь;
	Элементы.СтраницыДлительнойОперации.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперацияНеАктивна;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПанельНавигации(ТекущаяВетка, СтруктураКатегорий, ДекорацияПодкатегорий)
	
	Если ТекущаяВетка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущаяВетка) = Тип("ДанныеФормыДерево") Тогда
		СтруктураКатегорий.Заголовок = Новый ФорматированнаяСтрока(ТекстПредставленияКорневойКатегории());
	Иначе
		СтруктураКатегорий.Заголовок = Новый ФорматированнаяСтрока(ПолучитьПутьККатегории(ТекущаяВетка));
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	СтрокиКатегорий = ТекущаяВетка.ПолучитьЭлементы();
	
	ФорматированнаяСтрокаКатегорий = Новый Массив;
	
	Для каждого ЭлементКоллекции Из СтрокиКатегорий Цикл
		ФорматированнаяСтрокаКатегорий.Добавить(
			Новый ФорматированнаяСтрока(ЭлементКоллекции.Наименование,,,,ЭлементКоллекции.Идентификатор));
		ФорматированнаяСтрокаКатегорий.Добавить(РазделительПодкатегорий());
	КонецЦикла;
	
	ДекорацияПодкатегорий.Заголовок = Новый ФорматированнаяСтрока(ФорматированнаяСтрокаКатегорий);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	// Можно создавать и привязывать только номенклатуру со статусом не загружена или загружена частично.
	// Доступность кнопки для режима 3 оставляется для возможности уведомления пользователя.
	ЕстьВозможностьЗагрузкиИПривязки = 
		ТекущиеДанные <> Неопределено И ТекущиеДанные.Загружена <> 1;
	
	Элементы.СписокСоздатьНоменклатуру.Доступность = ЕстьВозможностьЗагрузкиИПривязки;
	Элементы.СписокОткрытьКарточку.Доступность     = ТекущиеДанные <> Неопределено;
	Элементы.ГруппаПанельОтборов.Видимость         = Элементы.ПоказыватьОтборы.Пометка;
	
	Если ЭтоПривязкаНоменклатуры Тогда
		
		// В режиме привязкки действует правила как и при загрузке - нельзя выбирать загруженные.
		
		Элементы.СписокВыбратьНоменклатуру.Доступность = ЕстьВозможностьЗагрузкиИПривязки;
		
	ИначеЕсли ЗапрещатьВыборЗагруженных Тогда
		
		// В режиме запрета загруженных доступна возможность выбора только строк без флагов.
		
		Элементы.СписокВыбратьНоменклатуру.Доступность = ТекущиеДанные <> Неопределено И ТекущиеДанные.Загружена = 0;
		
	Иначе
		Элементы.СписокВыбратьНоменклатуру.Доступность = ТекущиеДанные <> Неопределено;
	КонецЕсли;
	
	Если НЕ ПравоИзмененияДанных Тогда
		Элементы.СписокСоздатьНоменклатуру.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПутьККатегории(ТекущаяВетка)
	
	МассивПодстрок = Новый Массив;
	
	ДополнитьМассивПодстрок(ТекущаяВетка, МассивПодстрок);
	
	Возврат МассивПодстрок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьМассивПодстрок(ТекущаяВетка, МассивПодстрок)
	
	МассивПодстрок.Вставить(0, Новый ФорматированнаяСтрока(ТекущаяВетка.Наименование,,,,ТекущаяВетка.Идентификатор));
	
	Родитель = ТекущаяВетка.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		МассивПодстрок.Вставить(0, РазделительКатегорий());
		ДополнитьМассивПодстрок(Родитель, МассивПодстрок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПодготовитьТекущуюВетку(Категории, КартаДереваКатегорий, ТекущаяВетка, ИдентификаторКатегории, СтруктураКатегорий, ДекорацияПодкатегорий, ТребуетсяПодгрузка = Истина)
	
	Если ИдентификаторКатегории <> Неопределено Тогда
		
		РезультатКартаДереваКатегорий = КартаДереваКатегорий.НайтиСтроки(Новый Структура("ИдентификаторКатегории", ИдентификаторКатегории));
		Если РезультатКартаДереваКатегорий.Количество() Тогда 
			ТекущаяВетка = Категории.НайтиПоИдентификатору(РезультатКартаДереваКатегорий[0].ИдентификаторСтрокиДерева);
		КонецЕсли;
		
		Если ТекущаяВетка = Неопределено Тогда 
			ТребуетсяПодгрузка = Истина;
		Иначе
			Если ТекущаяВетка.ДочерниеПодгружены Тогда
				ТребуетсяПодгрузка = Ложь;
				ЗаполнитьПанельНавигации(ТекущаяВетка, СтруктураКатегорий, ДекорацияПодкатегорий);
				Возврат;
			Иначе
				ТекущаяВетка.ДочерниеПодгружены = Истина;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ТекущаяВетка = Категории;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДерева(ТекущаяВетка, ДанныеДерева, ИдентификаторКатегории, ЕстьКорневыеКатегории)
	
	Если ТипЗнч(ДанныеДерева) = Тип("Структура") Тогда
		
		ДобавитьВДеревоКатегорийЭлементыДоВыбраннойКатегории(ДанныеДерева, ЕстьКорневыеКатегории);
		ПодготовитьТекущуюВетку(Категории, КартаДереваКатегорий, ТекущаяВетка, ИдентификаторКатегории, 
			Элементы.СтруктураКатегорий, Элементы.ДекорацияПодкатегорий);
			
	Иначе
		ДобавитьВДеревоКатегорийДочерниеКатегории(ТекущаяВетка, ДанныеДерева); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВДеревоКатегорийЭлементыДоВыбраннойКатегории(ДанныеДерева, ЕстьКорневыеКатегории)
	
	ПутьККатегории = ДанныеДерева.ИдентификаторыКатегорийУзлов;
	Если ПутьККатегории = Неопределено 
		ИЛИ ПутьККатегории.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли; 
	
	ТаблицаКатегорий = ДанныеДерева.ТаблицаКатегорий;
	ТаблицаКатегорий.Индексы.Добавить("ИдентификаторРодителя");
	
	Если Не ЕстьКорневыеКатегории Тогда 
		ДобавитьВДеревоКатегорийДочерниеКатегории(Категории, ДанныеДерева.КорневыеКатегории);
	КонецЕсли;
	
	ПутьКЭлементу = Новый Массив;
	
	Для каждого ТекущийУзел Из ПутьККатегории Цикл
		
		ТекущаяГруппа = Категории.ПолучитьЭлементы();
		
		Для Индекс = -ТекущийУзел.Значение.Количество()+1 По 0 Цикл
			ЭлементКоллекции =  ТекущийУзел.Значение[-Индекс];
			Для каждого СтрокаДереваПоИдентификатору Из ТекущаяГруппа Цикл
				Если СтрокаДереваПоИдентификатору.Идентификатор = ЭлементКоллекции Тогда
					
					ИдентификаторСтроки = СтрокаДереваПоИдентификатору.ПолучитьИдентификатор();
					ПутьКЭлементу.Добавить(ИдентификаторСтроки);
					
					Если НЕ СтрокаДереваПоИдентификатору.ДочерниеПодгружены Тогда
						ОтборПоРодителю = Новый Структура("ИдентификаторРодителя", ЭлементКоллекции);
						ДочерниеЭлементы = ТаблицаКатегорий.Скопировать(ОтборПоРодителю);
						Если ДочерниеЭлементы.Количество() Тогда 
							ДобавитьВДеревоКатегорийДочерниеКатегории(СтрокаДереваПоИдентификатору, ДочерниеЭлементы);
						КонецЕсли;
					КонецЕсли;
					
					ТекущаяГруппа = СтрокаДереваПоИдентификатору.ПолучитьЭлементы();
					
					Прервать;
				КонецЕсли; 
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВДеревоКатегорийДочерниеКатегории(ТекущаяВетка, ДанныеДерева)
	
	СтрокиКатегорий = ТекущаяВетка.ПолучитьЭлементы();
	Для каждого ЭлементКоллекции Из ДанныеДерева Цикл
		РезультатКартаДереваКатегорий = КартаДереваКатегорий.НайтиСтроки(Новый Структура("ИдентификаторКатегории", ЭлементКоллекции.Идентификатор));
		Если РезультатКартаДереваКатегорий.Количество() = 0 Тогда
			
			СтрокаКатегории = СтрокиКатегорий.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКатегории, ЭлементКоллекции);
			
			ЗаполнитьЗначенияСвойств(КартаДереваКатегорий.Добавить(),
				Новый Структура("ИдентификаторСтрокиДерева, ИдентификаторКатегории",
								СтрокаКатегории.ПолучитьИдентификатор(), СтрокаКатегории.Идентификатор));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНавигациюКатегорийИЗагрузитьНоменклатуру(ИдентификаторКатегории)
	
	ПолучитьДанныеСервиса(ИдентификаторКатегории);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПодкатегорийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторКатегории = НавигационнаяСсылкаФорматированнойСтроки;
	
	ПолучитьДанныеСервиса(ИдентификаторКатегории);
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНоменклатуру(ИдентификаторКатегории = Неопределено, ЭтоЗапросПорцииДанных = Ложь, СтрокаАктивации = 0)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.РаботаСНоменклатурой.Форма.ЗагрузкаНоменклатуры.ПолучитьНоменклатуру");
	
	Если Не ЭтоЗапросПорцииДанных Тогда
		НомерСтраницыДанных = 1;
		Список.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
	ПараметрыЗавершения = Новый Структура;
	
	ПараметрыЗавершения.Вставить("ИдентификаторКатегории", ИдентификаторКатегории);
	ПараметрыЗавершения.Вставить("ИдентификаторЗадания",   ИдентификаторЗаданияРаботыСНоменклатурой);
	ПараметрыЗавершения.Вставить("ЭтоЗапросПорцииДанных",  ЭтоЗапросПорцииДанных);
	ПараметрыЗавершения.Вставить("СтрокаАктивации",        СтрокаАктивации);
	
	ПолучитьНоменклатуруЗавершение = Новый ОписаниеОповещения("ПолучитьНоменклатуруЗавершение",
		ЭтотОбъект, ПараметрыЗавершения);
		
	ПараметрыПоиска = СформироватьПараметрыПоиска();
	
	РаботаСНоменклатуройКлиент.ПолучитьПереченьНоменклатуры(ПолучитьНоменклатуруЗавершение, ПараметрыПоиска, ЭтотОбъект,
		ИдентификаторЗаданияРаботыСНоменклатурой, Элементы.НайтиКарточки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНоменклатуруЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Элементы.НайтиКарточки.Картинка = БиблиотекаКартинок.УправлениеПоиском;
	
	Если ИдентификаторЗаданияРаботыСНоменклатурой <> ДополнительныеПараметры.ИдентификаторЗадания Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗаданияРаботыСНоменклатурой = Неопределено;
	
	ЗаполнитьТаблицуФормы(Результат.АдресРезультата, ДополнительныеПараметры);
	
	Если ДополнительныеПараметры.ЭтоЗапросПорцииДанных 
		И ЗначениеЗаполнено(ДополнительныеПараметры.СтрокаАктивации) Тогда
		
		Элементы.Список.ТекущаяСтрока = ДополнительныеПараметры.СтрокаАктивации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьПараметрыПоиска(ОбновлятьЭлементыОтбора = Истина)
	
	ПараметрыПоиска = Новый Структура();
	
	ПараметрыПоиска.Вставить("НомерСтраницыДанных",           НомерСтраницыДанных);
	ПараметрыПоиска.Вставить("СтрокаПоиска",                  СтрокаПоиска);
	ПараметрыПоиска.Вставить("РежимОтображенияХарактеристик", РежимПросмотраСписка);
	
	Если ЗначениеЗаполнено(ТекущаяКатегория) Тогда
		ПараметрыПоиска.Вставить("ИдентификаторКатегории", ТекущаяКатегория);
		ПараметрыПоиска.Вставить("ИскатьВПодчиненных",     Истина);
	КонецЕсли;
	
	// Быстрые отборы.
	БыстрыеОтборы.Очистить();
	Если Не ПустаяСтрока(ПроизводительНаименование) И РазрешитьИзменениеПроизводителя Тогда
		БыстрыеОтборы.Добавить("ПроизводительНаименование", СтрШаблон(НСтр("ru = 'Производитель: %1'"),
			ПроизводительНаименование));
	КонецЕсли;
	
	Если ОтборыПоКатегорииАктуальны Тогда
		ЗаполнитьОтборыПоДополнительнымРеквизитам(ПараметрыПоиска);
	КонецЕсли;
	
	Если ОбновлятьЭлементыОтбора Тогда
		
		// Удаление старых элементов быстрых отборов.
		
		КоличествоЭлементов = Элементы.ГруппаБыстрыхОтборов.ПодчиненныеЭлементы.Количество();
		МассивЭлементовКУдалению = Новый Массив;
		Для ОбратныйИндекс = 1 По КоличествоЭлементов Цикл
			ИндексЭлемента = КоличествоЭлементов - ОбратныйИндекс;
			ЭлементОтбора = Элементы.ГруппаБыстрыхОтборов.ПодчиненныеЭлементы[ИндексЭлемента];
			Если ЭлементОтбора.Видимость Тогда
				МассивЭлементовКУдалению.Добавить(ИндексЭлемента);
			КонецЕсли;
		КонецЦикла;
		Если МассивЭлементовКУдалению.Количество() Тогда 
			УдалитьЭлементыБыстрыхОтборов(МассивЭлементовКУдалению)
		КонецЕсли;
		
		// Создание новых элементов быстрых отборов.
		
		Если БыстрыеОтборы.Количество() Тогда 
			СоздатьЭлементыБыстрыхОтборов();
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ПараметрыПоиска;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьОтборыПоДополнительнымРеквизитам(ПараметрыПоиска)
	
	МассивАтрибутов = Новый Массив;
	МассивПроизводителей = Новый Массив;
	Для каждого ДобавленныйРеквизит Из СписокДобавленныхРеквизитов Цикл
		ЗначениеРеквизита = ЭтотОбъект[ДобавленныйРеквизит.Значение];
		ИдентификаторРеквизита = СтрРазделить(ДобавленныйРеквизит.Значение, "_")[1];
		Если ДобавленныйРеквизит.Значение = "Отбор_Производитель" Тогда 
			СтрокаЗначенийОтборов = "";
			Для каждого ЭлементСписка Из ЗначениеРеквизита Цикл
				Если ЭлементСписка.Пометка Тогда
					МассивПроизводителей.Добавить(ЭлементСписка.Значение);
					СтрокаЗначенийОтборов = СтрокаЗначенийОтборов + ?(ПустаяСтрока(СтрокаЗначенийОтборов), "", ", ")
						+ ЭлементСписка.Представление;
				КонецЕсли;
			КонецЦикла;
			Если Не ПустаяСтрока(СтрокаЗначенийОтборов) Тогда
				БыстрыеОтборы.Добавить(ДобавленныйРеквизит.Значение, ДобавленныйРеквизит.Представление + ": "
					+ СтрокаЗначенийОтборов);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
			Если ЗначениеРеквизита <> Ложь Тогда
				МассивАтрибутов.Добавить(
					Новый Структура("Идентификатор, Значение",
						ИдентификаторРеквизита, ЗначениеРеквизита));
				БыстрыеОтборы.Добавить(ДобавленныйРеквизит.Значение, ДобавленныйРеквизит.Представление + ": "
					+ ЗначениеРеквизита);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("СписокЗначений") Тогда 
			СтрокаЗначенийОтборов = "";
			ИдентификаторыЗначений = Новый Массив;
			Для каждого ЭлементСписка Из ЗначениеРеквизита Цикл
				Если ЭлементСписка.Пометка Тогда
					ИдентификаторыЗначений.Добавить(ЭлементСписка.Значение);
					СтрокаЗначенийОтборов = СтрокаЗначенийОтборов + ?(ПустаяСтрока(СтрокаЗначенийОтборов), "", ", ")
						+ ЭлементСписка.Представление;
				КонецЕсли;
			КонецЦикла;
			Если ИдентификаторыЗначений.Количество() Тогда 
				МассивАтрибутов.Добавить(
					Новый Структура("Идентификатор, ИдентификаторыЗначений",
						ИдентификаторРеквизита, ИдентификаторыЗначений));
			КонецЕсли;
			Если Не ПустаяСтрока(СтрокаЗначенийОтборов) Тогда
				БыстрыеОтборы.Добавить(ДобавленныйРеквизит.Значение, ДобавленныйРеквизит.Представление + ": "
					+ СтрокаЗначенийОтборов);
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			МассивАтрибутов.Добавить(
				Новый Структура("Идентификатор, Значение",
					ИдентификаторРеквизита, ЗначениеРеквизита));
			БыстрыеОтборы.Добавить(ДобавленныйРеквизит.Значение, ДобавленныйРеквизит.Представление + ": " + ЗначениеРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивАтрибутов.Количество() Тогда
		
		ДополнительныеРеквизиты              = Новый Массив;
		ДополнительныеРеквизитыХарактеристик = Новый Массив;
		
		Для каждого ЭлементКоллекции Из МассивАтрибутов Цикл
			
			// Заполнение дополнительных реквизитов и реквизитов характеристик.
			
			Если РеквизитыХарактеристик.НайтиПоЗначению(ЭлементКоллекции.Идентификатор) = Неопределено Тогда
				ДополнительныеРеквизиты.Добавить(ЭлементКоллекции);
			Иначе
				ДополнительныеРеквизитыХарактеристик.Добавить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыПоиска.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
		ПараметрыПоиска.Вставить("РеквизитыХарактеристик",  ДополнительныеРеквизитыХарактеристик);
		
	КонецЕсли;
	
	Если МассивПроизводителей.Количество() Тогда
		ПараметрыПоиска.Вставить("ИдентификаторыПроизводителей", МассивПроизводителей);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыБыстрыхОтборов(МассивЭлементовКУдалению)
	
	Для Каждого ИндексЭлемента Из МассивЭлементовКУдалению Цикл
		ЭлементОтбора = Элементы.ГруппаБыстрыхОтборов.ПодчиненныеЭлементы[ИндексЭлемента];
		Элементы.Удалить(ЭлементОтбора);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыБыстрыхОтборов()
	
	Для каждого ЭлементОтбора Из БыстрыеОтборы Цикл
		
		// Добавление пустой группы.
		НоваяГруппа = Элементы.Добавить("ГруппаБыстрогоОтбора_" + ЭлементОтбора.Значение, Тип("ГруппаФормы"), Элементы.ГруппаБыстрыхОтборов);
		НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
		НоваяГруппа.ОтображатьЗаголовок = Ложь;
		НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		НоваяГруппа.Видимость = Истина;
		НоваяГруппа.ОтображатьОтступСлева = Ложь;
		НоваяГруппа.ЦветФона = WebЦвета.СветлоЖелтый;
		НоваяГруппа.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
		
		НовыйЭлемент = Элементы.Добавить("ЗаголовокОтбора_" + ЭлементОтбора.Значение, Тип("ДекорацияФормы"), НоваяГруппа);
		
		// Разбитие на форматированную строку.
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(Лев(ЭлементОтбора.Представление, СтрНайти(ЭлементОтбора.Представление, ":")));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			Сред(ЭлементОтбора.Представление, СтрНайти(ЭлементОтбора.Представление, ":")+1),, ЦветаСтиляЦветТекстаФормы));
		НовыйЭлемент.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		
		НовыйЭлемент.ЦветТекста = ЦветаСтиляПоясняющийТекст;
		НовыйЭлемент.Гиперссылка = Истина;
		НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_Нажатие");
		
		НовыйЭлемент = Элементы.Добавить("ОчиститьОтбор_" + ЭлементОтбора.Значение, Тип("ДекорацияФормы"), НоваяГруппа);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Картинка;
		НовыйЭлемент.Картинка = БиблиотекаКартинок.Очистить;
		НовыйЭлемент.Гиперссылка = Истина;
		НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_Нажатие");
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуФормы(АдресРезультата, ДополнительныеПараметры)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда 
		ДанныеПоНоменклатуре = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если ДанныеПоНоменклатуре = Неопределено Тогда 
			Список.ПолучитьЭлементы().Очистить();
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЭлементыСписка = Список.ПолучитьЭлементы();
	
	ВывестиНоменклатуру(ЭлементыСписка, ДанныеПоНоменклатуре.ПереченьНоменклатуры, 
		ДополнительныеПараметры.ЭтоЗапросПорцииДанных);
		
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКореньКатегорийНажатие(Элемент)
	
	ПолучитьДанныеСервиса();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураКатегорийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторКатегории = НавигационнаяСсылкаФорматированнойСтроки;
	
	ПолучитьДанныеСервиса(ИдентификаторКатегории);
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// При загрузке, стандартное поведение при активации не выполняется.
	Если Элементы.СтраницыДлительнойОперации.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперацияАктивна Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТекущиеДанные.ЭтоСтрокаЗапросаДанных Тогда
		Элементы.СписокОткрытьКарточку.Доступность = Ложь;
		Элементы.СписокСоздатьНоменклатуру.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗакрытияФормы()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВыбранныеОбъекты",       Новый Массив);
	Результат.Вставить("СозданныеОбъекты",       Новый Массив);
	Результат.Вставить("ПривязкаХарактеристики", Ложь);
	
	Возврат Результат;
		
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияФормыПривязкиХарактеристики(Результат, ДополнительныеПараметры) Экспорт
	
	Закрыть(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеХарактеристик(АдресРезультата, ДанныеХарактеристик)
		
	ИдентификаторЗаданияРаботыСНоменклатурой = Неопределено;
	
	Если Не ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеСервиса = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если Не ЗначениеЗаполнено(ДанныеСервиса) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеХарактеристик = ОбщегоНазначения.ТаблицаЗначенийВМассив(
		ДанныеСервиса.Скопировать(, "Идентификатор, Наименование, Характеристика, Загружена"));
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуПриДлительнойОперации(ЭтоНачалоДлительнойОперации)
	
	// Управление видимостью реализовано через страницы из-за проблем с отображеним иерархического списка
	// при не явном серверном вызове.
	
	Если ЭтоНачалоДлительнойОперации Тогда
		Элементы.СтраницыДлительнойОперации.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперацияАктивна;
	Иначе
		Элементы.СтраницыДлительнойОперации.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперацияНеАктивна;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти