#Область ОписаниеПеременных

&НаКлиенте
Перем мПрофиль;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПараметрыДляИнициализации = ВозможныеПараметрыИнициализацииФормы();
	ЗаполнитьЗначенияСвойств(ПараметрыДляИнициализации, Параметры);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыДляИнициализации);
	
	ИнициализироватьПараметрыВыбора(Параметры);
	
	ИспользоватьЭПВидимость = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	
	УстановитьВидимость(ИспользоватьЭПВидимость);
	
	ЗаполнитьТекстПоясняющейНадписи(ИспользоватьЭПВидимость И ИспользоватьЭП);
	
	УстановитьДоступность(Параметры);
	
	СброситьРазмерыИПоложениеОкна();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мПрофиль = ПрофильНастроекЭДО;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПрофильПриИзменении(Элемент)
	
	Отказ = Ложь;
	ПроверитьПрофильПриИзменении(Отказ);
	Если Отказ Тогда
		ПрофильНастроекЭДО = мПрофиль;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЭППриИзменении(Элемент)
	
	Если Не ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетНаОплату") Тогда
		ТребуетсяОтветнаяПодпись = ИспользоватьЭП;
	КонецЕсли;
	
	ИспользоватьЭППриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьЭППриИзмененииНаСервере()
	
	УстановитьДоступность();
	ЗаполнитьТекстПоясняющейНадписи();

КонецПроцедуры

&НаКлиенте
Процедура МаршрутПодписанияПриИзменении(Элемент)
	
	ЗаполнитьТекстПоясняющейНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьИзвещениеОПолученииПриИзменении(Элемент)
	
	ЗаполнитьТекстПоясняющейНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьОтветнуюПодписьПриИзменении(Элемент)
	
	ЗаполнитьТекстПоясняющейНадписи();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	Если ОтображатьВыборПрофиля И Не ЗначениеЗаполнено(ПрофильНастроекЭДО) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Профиль настроек ЭДО'")),
			,
			"ПрофильНастроекЭДО");
		Возврат;
	КонецЕсли;
	
	ПараметрыЗакрытия = ОбменСКонтрагентамиСлужебныйКлиент.СвойстваДокументооборотаЭД();
	ЗаполнитьЗначенияСвойств(ПараметрыЗакрытия, ЭтотОбъект);
	
	// Дополнительные служебные свойства
	ПараметрыЗакрытия.Вставить("Модифицированность", Модифицированность);
	
	Закрыть(ПараметрыЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрыть(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПроверитьПрофильПриИзменении(Отказ)
	
	// Если выбранный профиль прямого обмена
	// и э.д. счет фактура или корректировочный счет фактура,
	// то при выборе такого профиля необходимо показать предупреждение.
	
	Если ИсходящийДокумент = Перечисления.ВидыЭД.СчетФактура
		Или ИсходящийДокумент = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		
		СпособОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроекЭДО, "СпособОбменаЭД");
		Если ОбменСКонтрагентамиСлужебный.ЭтоПрямойОбмен(СпособОбмена) Тогда
			
			ШаблонСообщения = НСтр("ru='Отправка документа %1 возможна только через оператора ЭДО.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИсходящийДокумент);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
			Отказ = Истина;
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	// Ищет исходящий документ в выбранном профиле
	// и заполняет регламент ЭДО из нового профиля.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДОИсходящиеДокументы.ИспользоватьЭП КАК ИспользоватьЭП,
	|	ПрофилиНастроекЭДОИсходящиеДокументы.ТребуетсяОтветнаяПодпись КАК ТребуетсяОтветнаяПодпись,
	|	ПрофилиНастроекЭДОИсходящиеДокументы.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
	|	ПрофилиНастроекЭДОИсходящиеДокументы.ВерсияФормата КАК ВерсияФормата,
	|	ПрофилиНастроекЭДОИсходящиеДокументы.Ссылка.СпособОбменаЭД КАК СпособОбменаЭД,
	|	ПрофилиНастроекЭДОИсходящиеДокументы.Ссылка.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	ПрофилиНастроекЭДОИсходящиеДокументы.МаршрутПодписания
	|ИЗ
	|	Справочник.УдалитьПрофилиНастроекЭДО.ИсходящиеДокументы КАК ПрофилиНастроекЭДОИсходящиеДокументы
	|ГДЕ
	|	ПрофилиНастроекЭДОИсходящиеДокументы.Ссылка = &Ссылка
	|	И ПрофилиНастроекЭДОИсходящиеДокументы.ИсходящийДокумент = &ИсходящийДокумент";
	Запрос.УстановитьПараметр("Ссылка", ПрофильНастроекЭДО);
	Запрос.УстановитьПараметр("ИсходящийДокумент", ИсходящийДокумент);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	КонецЦикла;
	
	СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроекЭДО, "СпособОбменаЭД");
	
	НастройкиРегламентаЭДО = ОбменСКонтрагентамиСлужебный.РегламентПрофиляЭДО(ИсходящийДокумент, ВерсияФормата, СпособОбменаЭД);
	УстановитьДоступность(НастройкиРегламентаЭДО);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВозможныеПараметрыИнициализацииФормы()
	
	ПараметрыИнициализации = Новый Структура(
	"ИсходящийДокумент,
	|ИспользоватьЭП,
	|ТребуетсяИзвещениеОПолучении,
	|ПрофильНастроекЭДО,
	|ТребуетсяОтветнаяПодпись,
	|СпособОбменаЭД,
	|ИдентификаторОрганизации,
	|МаршрутПодписания,
	|ОтображатьВыборПрофиля,
	|Организация,
	|ИспользоватьУПД");
	
	Возврат ПараметрыИнициализации;

КонецФункции

&НаСервере
Процедура ЗаполнитьТекстПоясняющейНадписи(ИспользоватьЭППризнак = Неопределено)
	
	Если ИспользоватьЭППризнак = Неопределено Тогда
		ФОИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
		ИспользоватьЭППризнак = ИспользоватьЭП И ФОИспользоватьЭП;
	КонецЕсли;

	ТекстНадписи = "";
	
	Если ИспользоватьЭППризнак Тогда
		ТекстНадписи = " " + НСтр("ru = '* Документ будет подписываться электронной подписью%1;'");
		
		ТекстМаршрута = "";
		Если ЗначениеЗаполнено(МаршрутПодписания) Тогда
			ТекстМаршрута = " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'по маршруту ""%1""'"), МаршрутПодписания);
		КонецЕсли;
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНадписи, ТекстМаршрута);
	Иначе
		ТекстНадписи = " " + НСтр("ru = '* Документ не будет подписываться электронной подписью;'");
	КонецЕсли;
	
	Если ТребуетсяИзвещениеОПолучении Тогда
		ТекстНадписи = ТекстНадписи + Символы.ПС + " " + НСтр("ru = '* ожидается извещение о получении документа;'");
	Иначе
		ТекстНадписи = ТекстНадписи + Символы.ПС + " " + НСтр("ru = '* извещение о получении документа не требуется;'");
	КонецЕсли;
	
	Если ТребуетсяОтветнаяПодпись И ИспользоватьЭППризнак Тогда
		ТекстНадписи = ТекстНадписи + Символы.ПС + " " + НСтр("ru = '* ожидается ответная подпись документа.'");
	Иначе
		Если ИспользоватьУПД И ИсходящийДокумент = Перечисления.ВидыЭД.СчетФактура Тогда
			ТекстНадписи = ТекстНадписи + Символы.ПС + " " + НСтр("ru = '* ответная подпись не требуется для документов оказания услуг.'");
		Иначе
			ТекстНадписи = ТекстНадписи + Символы.ПС + " " + НСтр("ru = '* ответная подпись документа не требуется.'");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДекорацияПоясняющийТекст.Заголовок = ТекстНадписи;
	
КонецПроцедуры

&НаСервере
Процедура СброситьРазмерыИПоложениеОкна()
	
	ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		ХранилищеСистемныхНастроек.Удалить("ОбщаяФорма.НастройкаРегламентаЭДО", "", ИмяПользователя);
	КонецЕсли;
	
	КлючСохраненияПоложенияОкна = Строка(Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность(Параметры = Неопределено)
	
	НастройкиРегламента = Неопределено;
	
	Если Параметры <> Неопределено Тогда
		НастройкиРегламента = ОбменСКонтрагентамиСлужебный.НастройкиРегламентаЭДО(
			Параметры.ВидЭД, Параметры.ВерсияФормата, Параметры.СпособОбменаЭД);
	КонецЕсли;
		
	Если НастройкиРегламента <> Неопределено Тогда
		// Первичная инициализация - ориентируемся на переданный регламент
		Элементы.ИспользоватьЭП.Доступность = НастройкиРегламента.РедактироватьПодпись;
		Элементы.ОжидатьИзвещениеОПолучении.Доступность = НастройкиРегламента.РедактироватьИзвещение;
		Элементы.ОжидатьОтветнуюПодпись.Доступность = НастройкиРегламента.РедактироватьОтветнуюПодпись И ИспользоватьЭП;
	Иначе
		// Изменение реквизитов в процессе работы формы
		Элементы.ОжидатьОтветнуюПодпись.Доступность = ИспользоватьЭП;
	КонецЕсли;
	
	Элементы.МаршрутПодписания.Доступность = ИспользоватьЭП;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость(ИспользоватьЭПВидимость = Неопределено)
	
	Элементы.ПрофильНастроекЭДО.Видимость = ОтображатьВыборПрофиля;
	
	Если ИспользоватьЭПВидимость = Неопределено Тогда
		ИспользоватьЭПВидимость = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	КонецЕсли;
	
	Элементы.ГруппаНастройкиПодписания.Видимость = ИспользоватьЭПВидимость;
	Элементы.ОжидатьОтветнуюПодпись.Видимость = ИспользоватьЭПВидимость;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПараметрыВыбора(ПараметрыФормы)

	// Параметры выбора маршрута.
	ВозможныеСхемыПодписания = Новый Массив;
	ВозможныеСхемыПодписания.Добавить(Перечисления.СхемыПодписанияЭД.ОднойДоступнойПодписью);
	ВозможныеСхемыПодписания.Добавить(Перечисления.СхемыПодписанияЭД.ПоПравилам);
	
	Если ИсходящийДокумент = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		ВозможныеСхемыПодписания.Добавить(Перечисления.СхемыПодписанияЭД.УказыватьПриСоздании);
	КонецЕсли;
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.СхемаПодписания", ВозможныеСхемыПодписания);
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПараметрВыбора);
	Элементы.МаршрутПодписания.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Параметры выбора профиля.
	Если Параметры.Свойство("РазрешенныеСпособыОбмена") Тогда
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.СпособОбменаЭД", Параметры.РазрешенныеСпособыОбмена);
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ПараметрВыбора);
		Элементы.ПрофильНастроекЭДО.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти








